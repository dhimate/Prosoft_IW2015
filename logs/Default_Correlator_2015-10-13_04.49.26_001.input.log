VERS 00000001 4
HEAD 00000e97 <?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="/resources/transform.xslt"?><header><componentName>correlator</componentName><version>5.3.0.0.247085</version><build>rel/5.3.0.x@247085</build><buildPlatform>amd64-win</buildPlatform><platform>Windows Server 2008 R2 (Service Pack 1)</platform><cputype>AuthenticAMD family 15 model 8 stepping 0 Six-Core AMD Opteron(tm) Processor 2427</cputype><cpus>4</cpus><javaEnabled>true</javaEnabled><replayLogMode>inputLog</replayLogMode><args><arg>C:\SoftwareAG\Apama 5.3\bin\correlator.exe</arg><arg>--logQueueSizePeriod</arg><arg>0</arg><arg>-l</arg><arg>C:\SoftwareAG\ApamaWork_5.3\license\license.txt</arg><arg>--port</arg><arg>15903</arg><arg>--loglevel</arg><arg>INFO</arg><arg>--name</arg><arg>Apama Studio Correlator for Prosoft_IW2015(Prosoft_IW2015:Default Correlator)</arg><arg>-j</arg><arg>--jmsConfig</arg><arg>C:\SoftwareAG\ApamaWork_5.3\studio_workspace\.metadata\.plugins\org.eclipse.core.resources\.projects\Prosoft_IW2015\com.apama.text\JMS_Correlator-Integrated_Adapter</arg><arg>--inputLog</arg><arg>logs/Default_Correlator_${START_TIME}_${ID}.input.log</arg></args><environment><variable>ALLUSERSPROFILE=C:\ProgramData</variable><variable>APAMA_HOME=C:\SoftwareAG\Apama 5.3</variable><variable>APAMA_WORK=C:\SoftwareAG\ApamaWork_5.3</variable><variable>APPDATA=C:\Users\Administrator\AppData\Roaming</variable><variable>CLIENTNAME=PTGHP450-YD</variable><variable>COMMONPROGRAMFILES=C:\Program Files\Common Files</variable><variable>COMMONPROGRAMFILES(X86)=C:\Program Files (x86)\Common Files</variable><variable>COMMONPROGRAMW6432=C:\Program Files\Common Files</variable><variable>COMPUTERNAME=WMSERVER11</variable><variable>COMSPEC=C:\Windows\system32\cmd.exe</variable><variable>FP_NO_HOST_CHECK=NO</variable><variable>HOMEDRIVE=C:</variable><variable>HOMEPATH=\Users\Administrator</variable><variable>LOCALAPPDATA=C:\Users\Administrator\AppData\Local</variable><variable>LOGONSERVER=\\WMSERVER11</variable><variable>NUMBER_OF_PROCESSORS=4</variable><variable>OS=Windows_NT</variable><variable>PATH=C:\SoftwareAG\Apama 5.3\third_party\jre\bin\server;C:\SoftwareAG\Apama 5.3\third_party\jre\bin;C:\SoftwareAG\Apama 5.3\third_party\jre\lib\amd64\server;C:\SoftwareAG\Apama 5.3\third_party\jre\lib\amd64;C:\SoftwareAG\Apama 5.3\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\</variable><variable>PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC</variable><variable>PROCESSOR_ARCHITECTURE=AMD64</variable><variable>PROCESSOR_IDENTIFIER=AMD64 Family 16 Model 8 Stepping 0, AuthenticAMD</variable><variable>PROCESSOR_LEVEL=16</variable><variable>PROCESSOR_REVISION=0800</variable><variable>PROGRAMDATA=C:\ProgramData</variable><variable>PROGRAMFILES=C:\Program Files</variable><variable>PROGRAMFILES(X86)=C:\Program Files (x86)</variable><variable>PROGRAMW6432=C:\Program Files</variable><variable>PROMPT=$P$G</variable><variable>PSMODULEPATH=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\</variable><variable>PUBLIC=C:\Users\Public</variable><variable>SESSIONNAME=RDP-Tcp#0</variable><variable>SYSTEMDRIVE=C:</variable><variable>SYSTEMROOT=C:\Windows</variable><variable>TEMP=C:\Users\ADMINI~1\AppData\Local\Temp\2</variable><variable>TMP=C:\Users\ADMINI~1\AppData\Local\Temp\2</variable><variable>USERDOMAIN=WMSERVER11</variable><variable>USERNAME=Administrator</variable><variable>USERPROFILE=C:\Users\Administrator</variable><variable>WINDIR=C:\Windows</variable><variable>WINDOWS_TRACING_FLAGS=3</variable><variable>WINDOWS_TRACING_LOGFILE=C:\BVTBin\Tests\installpackage\csilogfile.log</variable></environment><version>5.3.0.0.247085</version></header>
RAND 0000000a 1620754749
CONN 00000027 6205067114090624777:3955614762 from R01
CONN 00000036 6205067114090624777:3482309487 from internal:R:control
CONN 00000027 6205067114090624777:1865318693 from S01
CONN 0000003c 6795184426424404343:6961106315128015223 from 127.0.0.1:58606
TIME 0000000e 1444729770.4,1
MONF 00004657 package com.apama.dataview;

/*
 * $Copyright(c) 2007, 2008 Progress Software Corporation (PSC). All rights reserved.$
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */


/* Apama DataViewService API.
 *
 * This service enables MonitorScript or JMon applications to expose a simple 
 * read-only "DataView" interface. DataViews may be viewed using Apama Dashboard 
 * Studio in a similar way to Scenarios.
 *
 * Several implementations of this interface will exist. 
 * Each implementation is in a separate file - inject the one you wish to use.
 *   e.g. DataViewService_Impl_Dict.mon
 *
 * Route vs. Emit
 * The standard implementations of the DataViewService will always ROUTE 
 * any com.apama.dataview.* events, with the expectation that applications
 * using the service are co-located in the same correlator as the service.
 * If your architecture requires the client application to be in a separate 
 * correlator to the DataView service, then two "emitter" monitors are 
 * available.
 * DataViewService_ServiceEmitter.mon  would be injected into the same 
 * correlator as the DataView service after injecting the DataViewService 
 * interface but before injecting the implementation.
 * DataViewService_ApplicationEmitter.mon  would be injected into the same 
 * correlator as the client application after injecting the DataViewService 
 * interface but before injecting the client application.
 * 
 *
 * Notes:
 * 
 * 1) Every event has an initial field called msgId. Clients may choose to put 
 *    some identifier in this field when sending messages to the service. Any 
 *    event routed by the service in response will contain the same identifier.
 *
 * 2) Most events contain a field called "dvName". This string 
 *    uniquely identifies a DataView inside the correlator. 
 *
 * 3) Every event has a final field called extraParams that is a string:string
 *    dictionary. Some implementations may choose to use this field. It provides
 *    a way of future-proofing the interface to a certain extent.
 *
 * $Revision: 221069 $
 */





/* ==========================================================================
 * ==========================================================================
 * Events to send to the DataViewService to manage the DataView schemas
 * ==========================================================================
 * ========================================================================== */


/** Define a new DataView type.
 *
 * Expect either a DataViewDefinition or a DataViewException in response.
 *
 * See also: DataViewDefinition() DataViewException(), DataViewAddItem()
 *
 * Direction: From the customer Monitor to the DataViewService.
 */
event DataViewAddDefinition {
	/** Optional application-defined message identifier used to correlate 
		requests and responses. */
	string msgId;
	/** The name that uniquely identifies this DataView (e.g. DataView_XXX) */
	string dvName;
	/** The display name of the DataView (e.g. "XXX manager") */
	string dvDisplayName;
	/** Optional field containing a description of this DataView 
		(e.g. "This DataView exposes XXX objects"). */
	string dvDescription;
	/** Specifies the names of each field exposed by the DataView. */
	sequence<string> fieldNames;
	/** Specifies the types corresponding to each field in the fieldNames sequence. 
		Supported types are: string, float, integer, boolean. */
	sequence<string> fieldTypes;
	/** Optional set of field names whose values in an Item are to be combined 
		to make a unique key that can be used instead of the dvItemId field of 
		DataViewDeleteItem, DataViewUpdateItem, and DataViewUpdateDelta events.
 	*/
	sequence<string> keyFields;
	/** Optional dictionary of parameters for future extensibility; 
		DataView implementation-specific parameters may also be stored here. */
	dictionary<string, string> extraParams;
}


/* Remove an existing DataView type.
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 * Response: DataViewUnloaded()
 */
event DataViewDeleteDefinition {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // The DataView Name (e.g. conventionally DataView_XXX)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request helper dictionary to facilitate sequence position lookup
 *    by field name.
 *
 * See also: DataViewFieldLookup()
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 * Response: DataViewFieldLookup()
 */
event DataViewGetFieldLookup {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // The DataView Name (e.g. conventionally DataView_XXX)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}



/* ==========================================================================
 * ==========================================================================
 * Events to send to the DataViewService to manage individual DataView Items
 * ==========================================================================
 * ========================================================================== */


/* Request that a new Item is added to a specific DataView.
*
* See also: DataViewItem()
*
* Direction: From the customer Monitor to the DataViewService.
*/
event DataViewAddItem {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	string owner;                            // the owner (user) of the Item.
	float timeStamp;                         // the timestamp of the initial update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	sequence<string> fieldValues;            // complete sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request that a new Item is added to a specific DataView if it does not already exist, 
* or is updated when it does exist. This will ONLY work when keyFields are used.
* Attempts to change the owner of an existing item will be rejected with a DataViewItemException.
*
* See also: DataViewItem()
*
* Direction: From the customer Monitor to the DataViewService.
*/
event DataViewAddOrUpdateItem {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	string owner;                            // the owner (user) of the Item - ONLY used for new items.
	float timeStamp;                         // the timestamp of the initial update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	sequence<string> fieldValues;            // complete sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Contains updated DataView Item fields.
 * Use this to update the fields.
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 */
event DataViewUpdateItem { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView (may be -1 if using keyFields instead)
	float timeStamp;                         // the timestamp of the update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	sequence<string> fieldValues;            // sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Contains updated DataView Item fields.
 * Use this to update the fields.
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 */
event DataViewUpdateItemDelta { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView (may be -1 if using keyFields instead)
	float timeStamp;                         // the timestamp of the update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	dictionary<integer,string> fieldValues;  // values to be updated. Dictionary Key is index into fields sequence, Value is new field value in sequence. 
	                                         // If not using dvItemId, then the dictionary MUST contain the key values (even though they have not changed)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request that a specific Item within a specific DataView is deleted.
 *
 * See also: DataViewItemDeleted()
 *
 * Direction: From the customer Monitor to the DataViewService.
 */
event DataViewDeleteItem {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView (may be -1 if using keyFields instead)
	sequence<string> keyFields;              // [OPTIONAL] sequence of ONLY key field values (if not using the dvItemId)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request that all Items within a specific DataView are deleted.
 *
 * See also: DataViewAllItemsDeleted()
 *
 * Direction: From the customer Monitor to the DataViewService.
 */
event DataViewDeleteAllItems {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* ==========================================================================
 * ==========================================================================
 * Events to that are callbacks from DatavViewService
 * ==========================================================================
 * ========================================================================== */


/** Confirmation that a specific DataView definition has been added.
 *
 * For information on the meaning of each field, see DataViewAddDefinition()
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewDefinition {
	string msgId;
	string dvName;
	string dvDisplayName;
	string dvDescription;
	sequence<string> fieldNames;
	sequence<string> fieldTypes;
	sequence<string> keyFields;
	dictionary<string, string> extraParams;
}


/* Indicates that a specific DataView definition is being unloaded.
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewDefinitionDeleted { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Notifies all interested clients that a new Item has been added to a specific 
 * DataView. 
 * The event provides the unique itemID, owner (user), and initial values for 
 * all fields.
 *
 * See also: DataViewAddItem()
 *
 * Direction: From the DataViewService to the customer Monitor.
 *
 */
event DataViewItem { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView
	string owner;                            // the owner (user) of the Item.
	sequence<string> fieldValues;            // sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Notifies all interested clients that a specific Item within a specific 
 * DataView has been deleted.
 *
 * See also: DataViewDeleteItem()
 *
 * Direction: From the DataViewService to the customer Monitor.
 *
 */
event DataViewItemDeleted {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView
	sequence<string> keyFields;              // sequence of ONLY key field values (for those not using the dvItemId)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Notifies all interested clients that all Items within a specific 
 * DataView have been deleted.
 *
 * See also: DataViewDeleteAllItems()
 *
 * Direction: From the DataViewService to the customer Monitor.
 *
 */
event DataViewAllItemsDeleted {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* The helper dictionary to facilitate sequence position lookup
 *    by field name.
 *
 * See also: DataViewGetFieldLookup()
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewFieldLookup {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // The DataView Name (e.g. conventionally DataView_XXX)
	dictionary <string, integer> fields;     // A map of fieldName:fieldIndex
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Indicates that an exception occurred within the DataViewService, and indicates 
* the name of the specific DataView.
*
* Direction: From the DataViewService to the customer Monitor.
*/
event DataViewException {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	wildcard string message;                 // The message in the exception. This is designed to be human readable, and may change between implementations/versions, hence the wildcard.
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}

/* Indicates that an exception occurred within the DataViewService, and indicates 
* the name of the specific DataView, and the Id of the specific Item.
*
* Direction: From the DataViewService to the customer Monitor.
*/
event DataViewItemException {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView
	wildcard string message;                 // The message in the exception. This is designed to be human readable, and may change between implementations/versions, hence the wildcard.
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Indicates that the DataView service is being unloaded.
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewServiceUnloaded { 
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


monitor DataViewService_Interface {
	// MetaData relating to the interface
	dictionary<string,string> interfaceMetaData := {
		"interface.package"     :"com.apama.dataview",
		"interface.name"        :"DataViewService_Interface",
		"interface.fileName"    :"DataViewService_Interface.mon",
		"interface.vendor"      :"Apama",
		"interface.version"     :"5.3.0.0.247085",
		"interface.fullVersion" :"rel/5.3.0.x@247085",
		"interface.language"    :"MonitorScript"
	};

	action onload {
		log "DataViewService interface loaded. MetaData: "+interfaceMetaData.toString() at INFO;
	}
}

 0000003e C:\SoftwareAG\Apama 5.3\monitors\DataViewService_Interface.mon
TIME 0000000e 1444729770.6,1
MONF 00012519 package com.apama.scenario;

/**
 * This file contains the shared event definitions that are generic across 
 * all Scenarios.  
 *
 * WARNING: 
 *    The event definitions contained in this file form an internal protocol 
 *    and may change between software releases.
 *
 * Notes:
 * 1) The Event definitions contained in this file MUST be considered
 *    as an internal implementation of the communications protocol
 *    between the Apama client API and an Apama server.  As such
 *    these event definitions MUST NOT be considered "stable" and are 
 *    subject to change in any future software release.
 *
 *    The ONLY supported public APIs to the Scenario Service are the 
 *    Java client API (in the com.apama.services.scenario package) and the 
 *    .NET client API (in the Apama.Services.Scenario namespace).  
 *    Customers should not attempt to interface at the event or 
 *    EPL layer. Some events have been changed over time (as 
 *    noted here).
 *
 * 2) Most events now contain an initial field called "scenarioId". This string 
 *    uniquely identifies a scenario inside the correlator, and is used as 
 *    the package name, in several events, and for making up a part of the 
 *    data and control channel names.
 *
 * 3) Events that are intended to be used in a request-response pattern contain
 *    a "messageId" field.  The value of this field must be copied from the 
 *    request event into the response event. The mechanism allows clients to 
 *    match up request-response pairs.
 *
 *
 * $Copyright(c) 2005-2011 Progress Software Corporation (PSC). All rights reserved.$
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 *
 * $Revision: 242755 $
 */

/**
 * Request that a new instance of a specific scenario is created.
 *
 * See also: Created(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Create {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	string owner;                        // the owner (user) of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
}

/**
 * Notifies all interested clients that a new instance of a specific 
 * scenario has been created. 
 * The event provides the owner (user), initial state, and initial values for 
 * all input fields and all output fields.
 *
 * See also: Create()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Created { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * Notifies the interested clients of child scenarios created from
 * a parent scenario.
 *
 * Direction: Internal in the correlator
 *
 * Channel: <none>
 */
event ParentChildRelationship {
	string parentScenarioId;
	integer parentScenarioInstanceId;
	string childScenarioId;
	integer childScenarioInstanceId;
}


/**
 * Request that a specific instance of a specific scenario is edited (the input 
 * field values are changed).
 *
 * See also: Edited(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Edit { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
}


/**
 * Notifies all interested clients that a specific instance of a specific 
 * scenario has been edited (the input field values have changed).
 *
 * See also: Edit()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Edited { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * Request that a specific instance of a specific scenario is deleted.
 *
 * See also: Deleted(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Delete {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Notifies all interested clients that a specific instance of a specific 
 * scenario has been deleted.
 *
 * See also: Delete()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Deleted {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Indicates that a specific instance of a specific scenario has died.
 * This is sent as a result of a scenario instance use of MonitorScript ondie.
 * This occurs for any of deleting a running scenario, a scenario failing, or 
 * entering the end state.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event InstanceDied {
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Contains updated scenario instance output fields.
 * Note that this is the ONLY event type that is sendted on the 
 * "<scenarioId>.Data" channel.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Update { 
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
	float timeStamp;                     // the time of the update (seconds since epoch)
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * A general Acknowledgement event that is the "response" to various "request"
 * events such as Create, Edit, Delete.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Control
 */
event Acknowledge { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the id of the scenario instance
	boolean success;                     // boolean indication of success
	sequence<string> outputFieldValues;  // sequence of the OUTPUT field values in string form, 
	                                     //   or an empty sequence if success = false
}


/**
 * Indicates that a specific instance of a specific scenario has changed 
 * state, where valid states include "ENDED", "FAILED", "RUNNING".
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event StateChange { 
	string scenarioId;                   // the unique name of the scenario.
	integer scenarioInstanceId;          // the ID of the scenario instance.
	string state;                        // the new state.
}


/**
 * Request that each scenario loaded in the correlator send its meta
 * information out on the supplied channel. When all scenarios have
 * sent out this information, a final RequestScenariosDone event will
 * be sent on the same channel.
 *
 * As soon as this event is received, a RequestScenariosAck will be
 * sent on the same channel so client can stop resending the RequestScenarios
 * event.
 *
 * See also: Scenario, RequestScenariosDone, RequestScenariosAck
 *
 * Direction: From the client to the correlator.
 *
 * Response: Scenario() from each loaded scenario.
 */
event RequestScenarios { 
	// renamed for clarity - was Request
	string channel;                      // Name of the private response channel.
}


/**
 * This is a simple marker event that is sent by the correlator to indicate 
 * that it has finished sending all of the Scenario events in response
 * to a RequestScenarios event.
 * 
 * See also: RequestScenarios, Scenario.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: The private channel that was specified in the RequestScenarios event.
 */
event RequestScenariosDone {}

/* This is a simple ack event that is sent by the correlator to indicate the
 * RequestScenarios event is received and the request is being processed
 *
 * See also: RequestScenarios
 *
 * Direction: From the correlator to the client.
 *
 * Channel: The private channel that was specified in the RequestScenarios event.
 */
event RequestScenariosAck {}

/**
 * Request that each instance of the specified scenario send an Instance event 
 * out on the supplied channel. When all instances for the scenario have been 
 * sent out, a final RequestInstancesDone event will be sent on the same channel.
 *
 * See also: Instance, RequestInstancesDone
 *
 * Direction: From the client to the correlator.
 *
 * Response: Instance() from each scenario instance.
 */
event RequestInstancesOnChannel { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
}

/**
 * Request that each instance for the specified user of the specified scenario
 * send an Instance event out on the supplied channel. When all instances for
 * the scenario have been sent out, a final RequestInstancesDone event will be 
 * sent on the same channel.
 *
 * See also: Instance, RequestInstancesDone
 *
 * Direction: From the client to the correlator.
 *
 * Response: Instance() from each scenario instance.
 */
event RequestInstancesOnChannelByUser { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
	string owner;                        // the username to filter by
}


/**
 * This is a simple marker event that is sent by the correlator to indicate 
 * that it has finished sending all of the Instance events in response
 * to a RequestInstancesInternal event.
 * 
 * See also: RequestInstancesInternal, Scenario.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: A unique private channel as specified by the client in a 
 *          RequestScenariosOnChannel event.
 *
 *          Note that previously it would have been on <scenarioId>.Data and 
 *          <scenarioId>.Data.Raw, but that behaviour is now deprecated.
 */
event RequestInstancesDone {
	string scenarioId;                   // Identifier of the scenario for instances were returned. 	
	integer messageId;                   // the unique message ID (for request-response matching)
}


/**
 * Describes the meta-information about a scenario that is loaded in the 
 * correlator.
 * 
 * See also: RequestScenarios, RequestScenariosDone, ScenarioUnloaded
 * 
 * Direction: From correlator to client.
 *
 * Channel:   1) com.apama.scenario to broadcast when loaded.
 *            2) A unique private channel as specified by the client in a 
 *               RequestScenarios event.
 *
 * This event has gained the executionMode field in Apama 4.2
 */
event Scenario {
	string scenarioId;                   // unique identifier for Scenario, e.g. Scenario_statistical$002darbitrage
	string displayName;                  // user-specified name for Scenario, e.g. statistical-arbitrage
	string description;                  // description of the Scenario
	sequence<string> inputNames;         // input parameter names
	sequence<string> inputTypes;         // input parameter types
	sequence<string> inputConstraints;   // input parameter contraints
	sequence<string> inputDefaults;      // input parameter default values
	sequence<string> outputNames;        // output parameter names
	sequence<string> outputTypes;        // output parameter types
	integer executionMode;               // 0 = serial, 1 = parallel, 2 = parallel child. New as of 4.2
	dictionary<string, string> extraParams; // Additional parameters
}



/**
 * Indicates that a specific Scenario definition is being unloaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Control
 */
event ScenarioUnloaded { 
	string scenarioId;                   // the unique name of the scenario
}

/**
 * Provides a dump of the current state of a scenario instance.
 * The event definition is identical to the Created event, and includes the 
 * owner (user), initial state, and current values for all input fields and 
 * all output fields.
 *
 * Instance events are sent in response to RequestInstancesOnChannel event 
 * and the deprecated RequestInstancesInternal event; 
 *
 * See also: RequestInstancesOnChannel, RequestInstancesDone, RequestInstancesInternal
 *
 * Direction: From the correlator to the client.
 *
 * Channel: A unique private channel as specified by the client in a 
 *          RequestScenariosOnChannel event.
 *
 *          Note that previously it would have been on <scenarioId>.Data and 
 *          <scenarioId>.Data.Raw, but that behaviour is now deprecated.
 */
event Instance {
	string scenarioId;                   // the unique name of the scenario. 
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance. 
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form. 
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form. 
}


/**
 * Indicates this shared MonitorScript has been loaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: com.apama.scenario to broadcast when loaded.
 */
event ScenarioServiceLoaded { 
}

/**
 * Indicates this shared MonitorScript is being unloaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: com.apama.scenario to broadcast when unloaded.
 */
event ScenarioServiceUnloaded { 
}


/**
 * Set the period over which updates will be queued and coalesced before being
 * sent out on the data channel. Defaults to zero, which means they won't be
 * queued. If it is negative then we won't send any updates on the data channel.
 * This event is deprecated and the ConfigureUpdates event should be used 
 * instead (see below)
 */
event SetThrottlingPeriod {
	float period;   // The period in seconds. Default zero.
}


/**
 * Configures how updates are sent from scenarios.
 * Each scenario is controlled by two configurations - a global default,
 * and an optional per scenario configuration.  The per scenario
 * configuration takes precedence over the global default.
 * The configuration is made up of a number of entries in 
 * the configuration dictionary. The ConfigureUpdate event 
 * is merged into any previous configuration.
 *
 * Global configuration can be modified by specifying an empty string 
 * for scenarioId, and empty values remove values.
 */
event ConfigureUpdates {
	/** Specifies the scenario the configuratio will apply to, or use 
		empty string "" to specify a global default. 
	*/
	string scenarioId;
	/** 
	 * A set of the configurations modified by this event
	 * the key and meaning is one of:
	 * sendThrottled - boolean - whether to send Updates to the 
	 *                           Throttled (.Data) channel (default=true)
	 * throttlePeriod - float - period with which to send Updates. 
	 *                          0.0 means updates are not throttled - 
	 *                          every update is sent on the Throttled 
	 *                          channel. (default=0.0)
	 * sendRaw - boolean - whether to send Updates on the Raw channel 
	 *                     (.Raw) (default=true)
 	 * sendThrottledUser - boolean - whether to send Updates to the 
	 *                     throttled filtered (.Data:username) channel
	 *                     (default=false)
 	 * sendRawUser - boolean - whether to send Updates to the Raw 
	 *                     channel (.Raw:username) (default=false)
	 * routeUpdate - boolean - whether to route Update (and Edited, Deleted) events.
	 * An empty value removes that entry from the configuration
	 */
	dictionary<string,string> configuration;
}

/**
 * Immediately flushes to receivers any scenario Update events that were 
 * waiting for the next throttling period before being sent. 
 * 
 */
event SendQueuedUpdatesNow {
	
}

/* ==========================================================================
 * The following describes INTERNAL event definitions that should not be sent 
 * into the correlator, nor relied upon.
 * ==========================================================================
 */

/**
 * Request that each instance of the specified scenario send an Instance event 
 * out on the scenario Data or Raw channel. When all instances for the scenario
 * have been sent out, a final RequestInstancesDone event will be sent on the 
 * same channel.
 *
 * See also: Instance, RequestInstancesDone, RequestInstancesOnChannel, RequestInstancesOnChannelByUser
 *
 * Direction: From the ScenarioService to the scenario
 *
 * Response: Instance() from each scenario instance, RequestInstancesDone when finished.
 */
event RequestInstancesInternal { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
	boolean internal;                    // if true, events should be routed/ send-to'd the main context
	string owner;                        // owner filter (optional)
	boolean ownerFilter;                 // whether to filter by owner
}

/**
 * A scenario has finished running, but is still discoverable.
 * (i.e. entered end state or failed - but not deleted).
 * Note that this event contains the state as of the last
 * Update/ Edited event - i.e. if an action modified an output variable 
 * and then caused the scenario to fail, the prior modification
 * would not be reflected in this event.
 *
 * This event contains sufficient information for discovery of the
 * scenario instance later
 * 
 * Direction: from scenarios to the ScenarioService sub-monitor (spawned per scenario)
 */
event ScenarioFinished {
	string scenarioId;                   // Identifier of the scenario which has failed. 
	integer scenarioInstanceId;          // the ID of the scenario instance. 
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form. 
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form. 
}
/**
 * Only used internally to tell all the scenarios to start routing their
 * meta data (Scenario). It is followed by a sweeper FinishedScenarioRecovery
 * event which indicates that all the scenarios have reported in.
 */
event StartScenarioRecovery {}

/**
 * Sweeper event to indicate that scenario recovery is done. Only used internally.
 */
event FinishedScenarioRecovery {}

/**
 * Trigger discovery of a parallel scenario. Sent from a sub-monitor of
 * ScenarioService to RequestInstancesHandler to create a new sub-monitor.
 */
event RequestInstancesParallel {
	RequestInstancesInternal request;          // the original request event
	dictionary<integer, context> instances;    // all scenario instances and their running context
	integer highestInstanceId;                 // the highest scenarioInstanceId listed in instances (or more accurately, the highest when discovery started)
}

/**
 * Discovery protocol of a parallel scenario. Sent from a scenario instance
 * to RequestInstancesHandler.
 */
event RequestInstancesParallelDone {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}

/**
 * Notification of a new scenario instance
 */
event ParallelStarting {
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
	string owner;                        // the owner of the scenario instance
	context runningCtx;                  // the context the scenario is running in
}

/**
 * Get the current configuration for a given scenario and the default configuration
 */
event GetConfiguration {
	string scenarioId;                   // the unique name of the scenario
}

/**
 * The current configuration for a given scenario and the default configuration
 * @see ConfigureUpdates
 */
event Configuration {
	string scenarioId;                        // the unique name of the scenario
	dictionary<string, string> defaults;      // the global defaults
	dictionary<string, string> configuration; // the scenario configuration (takes precedence)
}


/**
 * An operation has completed. Sent from parallel scenarios to the main context.
 */
event OperationCompleted {
	string scenarioId;
	integer scenarioInstanceId;
	integer messageId;
}

/**
 * Notification that a scenario has loaded a ConfigureUpdates event
 */
event ScenarioProcessedUpdates {
	string scenarioId;
}

/**
 * Request all configuration
 */
event GetAllConfiguration {
	integer requestId;
}

/** 
 * Response all configuration
 */
event AllConfiguration {
	integer requestId;
	dictionary<string, string> defaultConfig;
	dictionary<string, dictionary<string, string> > configurations;
}


/**
 * Library of utiltiy actions
 */
event ScenarioServiceLibrary {

	/**
	 * Get the control channel for a scenario Id. This channel
	 * is always enabled (uses an event set scenario ID)
	 */
	action getControlChannel(string scenarioId) returns string
	{
		return scenarioId+".Control";
	}
	/**
	 * Get the data channel for a scenario ID. This channel 
	 * is enabled by the sendThrottled configuration key and 
	 * the throttlePeriod key (Update events may be throttled)
	 */
	action getDataChannel(string scenarioId) returns string
	{
		return scenarioId+".Data";
	}
	/**
	 * Get the raw channel for a scenario ID. This channel
	 * is enabled by the sendRaw configuration key.
	 */
	action getRawChannel(string scenarioId) returns string
	{
		return scenarioId+".Data.Raw";
	}
	/**
	 * Get the data channel for a scenario Id. This channel 
	 * is enabled by the sendThrottledUser configuration key and 
	 * the throttlePeriod key (Update events may be throttled)
	 */
	action getDataUserChannel(string channel, string owner) returns string
	{
		return channel+":"+owner;
	}
	/**
	 * Get the raw channel for a scenario Id. This channel
	 * is enabled by the sendRawUser configuration key.
	 */
	action getRawUserChannel(string channel, string owner) returns string
	{
		return channel+":"+owner;
	}
	
	/**
	 * Merge configuration. Any entries in updates overwrite entries in configuration.
	 * An empty string value removes the value.
	 * @see ConfigureUpdates
	 */
	action mergeConfiguration(dictionary<string, string> updates, dictionary<string, string> configuration) {
		string k;
		for k in updates.keys() {
			configuration[k]:=updates[k];
			if updates[k]="" then {
				configuration.remove(k);
			}
		}
	}
	
	// implementation note: the defaults for sendThrottled, sendRaw, throttlePeriod, etc are in the following actions:
	/**
	 * Get the sendThrottled value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendThrottled(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendThrottled", "true");
		return c = "true";
	}

	/**
	 * Get the sendThrottledUser value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendThrottledUser(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendThrottledUser", "false");
		return c = "true";
	}
	
	/**
	 * Get the sendRaw value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendRaw(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendRaw", "true");
		return c = "true";
	}
	
	/**
	 * Get the sendRawUser value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendRawUser(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendRawUser", "false");
		return c = "true";
	}
	
	/**
	 * Get the throttlePeriod value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getThrottlePeriod(dictionary<string,string> defaults, dictionary<string,string> config) returns float {
		string c:=getConfig(defaults, config, "throttlePeriod", "0.0");
		return float.parse(c);
	}
	
	/**
	 * Get the routeUpdate value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getRouteUpdate(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "routeUpdate", "false");
		return c = "true";
	}
	

	/**
	 * Get the specified key from the configuration dictionaries, reverting to the default 
	 * if none specified.
	 */
	action getConfig(dictionary<string,string> defaults,
	                 dictionary<string,string> config, 
	                 string key, string _default) returns string {
		if config.hasKey(key) then {
			return config[key];
		}
		if defaults.hasKey(key) then {
			return defaults[key];
		}
		return _default;
	}

	action configurationManager(dictionary<string, string> defaultConfig, dictionary<string, dictionary<string, string> > configurations) {
		// the recognised ConfigureUpdates configuration keys, as above:
		dictionary<string,boolean> KNOWN_CONFIG_KEYS := {"sendThrottled":true, "throttlePeriod":false,
		 "sendRaw":true, "sendThrottledUser":true, "sendRawUser":true, "routeUpdate":true};

		dictionary <string,string> EMPTY_DICT:=new dictionary<string,string>;
		ConfigureUpdates cu;
		on all ConfigureUpdates():cu {
			string key;
			for key in cu.configuration.keys() {
				if not KNOWN_CONFIG_KEYS.hasKey(key) then {
					log "Unrecognized configuration property "+key+" in event "+cu.toString() at WARN;
				}
			}
			if cu.scenarioId = "" then {
				mergeConfiguration(cu.configuration, defaultConfig);
				log "Received "+cu.toString()+" : defaults applicable to all scenarios" at INFO;
			} else {
				if not configurations.hasKey(cu.scenarioId) then {
					configurations.add(cu.scenarioId, new dictionary<string,string>);
				}
				mergeConfiguration(cu.configuration, configurations[cu.scenarioId]);
				on ScenarioProcessedUpdates(cu.scenarioId) -> completed ConfigureUpdates(scenarioId=cu.scenarioId) {
					log "Received "+cu.toString()+" : applied to scenario" at INFO;
				}
				on completed ConfigureUpdates(scenarioId=cu.scenarioId) and not ScenarioProcessedUpdates(cu.scenarioId) {
					log "Received "+cu.toString()+" : for scenario that is not yet defined" at INFO;
				}
			}
		}

		GetConfiguration getConfig;
		on all GetConfiguration():getConfig {
			dictionary<string,string> config:=EMPTY_DICT;
			if configurations.hasKey(getConfig.scenarioId) then {
				config:=configurations[getConfig.scenarioId];
			}
			route Configuration(getConfig.scenarioId, defaultConfig, config);
		}	
		GetAllConfiguration gac;
		on all GetAllConfiguration():gac {
			route AllConfiguration(gac.requestId, defaultConfig, configurations);
		}
	}
		
}

event CallbackHelper {
	sequence<action<> > callbacks;
	action callback {
		action<> c;
		for c in callbacks {
			c();
		}
	}
}



/**
 * Base event for tracking configuration for a given scenario
 */
event ScenarioServiceUpdaterBase {
	// these are internal and should not be set by users
	string scenarioId;
	dictionary<string,string> defaultConfig;
	dictionary<string,string> config;
	ScenarioServiceLibrary lib;
	boolean sendThrottled;
	boolean sendRaw;
	boolean sendAny;
	boolean emitAny;
	boolean sendThrottledUser;
	boolean sendRawUser;
	boolean routeUpdate;
	float throttlePeriod;
	float throttleStart;
	sequence<listener> listeners;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario
	 * @param sId the scenarioId
	 */
	action init(string sId, action<> cb_onUpdate) {
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		route GetConfiguration(scenarioId);
		Configuration c;
		listener l:=on Configuration(scenarioId=scenarioId):c {
			config := c.configuration;
			defaultConfig := c.defaults;
			configurationUpdated();
			cb_onUpdate();
		}
		listeners.append(l);
	}

	/**
	 * Listen for further configuration changes.
	 * @param cb_onUpdate callback upon configuration having been updated
	 */	
	action listenToConfigureUpdates(action<> cb_onUpdate) {
		ConfigureUpdates cu;
		listener l:=on all ConfigureUpdates(scenarioId=""):cu or all ConfigureUpdates(scenarioId=scenarioId):cu {
			if(cu.scenarioId != "") then {
				route ScenarioProcessedUpdates(cu.scenarioId);
			}
			onConfigureUpdates(cu);
			cb_onUpdate();
		}
		listeners.append(l);
	}

	/**
	 * Called when new ConfigureUpdates event available
	 * @param sId the scenarioId
	 */
	action onConfigureUpdates(ConfigureUpdates cu) {
		if cu.scenarioId = "" then {
			lib.mergeConfiguration(cu.configuration, defaultConfig);
		} else {
			lib.mergeConfiguration(cu.configuration, config);
		}
		configurationUpdated();
	}
	
	/**
	 * Called when the configuration should be re-parsed.
	 * @param sId the scenarioId
	 */
	action configurationUpdated() {
		sendThrottled:=lib.getSendThrottled(defaultConfig, config);
		sendThrottledUser:=lib.getSendThrottledUser(defaultConfig, config);
		if sendThrottled or sendThrottledUser then {
			throttlePeriod:=lib.getThrottlePeriod(defaultConfig, config);
			if(throttlePeriod < 0.0) then {
				sendThrottled:=false;
				sendThrottledUser:=false;
			}
			throttleStart:=currentTime;
		}
		sendRaw:=lib.getSendRaw(defaultConfig, config);
		sendRawUser:=lib.getSendRawUser(defaultConfig, config);
		routeUpdate:=lib.getRouteUpdate(defaultConfig, config);
		sendAny:= sendRaw or sendThrottled or routeUpdate or sendRawUser or sendThrottledUser;
		emitAny:= sendRaw or sendThrottled or sendRawUser or sendThrottledUser;
	}

	/** 
	 * Get whether this scenario should send on the throttled (Data) channel
	 */
	action isSendThrottled() returns boolean {
		return sendThrottled or sendThrottledUser;
	}

	/** 
	 * Get whether this scenario should send on the raw channel
	 */
	action isSendRaw() returns boolean {
		return sendRaw or sendRawUser;
	}

	action doEmit(string emitted, string owner) {
		if sendRaw then {
			emit emitted to rawChannel;
		}
		if sendThrottled then {
			emit emitted to dataChannel;
		}
		if sendRawUser then {
			emit emitted to lib.getRawUserChannel(rawChannel, owner);
		}
		if sendThrottledUser then {
			emit emitted to lib.getDataUserChannel(dataChannel, owner);
		}
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		listener l;
		for l in listeners {
			l.quit();
		}
	}
}


/**
 * Utility event for tracking configuration for a given scenario.
 * This event is suitable for use by monitors which spawn per instance
 * (e.g. Scenarios)
 * 
 * This event also uses a callback to get the updates (supplied in
 * instanceInit). If the scenario is configured to only send throttled 
 * updates, the callback is only called when the throttling period 
 * determines an update should be sent - thus, the scenario does not
 * need to generate the output sequence<string> except when needed,
 * which can improve performance in such a configuration.
 * 
 * actions starting with an underscore should be considered private 
 * and not called by users of this event.
 */
event ScenarioServiceUpdaterSingleInstance {
	// these are internal and should not be set by users
	string scenarioId;
	integer scenarioInstanceId;
	ScenarioServiceLibrary lib;
	listener throttlingListener;
	ScenarioServiceUpdaterBase base;
	boolean havePending;
	float latestUpdate;
	action<> returns sequence<string> getUpdate;
	Update update;
	boolean needUpdate;
	context mainContext;
	string owner;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario
	 */
	action init(string sId) {
		init_cb(sId, _noopAction);
	}
	
	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario.
	 * cb_init is called when initialisation is complete
	 */
	action init_cb(string sId, action<> cb_init) {
		base.init(sId, cb_init);
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		base.listenToConfigureUpdates(_noopAction);
		mainContext:=context.current();
	}

	action _noopAction() {
	}
	

	/**
	 * Called by monitor after spawn
	 * Will maintain configuration for this scenario, and update listeners appropriately.
	 * @param getUpdateCallback a callback to get the latest outputFieldValues - may be called at any time, must 
         *        always return a consistent set of outputs
	 */
	action instanceInit(integer id, action<> returns sequence<string> getUpdateCallback, string _owner) {
		scenarioInstanceId:=id;
		owner:=_owner;
		getUpdate:=getUpdateCallback;
		update.scenarioId:=scenarioId;
		update.scenarioInstanceId:=scenarioInstanceId;
		base.listenToConfigureUpdates(_configurationUpdated);
		_configurationUpdated();
		listener l:=on all SendQueuedUpdatesNow() {
			_sendThrottledUpdate();
		}
		base.listeners.append(l);
	}

	/** 
	 * Get whether this scenario should route updates
	 */
	action isRouteUpdate() returns boolean {
		return base.routeUpdate;
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		base.destroy();
		throttlingListener.quit();
	}
	  
	/**
	 * called in instances (not factories) when configuration has changed
	 */
	action _configurationUpdated {
		if base.isSendThrottled() then {
			throttlingListener.quit();
			flushPending();
			if(base.throttlePeriod >= 0.0) then {
				if havePending then {
					_setupThrottleListener();
				}
			}
		}
	}

	/**
	 * set up a throttled listener according to throttlePeriod control
	 */
	action _setupThrottleListener {
		if base.throttlePeriod > 0.0 then {
			float offset:=currentTime-base.throttleStart;
			float t:=((offset/base.throttlePeriod).floor()+1).toFloat();
			throttlingListener:=on wait((t*base.throttlePeriod)-offset) {
				_sendThrottledUpdate();
			}
		} else {
			_sendThrottledUpdate();
		}
	}

	/**
	 * actually send an update on the throttled channel
	 */
	action _sendThrottledUpdate {
		if not havePending then {
			return;
		}
		if needUpdate then {
			update.outputFieldValues:=getUpdate();
			update.timeStamp:=latestUpdate;
			needUpdate:=false;
		}
		if base.sendThrottled then {
			send update to dataChannel;
		}
		if base.sendThrottledUser then {
			send update to lib.getDataUserChannel(dataChannel, owner);
		}
		havePending:=false;
	}

	/**
	 * flush any pending update on the throttled channel.
	 */
	action flushPending() {
		if havePending then {
			_sendThrottledUpdate();
			throttlingListener.quit();
		}
	}	

	/**
 	 * Called when a new update is available.
	 */
	action newUpdateAvailable() {
		needUpdate:=true;
		latestUpdate:=currentTime;
 		if base.sendRaw or base.routeUpdate then {
			if needUpdate then {
				update.outputFieldValues:=getUpdate();
				update.timeStamp:=currentTime;
				needUpdate:=false;
			}
			if base.sendRaw then {
				send update to rawChannel;
			}
			if base.sendRawUser then {
				send update to lib.getRawUserChannel(rawChannel, owner);
			}
			if base.routeUpdate then {
				route update;
			}
		}
		if base.isSendThrottled() and not havePending then {
			havePending:=true;
			_setupThrottleListener();
		}
	}
	
	/**
 	 * Called to send a new Acknowledgement event.
	 */
	action emitAcknowledgement(integer messageId) {
		Acknowledge ack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, true, getUpdate());
		if base.routeUpdate then {
			route ack;
		}
		if base.emitAny then {
			send ack to controlChannel;
		}
	}
				
	/**
 	 * Called to send a new Nak event.
	 */
	action emitNack(integer messageId) {
		Acknowledge nack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, false, new sequence<string>);
		if base.routeUpdate then {
			route nack;
		}
		if base.emitAny then {
			send nack to controlChannel;
		}
	}
	
	/**
 	 * Called to send a new Created event.
	 */
	action emitCreated(integer messageId, string owner, string state, sequence<string> inputVariables, sequence<string> outputVariables) {
		if base.sendAny then {
			Created created:=Created(scenarioId, messageId, scenarioInstanceId, owner, state, inputVariables, outputVariables);
			route created;
			if base.emitAny then {
				base.doEmit(created.toString(), owner);
			}
		}
	}
	
	/**
 	 * Called to send a new Edited event.
	 */
	action emitEdited(integer messageId, sequence<string> inputVariables) {
		flushPending();
		if base.sendAny then {
			Edited edited:=Edited(scenarioId, messageId, scenarioInstanceId, inputVariables, getUpdate());
			if base.routeUpdate then {
				route edited;
			}
			if base.emitAny then {
				base.doEmit(edited.toString(), owner);
			}
		}
		emitOpCompleted(messageId);
	}

	/**
 	 * Called to say an operation has completed; implied by emitEdited. Must be called before emitInstanceDied.
	 */
	action emitOpCompleted(integer messageId) {
		if(context.current().getId()!=mainContext.getId()) then {
			send OperationCompleted(scenarioId, scenarioInstanceId, messageId) to mainContext;
		}
	}

	/**
 	 * Called to send a new Deleted event.
	 */
	action emitDeleted(integer messageId) {
		flushPending();
		if base.sendAny then {
			Deleted deleted:=Deleted(scenarioId, messageId, scenarioInstanceId);
			if base.routeUpdate then {
				route deleted;
			}
			if base.emitAny then {
				base.doEmit(deleted.toString(), owner);
			}
		}
		throttlingListener.quit();
		notifyInstanceDied();
	}

	/**
 	 * Called to send an instance Died event (either of failed, ended)
	 */
	action emitInstanceDied() {
		flushPending();
		if base.sendAny then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			if base.emitAny then {
				base.doEmit(iDied.toString(), owner);
			}
			if mainContext.getId()=context.current().getId() then {
				route iDied;
			}
		}
		throttlingListener.quit();
	}

	/**
 	 * Called to notify the scenario service monitor that we have gone away - must be called 
 	 * after emitting any events regarding this instance going away. Implied by emitDeleted.
	 */
	action notifyInstanceDied() {
		if mainContext.getId()!=context.current().getId() then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			
			// give a chance for anyone monitoring this from its own context 
			// to handle the InstanceDied before the main context
			if base.routeUpdate then {
				route InstanceDied(scenarioId, scenarioInstanceId);
			}

			send iDied to mainContext;
		}
	}
	
	/**
 	 * Called to send a new StateChange event.
	 */
	action emitStateChange(string state) {
		flushPending();
		StateChange stchange:=StateChange(scenarioId, scenarioInstanceId, state);
		if mainContext.getId()!=context.current().getId() then {
			send stchange to mainContext;
		} else {
			route stchange;
		}
		if base.emitAny then {
			base.doEmit(stchange.toString(), owner);
		}
	}

	/**
 	 * Called to send an instance in response to a RequestInstancesInternal event
	 */
	action emitInstance(RequestInstancesInternal request, string owner, string state, sequence<string> input, sequence<string> output) {
		Instance instance:=Instance(scenarioId, request.messageId, scenarioInstanceId, owner, state, input, output);
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			} else {
				route instance;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
		if mainContext.getId() != context.current().getId() then {
			send RequestInstancesParallelDone(scenarioId, request.messageId, scenarioInstanceId) to mainContext;
		}
	}

	/**
 	 * Called when the instance has failed.  input and output are the input
 	 * and output variables as at the last Update/ Edited point.
	 */
	action finished(string state, string owner, sequence<string> input, sequence<string> output) {
		ScenarioFinished scenFinished:=ScenarioFinished(scenarioId, scenarioInstanceId, owner, state, input, output);
		if mainContext.getId() != context.current().getId() then {
			send scenFinished to mainContext;
		} else {
			route scenFinished;
		}
	}
	
}


/**
 * Utilitiy event for tracking configuration for a given scenario.
 * This event is suitable for use by monitors which spawn per scenario,
 * but not per instance. (e.g. ScenarioService, DataViewService)
 * 
 * actions starting with an underscore should be considered private 
 * and not called by users of this event.
 * 
 * Note that this updater only honours sendThrottledUser changes at the next throttling period
 * (it does not record the owner if sendThrottledUser is not true)
 */
event ScenarioServiceUpdaterMultipleInstances {
	// these are internal and should not be set by users
	string scenarioId;
	ScenarioServiceLibrary lib;
	listener throttlingListener;
	ScenarioServiceUpdaterBase base;
	boolean currentlySendingThrottledUser;
	dictionary<integer, Update> updates;
	dictionary<integer, string> owners;
	context mainContext;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor for each scenario
	 * Will maintain configuration for this scenario Id
	 */
	action init(string sId, context mainCtx) {
		_init(sId, mainCtx, _configurationUpdated);
	}
	
	/**
	 * Called by monitor for each scenario
	 * Will maintain configuration for this scenario Id
	 */
	action init_cb(string sId, context mainCtx, action<> cb_initComplete) {
		CallbackHelper callbackHelper:=new CallbackHelper;
		callbackHelper.callbacks.append(cb_initComplete);
		callbackHelper.callbacks.append(_configurationUpdated);
		_init(sId, mainCtx, callbackHelper.callback);
	}

	/**
	 * Implementation of init and init_cb
	 */
	action _init(string sId, context mainCtx, action<> cb_initComplete) {
		base.init(sId, cb_initComplete);
		mainContext:=mainCtx;
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		listener l:=on all SendQueuedUpdatesNow() {
			_sendThrottledUpdates();
		}
		base.listeners.append(l);
		base.listenToConfigureUpdates(_configurationUpdated);
	}
	
	/** 
	 * Get whether this scenario should route updates
	 */
	action isRouteUpdate() returns boolean {
		return base.routeUpdate;
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		base.destroy();
		throttlingListener.quit();
	}
	  

	/**
	 * called in instances (not factories) when configuration has changed
	 */
	action _configurationUpdated {
		if base.isSendThrottled() then {
			throttlingListener.quit();
			flushPending();
			if(base.throttlePeriod >= 0.0) then {
				_setupThrottleListener();
			}
		}
	}

	/**
	 * set up a throttled listener according to throttlePeriod control
	 */
	action _setupThrottleListener {
		if base.throttlePeriod > 0.0 then {
			throttlingListener:=on all wait(base.throttlePeriod) {
				_sendThrottledUpdates();
			}
		} else {
			_sendThrottledUpdates();
		}
	}

	/**
	 * actually send an update on the throttled channel
	 */
	action _sendThrottledUpdates {
		integer instance;
		if base.sendThrottled then {
			for instance in updates.keys() {
				send updates[instance] to dataChannel;
			}
		}
		if currentlySendingThrottledUser then {
			for instance in updates.keys() {
				send updates[instance] to lib.getDataUserChannel(dataChannel, owners[instance]);
			}
		}
		owners.clear();
		updates.clear();
		currentlySendingThrottledUser := base.sendThrottledUser;
	}

	/**
	 * flush any pending update on the throttled channel.
	 */
	action flushPending() {
		_sendThrottledUpdates();
	}	

	/**
 	 * Flush pending throttled data for one instance
	 */
	action flushPendingInstance(integer scenarioInstanceId) {
		if updates.hasKey(scenarioInstanceId) then {
			if base.sendThrottled then {
				send updates[scenarioInstanceId] to dataChannel;
			}
			if currentlySendingThrottledUser then {
				send updates[scenarioInstanceId] to lib.getDataUserChannel(dataChannel, owners[scenarioInstanceId]);
			}
			updates.remove(scenarioInstanceId);
			if owners.hasKey(scenarioInstanceId) then {
				owners.remove(scenarioInstanceId);
			}
		}
	}	

	/**
 	 * Called when a new update is available. (This variant allows setting of the time parameter)
	 */
	action emitUpdate_time(integer scenarioInstanceId, float time, sequence<string> output, string owner) {
		if base.sendAny then {
			Update update:=Update(scenarioId, scenarioInstanceId, time, output);
			if base.sendRaw then {
				send update to rawChannel;
			}
			if base.sendRawUser then {
				send update to lib.getRawUserChannel(rawChannel, owner);
			}
			if base.routeUpdate then {
				route update;
			}
			if base.isSendThrottled() then {
				if base.throttlePeriod > 0.0 then {
					updates.add(scenarioInstanceId, update);
					if currentlySendingThrottledUser then {
						owners.add(scenarioInstanceId, owner);
					}
				} else {
					send update to dataChannel;
				}
			}
		}
	}
	
	/**
 	 * Called when a new update is available.
	 */
	action emitUpdate(integer scenarioInstanceId, sequence<string> output, string owner) {
		emitUpdate_time(scenarioInstanceId, currentTime, output, owner);
	}

	/**
 	 * Called to send a new Acknowledgement event.
	 */
	action emitAcknowledgement(integer messageId, integer scenarioInstanceId, sequence<string> output) {
		Acknowledge ack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, true, output);
		if base.routeUpdate then {
			route ack;
		}
		if base.emitAny then {
			send ack to controlChannel;
		}
	}
				
	/**
 	 * Called to send a new Nak event.
	 */
	action emitNack(integer messageId, integer scenarioInstanceId) {
		Acknowledge nack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, false, new sequence<string>);
		if base.routeUpdate then {
			route nack;
		}
		if base.emitAny then {
			send nack to controlChannel;
		}
	}
	
	/**
 	 * Called to send a new Created event.
	 */
	action emitCreated(integer messageId, integer scenarioInstanceId, string owner, string state, sequence<string> inputVariables, sequence<string> outputVariables) {
		if base.sendAny then {
			Created created:=Created(scenarioId, messageId, scenarioInstanceId, owner, state, inputVariables, outputVariables);
			route created;
			if base.emitAny then {
				string sCreated:=created.toString();
				base.doEmit(sCreated, owner);
			}
		}
	}

	/**
 	 * Called to send any received events (except for instance) for this scenario.
	 */
	action emitReceivedEvents() {
		dictionary<integer, string> instanceOwners:=new dictionary<integer, string>;
		{
			Update update;
			listener l:=on all Update(scenarioId = scenarioId):update {
				if base.sendRaw then {
					send update to rawChannel;
				}
				if base.sendRawUser and instanceOwners.hasKey(update.scenarioInstanceId) then {	
					send update to lib.getRawUserChannel(rawChannel, instanceOwners[update.scenarioInstanceId]);
				}
				if base.isSendThrottled() then {
					if base.throttlePeriod > 0.0 then {
						updates.add(update.scenarioInstanceId, update);
						string owner:="*";
						if instanceOwners.hasKey(update.scenarioInstanceId) then {
							owner:=instanceOwners[update.scenarioInstanceId];
						}
						if currentlySendingThrottledUser then {
							owners.add(update.scenarioInstanceId, owner);
						}
					} else {
						send update to dataChannel;
					}
				}
			}
			base.listeners.append(l);
		}
		{
			Created created;
			listener l:=on all Created(scenarioId = scenarioId):created {
				if(created.owner != "*") then {
					instanceOwners.add(created.scenarioInstanceId, created.owner);
				}
				base.doEmit(created.toString(), created.owner);				
			}
			base.listeners.append(l);
		}
		{
			Deleted deleted;
			listener l:=on all Deleted(scenarioId = scenarioId):deleted {
				flushPendingInstance(deleted.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(deleted.scenarioInstanceId) then {
					owner:=instanceOwners[deleted.scenarioInstanceId];
					instanceOwners.remove(deleted.scenarioInstanceId);
				}
				base.doEmit(deleted.toString(), owner);		
			}
			base.listeners.append(l);
		}
		{
			Edited edited;
			listener l:=on all Edited(scenarioId = scenarioId):edited {
				flushPendingInstance(edited.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(edited.scenarioInstanceId) then {
					owner:=instanceOwners[edited.scenarioInstanceId];
				}
				base.doEmit(edited.toString(), owner);		
			}
			base.listeners.append(l);
		}
		{
			InstanceDied instanceDied;
			listener l:=on all InstanceDied(scenarioId = scenarioId):instanceDied {
				flushPendingInstance(instanceDied.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(instanceDied.scenarioInstanceId) then {
					owner:=instanceOwners[instanceDied.scenarioInstanceId];
				}
				base.doEmit(instanceDied.toString(), owner);		
			}
			base.listeners.append(l);
		}
	}
	
	/**
 	 * Called to send a new Edited event.
	 */
	action emitEdited(integer messageId, integer scenarioInstanceId, sequence<string> inputVariables, sequence<string> outputVariables, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			Edited edited:=Edited(scenarioId, messageId, scenarioInstanceId, inputVariables, outputVariables);
			if base.routeUpdate then {
				route edited;
			}
			if base.emitAny then {
				base.doEmit(edited.toString(), owner);
			}
		}
		emitOpCompleted(messageId, scenarioInstanceId);
	}

	/**
 	 * Called to say an operation has completed; implied by emitEdited. Must be called before emitInstanceDied.
	 */
	action emitOpCompleted(integer messageId, integer scenarioInstanceId) {
		if(context.current().getId()!=mainContext.getId()) then {
			send OperationCompleted(scenarioId, scenarioInstanceId, messageId) to mainContext;
		}
	}

	/**
 	 * Called to send a new Deleted event.
	 */
	action emitDeleted(integer messageId, integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			Deleted deleted:=Deleted(scenarioId, messageId, scenarioInstanceId);
			if base.routeUpdate then {
				route deleted;
			}
			if base.emitAny then {
				base.doEmit(deleted.toString(), owner);
			}
		}
		notifyInstanceDied(scenarioInstanceId);
	}

	/**
 	 * Called to notify the scenario service monitor that we have gone away - must be called 
 	 * after emitting any events regarding this instance going away. Implied by emitDeleted.
	 */
	action notifyInstanceDied(integer scenarioInstanceId) {
		if mainContext.getId()!=context.current().getId() then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			send iDied to mainContext;
		}
	}
	

	
	/**
 	 * Called to send an instance Died event (either of failed, ended)
	 */
	action emitInstanceDied(integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			if base.emitAny then {
				base.doEmit(iDied.toString(), owner);
			}
			if mainContext.getId()=context.current().getId() then {
				route iDied;
			}
		}
	}
	
	/**
 	 * Called to send a new StateChange event.
	 */
	action emitStateChange(string state, integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		StateChange stchange:=StateChange(scenarioId, scenarioInstanceId, state);
		if mainContext.getId()!=context.current().getId() then {
			send stchange to mainContext;
		} else {
			route stchange;
		}
		if base.emitAny then {
			base.doEmit(stchange.toString(), owner);
		}
	}

	/**
 	 * Called to send an instance in response to a RequestInstancesInternal event
	 */
	action emitInstance(RequestInstancesInternal request, integer scenarioInstanceId, string owner, string state, sequence<string> input, sequence<string> output) {
		Instance instance:=Instance(scenarioId, request.messageId, scenarioInstanceId, owner, state, input, output);
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			} else {
				route instance;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
		if mainContext.getId() != context.current().getId() then {
				send RequestInstancesParallelDone(scenarioId, request.messageId, scenarioInstanceId) to mainContext;
		}
	}
	/**
 	 * Called to send an instance that has already been seen in the current context
	 */
	action emitReceivedInstance(RequestInstancesInternal request, Instance instance) {
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
	}
	
}


/*
 * Monitor that performs the following tasks:
 *   - routing/emitting ScenarioServiceLoaded when the service is loaded
 *   - routing/emitting ScenarioServiceUnloaded when the service is unloaded
 *   - routing/emitting a nack if a Create request is ignored
 *   - maintains latest configuration
 *   - tracks state of ended/ failed scenarios
 *   - forwards Edit, delete events to scenarios in other contexts
 *
 */
monitor ScenarioService {

	event PendingOperation {
		integer messageId;
		integer type; // 0 = delete, 1 = edit
	}

	listener throttledSenderListener;
	ScenarioServiceLibrary lib;
	RequestScenarios requestScenarios;
	boolean requestingScenarios;
	
	// MetaData relating to the interface
	dictionary<string,string> interfaceMetaData := {
		"interface.package"     :"com.apama.scenario",
		"interface.name"        :"ScenarioService",
		"interface.fileName"    :"ScenarioService.mon",
		"interface.vendor"      :"Apama",
		"interface.version"     :"5.3.0.0.247085",
		"interface.fullVersion" :"rel/5.3.0.x@247085",
		"interface.language"    :"MonitorScript"
	};
	
	// Channel names	
	string scenarioServiceChannel := "com.apama.scenario";
	integer highestInstanceId;


	// the first mThread handles scenario discovery and maps some events to internal events
	action onload {
		// print version
		log "ScenarioService interface loaded. MetaData: "+interfaceMetaData.toString() at INFO;
		
		// generate the ScenarioServiceLoaded event
		route ScenarioServiceLoaded();
		send ScenarioServiceLoaded() to scenarioServiceChannel;

		dictionary <string,string> defaultConfig:=new dictionary<string,string>;
		dictionary <string, dictionary<string,string> > configurations:=new dictionary<string, dictionary<string,string> >;
		lib.configurationManager(defaultConfig, configurations);
		RequestInstancesOnChannel requestInstancesOnChannel;
		on all RequestInstancesOnChannel():requestInstancesOnChannel {
			route RequestInstancesInternal(requestInstancesOnChannel.scenarioId, requestInstancesOnChannel.messageId, requestInstancesOnChannel.channel, false, "", false);
			on RequestInstancesDone(scenarioId=requestInstancesOnChannel.scenarioId, messageId=requestInstancesOnChannel.messageId) {
				send RequestInstancesDone(requestInstancesOnChannel.scenarioId, requestInstancesOnChannel.messageId) to requestInstancesOnChannel.channel;
			}
		}

		RequestInstancesOnChannelByUser requestInstancesOnChannelByUser;
		on all RequestInstancesOnChannelByUser():requestInstancesOnChannelByUser {
			route RequestInstancesInternal(requestInstancesOnChannelByUser.scenarioId, requestInstancesOnChannelByUser.messageId, requestInstancesOnChannelByUser.channel, false, requestInstancesOnChannelByUser.owner, true);
			on RequestInstancesDone(scenarioId=requestInstancesOnChannelByUser.scenarioId, messageId=requestInstancesOnChannelByUser.messageId) {
				send RequestInstancesDone(requestInstancesOnChannelByUser.scenarioId, requestInstancesOnChannelByUser.messageId) to requestInstancesOnChannelByUser.channel;
			}
		}
		Scenario scenario;
		on all Scenario():scenario {
			if requestingScenarios then {
				send scenario to requestScenarios.channel;
			} else {
				spawn trackScenario(scenario);
			}
		}
		
		ScenarioUnloaded scenarioUnloaded;
		on all ScenarioUnloaded(): scenarioUnloaded {
			send scenarioUnloaded to scenarioServiceChannel;
		}

		
		on all RequestScenarios():requestScenarios {
			send RequestScenariosAck() to requestScenarios.channel;
			route StartScenarioRecovery();
			route FinishedScenarioRecovery();
			requestingScenarios:=true;
			on FinishedScenarioRecovery() {
				requestingScenarios:=false;
				send RequestScenariosDone() to requestScenarios.channel;
			}
		}

		dictionary <string,string> EMPTY_DICT:=new dictionary<string,string>;
		// Pick up any requests for operations on invalid scenarioIds
		Create create;
		on all unmatched Create(): create {
			dictionary<string,string> config:=EMPTY_DICT;
			if configurations.hasKey(create.scenarioId) then {
				config:=configurations[create.scenarioId];
			}
			Acknowledge nack := new Acknowledge;
			nack.scenarioId := create.scenarioId;
			nack.messageId := create.messageId;
			nack.success := false;
			log create.scenarioId+": Scenario create ignored - unknown scenarioId." at WARN;
			send nack to lib.getControlChannel(create.scenarioId);
			if lib.getRouteUpdate(defaultConfig, config) then {
				route nack;
			}
		}

		// The old SetThrottlingPeriod is mapped to a ConfigureUpdates event
		SetThrottlingPeriod setThrottlingPeriod;		
		on all SetThrottlingPeriod():setThrottlingPeriod {
			dictionary<string, string> configChanges:=new dictionary<string,string>;
			if setThrottlingPeriod.period >= 0.0 then {
				configChanges["sendThrottled"]:="true";
				configChanges["throttlePeriod"]:=setThrottlingPeriod.period.toString();
			} else {
				configChanges["sendThrottled"]:="false";
			}
			ConfigureUpdates cu:=ConfigureUpdates("", configChanges);
			log "Received deprecated event "+setThrottlingPeriod.toString()+", will re-route as "+cu.toString() at WARN;
			route cu;
		}
	}		
				
	
	action onunload {
		// generate the ScenarioServiceUnloaded event
		ScenarioServiceUnloaded unloaded := new ScenarioServiceUnloaded;
		route unloaded;
		send unloaded to scenarioServiceChannel;
	}
	
	/**
	 * spawned per scenario, and handles any finished scenario instances.
	 * For parallel scenarios, it also tracks which instance runs in 
	 * which context and forwards Edit and Delete events.
	 */
	action trackScenario(Scenario scenario) {
		on ScenarioUnloaded(scenarioId=scenario.scenarioId) {
			die;
		}
		ScenarioServiceUpdaterMultipleInstances updater:=new ScenarioServiceUpdaterMultipleInstances;
		updater.init(scenario.scenarioId, context.current());
		ScenarioFinished finished;
		on all ScenarioFinished(scenarioId=scenario.scenarioId):finished {
			// Finished scenarios can be deleted (which terminates all listeners for this instance), 
			// discovered, and edits are Nacked 
			Delete delete;
			on Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId):delete {
				updater.emitAcknowledgement(delete.messageId, finished.scenarioInstanceId, finished.outputFieldValues);
				updater.emitDeleted(delete.messageId, finished.scenarioInstanceId, finished.owner);
			}
			Edit edit;
			on all Edit(scenarioId=scenario.scenarioId, scenarioInstanceId=finished.scenarioInstanceId):edit and not 
			            Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
				updater.emitNack(edit.messageId, finished.scenarioInstanceId);
				log scenario.displayName+"("+finished.scenarioInstanceId.toString()+ "): Scenario edit ignored - Scenario is in "+finished.state+" state." at WARN;
			}
			RequestInstancesInternal requestInstances;
			if finished.owner = "*" then {
				on all RequestInstancesInternal(scenarioId=scenario.scenarioId):requestInstances and not
						Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
					updater.emitInstance(requestInstances, finished.scenarioInstanceId,
						finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
				}
			} else {
				on all (RequestInstancesInternal(scenarioId=scenario.scenarioId, ownerFilter=false):requestInstances or
					RequestInstancesInternal(scenarioId=scenario.scenarioId, owner=finished.owner, ownerFilter=true):requestInstances) and not
						Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
					updater.emitInstance(requestInstances, finished.scenarioInstanceId,
						finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
				}
			}
		}
		if scenario.executionMode > 0 then {
			// for parallel scenarios, we keep track of instance to context mapping:
			dictionary<integer, context> runningCtxs := new dictionary<integer, context>;
			// and to owner mapping:
			dictionary<integer, string> ownerCtxs := new dictionary<integer, string>;
			// and by user:
			dictionary<string, dictionary<integer, context> > runningCtxsByOwner := new dictionary<string, dictionary<integer, context> >;
			// maps from instanceId to sequence<messageId>
			dictionary<integer, sequence<PendingOperation> > pendingOperations := new dictionary<integer, sequence<PendingOperation> >;
			ParallelStarting starting;
			on all ParallelStarting(scenarioId = scenario.scenarioId):starting {
				runningCtxs.add(starting.scenarioInstanceId, starting.runningCtx);
				ownerCtxs.add(starting.scenarioInstanceId, starting.owner);
				if not runningCtxsByOwner.hasKey(starting.owner) then {
					runningCtxsByOwner.add(starting.owner, new dictionary<integer, context>);
				}
				runningCtxsByOwner[starting.owner].add(starting.scenarioInstanceId, starting.runningCtx);
				highestInstanceId := starting.scenarioInstanceId;
			}
			
			InstanceDied died;
			on all InstanceDied(scenarioId = scenario.scenarioId):died {
				if runningCtxs.hasKey(died.scenarioInstanceId) then {
					runningCtxs.remove(died.scenarioInstanceId);
				}
				if ownerCtxs.hasKey(died.scenarioInstanceId) then {
					string owner:=ownerCtxs[died.scenarioInstanceId];
					ownerCtxs.remove(died.scenarioInstanceId);
					if runningCtxsByOwner.hasKey(owner) then {
						if runningCtxsByOwner[owner].hasKey(died.scenarioInstanceId) then {
							runningCtxsByOwner[owner].remove(died.scenarioInstanceId);
						}
						if runningCtxsByOwner[owner].size()=0 then {
							runningCtxsByOwner.remove(owner);
						}
					}
				}
				if pendingOperations.hasKey(died.scenarioInstanceId) then {
					PendingOperation pending;
					for pending in pendingOperations[died.scenarioInstanceId] {
						if pending.type = 0 then {
							route Delete(scenario.scenarioId, pending.messageId, died.scenarioInstanceId);
						} else {
							if pending.type = 1 then {
								route Edit(scenario.scenarioId, pending.messageId, died.scenarioInstanceId, new sequence<string>);
							} else {
								log "error: unknown pending operation type "+pending.toString() at ERROR;
							}
						}
					}
					pendingOperations.remove(died.scenarioInstanceId);
				}
			}
			
			// and forward edits, deletes:
			Edit edit;
			on all unmatched Edit(scenarioId = scenario.scenarioId):edit {
				if runningCtxs.hasKey(edit.scenarioInstanceId) then {
					send edit to runningCtxs[edit.scenarioInstanceId];
					addPendingOperation(pendingOperations, edit.scenarioInstanceId, edit.messageId, 1);
					on OperationCompleted(scenarioId = scenario.scenarioId, scenarioInstanceId = edit.scenarioInstanceId, messageId = edit.messageId) and not
					   ScenarioFinished(scenarioId = scenario.scenarioId, scenarioInstanceId = edit.scenarioInstanceId){
						removePendingOperation(pendingOperations, edit.scenarioInstanceId, edit.messageId);
					}
				} else {
					log scenario.displayName+"("+edit.scenarioInstanceId.toString()+"): Scenario edit ignored - unknown scenarioInstanceId." at WARN;
					updater.emitNack(edit.messageId, edit.scenarioInstanceId);
				}
			}
			Delete delete;
			on all unmatched Delete(scenarioId = scenario.scenarioId):delete {
				if runningCtxs.hasKey(delete.scenarioInstanceId) then {
					send delete to runningCtxs[delete.scenarioInstanceId];
					addPendingOperation(pendingOperations, delete.scenarioInstanceId, delete.messageId, 0);
					on OperationCompleted(scenarioId = scenario.scenarioId, scenarioInstanceId = delete.scenarioInstanceId, messageId = delete.messageId) and not
					   ScenarioFinished(scenarioId = scenario.scenarioId, scenarioInstanceId = delete.scenarioInstanceId){
						removePendingOperation(pendingOperations, delete.scenarioInstanceId, delete.messageId);
					}
				} else {
					log scenario.displayName+"("+delete.scenarioInstanceId.toString()+"): Scenario delete ignored - unknown scenarioInstanceId." at WARN;
					updater.emitNack(delete.messageId, delete.scenarioInstanceId);
				}
			}
			
			// and request instances is handled by a separate monitor. Note that 
			// Finished scenarios are not in the dictionary, but are handled by the finished
			// listener above.
			RequestInstancesInternal reqInstances;
			on all RequestInstancesInternal(scenarioId=scenario.scenarioId):reqInstances {
				if reqInstances.ownerFilter then {
					if runningCtxsByOwner.hasKey(reqInstances.owner) then {
						dictionary<integer, context> rCtxs:=runningCtxsByOwner[reqInstances.owner];
						if runningCtxsByOwner.hasKey("*") then {
							rCtxs:=rCtxs.clone();
							integer i;
							dictionary<integer, context> wildcards:=runningCtxsByOwner["*"];
							for i in wildcards.keys() {
								rCtxs.add(i, wildcards[i]);
							}
						}
						route RequestInstancesParallel(reqInstances, rCtxs, highestInstanceId);
					} else {
						if runningCtxsByOwner.hasKey("*") then {
							route RequestInstancesParallel(reqInstances, runningCtxsByOwner["*"], highestInstanceId);
						} else {
							route RequestInstancesParallel(reqInstances, new dictionary<integer,context>, highestInstanceId);
						}
					}
				} else {
					route RequestInstancesParallel(reqInstances, runningCtxs, highestInstanceId);
				}
			}
			ConfigureUpdates cu;
			on all ConfigureUpdates(scenarioId=""):cu or all ConfigureUpdates(scenarioId=scenario.scenarioId):cu {
				integer inst;
				for inst in runningCtxs.keys() {
					send cu to runningCtxs[inst];
				}
			}
			on all SendQueuedUpdatesNow() {
				SendQueuedUpdatesNow snow:=SendQueuedUpdatesNow();
				integer inst;
				for inst in runningCtxs.keys() {
					send snow to runningCtxs[inst];
				}
			}
		}
	}
	
	action addPendingOperation(dictionary<integer,  sequence<PendingOperation> > pendingOperations, integer scenarioInstanceId, integer messageId, integer type) {
		if not pendingOperations.hasKey(scenarioInstanceId) then {
			pendingOperations.add(scenarioInstanceId, new sequence<PendingOperation>);
		}
		pendingOperations[scenarioInstanceId].append(PendingOperation(messageId, type));
	}
	
	action removePendingOperation(dictionary<integer, sequence<PendingOperation> > pendingOperations, integer scenarioInstanceId, integer messageId) {
		if not pendingOperations.hasKey(scenarioInstanceId) then {
			return;
		}
		integer idx:=-1, i:=0;
		while(i < pendingOperations[scenarioInstanceId].size()) {
			if pendingOperations[scenarioInstanceId][i].messageId = messageId then {
				idx:=i;
				break;
			}
			i:=i+1;
		}
		if(idx>=0) then {
			pendingOperations[scenarioInstanceId].remove(idx);
		}
		if pendingOperations[scenarioInstanceId].size() = 0 then {
			pendingOperations.remove(scenarioInstanceId);
		}
	}	
}

/*
 * Monitor that handles request instances for parallel scenarios:
 * - on a RequestInstancesOnChannel for a parallel scenario, the ScenarioService 
 *   routes a RequestInstancesParallel which triggers this monitor to spawn.
 * - this waits for a response (be it to say the request instances has been 
 *   handled or that the scenario has finished) before sending the 
 *   RequestInstancesDone event 
 *
 * Note that this monitor assumes scenarioInstancesIds always increase over time.
 */
monitor RequestInstancesHandler {
	RequestInstancesParallel req;
	action onload {
		on all RequestInstancesParallel():req {
			spawn handleRequest();
		}
	}
	
	/**
	 * Forward the request to every context and await responses. We remove 
	 * instances from the dictionary upon receiving an update for them. 
	 */
	action handleRequest() {
		ScenarioServiceUpdaterMultipleInstances updater:=new ScenarioServiceUpdaterMultipleInstances;
		updater.init(req.request.scenarioId, context.current());
		integer k;
		for k in req.instances.keys() {
			send req.request to req.instances[k];
		}
		// if a scenario dies, it will send events in the order ScenarioFinished, InstanceDied:
		ScenarioFinished finished;
		on all ScenarioFinished(scenarioId=req.request.scenarioId, scenarioInstanceId <= req.highestInstanceId):finished {
			// if a scenario dies after it has sent the Instance, do not send another 
			// (the StateChange/ InstanceDied events are sufficient)
			if(req.instances.hasKey(finished.scenarioInstanceId)) then {
				updater.emitInstance(req.request, finished.scenarioInstanceId,
					finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
			}
		}
		// A finished scenario should not be counted
		InstanceDied died;
		on all InstanceDied(scenarioId = req.request.scenarioId, scenarioInstanceId <= req.highestInstanceId):died {
			if(req.instances.hasKey(died.scenarioInstanceId)) then {
				req.instances.remove(died.scenarioInstanceId);
				checkFinished();
			}
		}
		RequestInstancesParallelDone pdone;
		on all RequestInstancesParallelDone(scenarioId = req.request.scenarioId, messageId = req.request.messageId):pdone {
			if(req.instances.hasKey(pdone.scenarioInstanceId)) then {
				req.instances.remove(pdone.scenarioInstanceId);
				checkFinished();
			}
		}
		checkFinished();
	}
	
	/**
	 * Check whether we are finished.
	 * We are finished if we have no instances left in our dictionary, in which 
	 * case we route a RequestInstancesDone (handled by the ScenarioService monitor)
	 * and terminate.
	 */
	action checkFinished() {
		if req.instances.size()=0 then {
			route RequestInstancesDone(req.request.scenarioId, req.request.messageId);
			die;
		}
	}
}

 00000034 C:\SoftwareAG\Apama 5.3\monitors\ScenarioService.mon
CONN 0000003c 6795184426424404343:6961107663748204919 from 127.0.0.1:58613
TIME 0000000e 1444729770.7,1
EVNT 0000007a 6795184426424404343 "",com.apama.scenario.RequestScenarios("com.apama.scenario.private_6795194240424872335_1444729770733")
MONF 0000ed5b package com.apama.dataview;

/*
 * $Copyright(c) 2007-2011 Progress Software Corporation (PSC). All rights reserved.$
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */


/* This is an implementation of the Apama DataViewService API.
 *
 * You must first inject the "interface" - DataViewService_Interface.mon
 * Several implementations of the interface may exist. 
 * You may also need to inject optional "emitter" (see below).
 * Each implementation is in a separate file - inject the one you wish to use.
 *   e.g. this implementation is DataViewService_Impl_Dict.mon
 * 
 *
 * This service enables MonitorScript or JMon applications to expose a simple 
 * read-only "DataView" interface. DataViews may be viewed using Apama Dashboard 
 * Studio in a similar way to Scenarios.
*
 * Route vs. Send
 * The standard implementations of the DataViewService will always ROUTE 
 * any com.apama.dataview.* events, with the expectation that applications
 * using the service are co-located in the same correlator as the service.
 * If your architecture requires the client application to be in a separate 
 * correlator to the DataView service, then two "emitter" monitors are 
 * available.
 * DataViewService_ServiceEmitter.mon  would be injected into the same 
 * correlator as the DataView service after injecting the DataViewService 
 * interface but before injecting the implementation.
 * DataViewService_ApplicationEmitter.mon  would be injected into the same 
 * correlator as the client application after injecting the DataViewService 
 * interface but before injecting the client application.
 *
 * Notes:
 * 
 * 1) Every event has an initial field called msgId. Clients may choose to put 
 *    some identifier in this field when sending messages to the service. Any 
 *    event routed by the service in response will contain the same identifier.
 *
 * 2) Most events contain a field called "dvName". This string 
 *    uniquely identifies a DataView inside the correlator. 
 *
 * 3) Every event has a final field called extraParams that is a string:string
 *    dictionary. Some implementations may choose to use this field. It provides
 *    a way of future-proofing the interface to a certain extent.
 *
 * $Revision: 242755 $
 */

using com.apama.scenario.Create;
using com.apama.scenario.Delete;
using com.apama.scenario.Edit;
using com.apama.scenario.RequestInstancesDone;
using com.apama.scenario.RequestInstancesInternal;
using com.apama.scenario.Scenario;
using com.apama.scenario.ScenarioServiceUpdaterMultipleInstances;
using com.apama.scenario.ScenarioUnloaded;
using com.apama.scenario.StartScenarioRecovery;

// INTERNAL API CODE

monitor DataViewService_Impl_Dict {

	/** Internal event used to store instances/items in a DataView. */
	event _Item {
		wildcard integer scenarioInstanceId;
		wildcard string owner;
		sequence<string> outputFields;
	}
	

	// MetaData relating to this specific implementation
	dictionary<string,string> implementationMetaData := {
		"implementation.package"       :"com.apama.dataview",
		"implementation.name"          :"DataViewService_Impl_Dict",
		"implementation.fileName"      :"DataViewService_Impl_Dict.mon",
		"implementation.vendor"        :"Apama",
		"implementation.version"       :"5.3.0.0.247085",
		"implementation.fullVersion"   :"rel/5.3.0.x@247085",
		"implementation.language"      :"MonitorScript"
	};

	
	// Variables needed in the parent monitor
	dictionary <string, string> dataViewNamesDictionary;  // scenarioId : dvName
	DataViewAddDefinition dvAddDefinition;

	// Variables required in the per-DataView spawned sub-monitor 
	string dvName;  // this is without the PREFIX (which is defined in the onload)
	string scenarioId; // this is with the PREFIX (which is defined in the onload)
	integer NUM_FIELDS;
	sequence<integer> compoundKeyIndexes; // the indexes of the fields which form the compound unique key of a _Item
	sequence<string> compoundKeyNames;    // the names of the fields which form the compound unique key of a _Item
	dictionary <string, integer> compoundKeyInstanceDictionary; // scenarioInstanceCompoundKey : scenarioInstanceId
	dictionary <integer, _Item> instancesDictionary; // scenarioInstanceId : _Item
	integer scenarioInstanceId := 0;
	
	// Defect 9762.  Space, semi-colon and tab in dvName must be escaped 
	dictionary<string, string> escapeCharMap := {" ":"_",		// space
	                                             ";":"$003b",	// semi-colon
	                                             "	":"$0009",	// tab
	                                             "\t":"$0009"	// tab
	                                            };
	dictionary <string, string> escapedDvNamesDictionary; // unescaped dvname : escaped dvname
	dictionary <string, string> escapedScenarioIdDictionary; // unescaped scenarioId : escaped scenarioId

	ScenarioServiceUpdaterMultipleInstances updater;
	
	
	//===================================================================================
	
	/** A default no-arg constructor for an internal _Item. */
	action createDefaultItem() returns _Item {
		return _Item( -1, "", new sequence<string> );
	}

	/** action to take a string and escape all characters appeared in the escapeCharMap dictionary
	 *
	 * @param s - the string to be escaped
	 * 
	 * @return escaped string.  The original string is returned if there is nothing to be escaped
	**/
	action escapeDvName(string s) returns string {
		integer i;
		string retString := s;
		string unEscapeChar;
		for unEscapeChar in escapeCharMap.keys() {
			retString := _escapeIt(retString, unEscapeChar, escapeCharMap[unEscapeChar]);
		}
		
		return retString;
	}
	
	/** internal recursive method to escape the passed in string s.  s will be scanned for the the 
	    unEscapeChar and if found, replaced that with the escapeChar param.  This process will continue
	    until all characters in s is scanned.
	**/
	action _escapeIt( string s, string unEscapeChar, string escapeChar ) returns string {
		
		if (s.find(unEscapeChar) = -1) then {
			return s;
		}
		
		integer index := s.find(unEscapeChar);

		string rest := s.substring(index+1, s.length());
		string retString := s.substring(0, index) + escapeChar + _escapeIt(rest, unEscapeChar, escapeChar);
		
		return retString;
	}
	
	action getEscapedDvName( string rawDvName ) returns string {
		string s;

		// given the raw dvName, return the cached value
		if (escapedDvNamesDictionary.hasKey(rawDvName)) then {
			return escapedDvNamesDictionary[rawDvName];
		}
		
		// not found, just return original string
		return rawDvName;
	}
	
	action getUnescapedDvName( string escapedDvName ) returns string {
		
		string s;
		for s in escapedDvNamesDictionary.keys() {
			if (escapedDvNamesDictionary[s] = escapedDvName) then {
				return s;
			}
		}
		
		// not found, just return original string
		return escapedDvName;
	}
	
	action getEscapedScenarioId( string rawScenarioId ) returns string {
		string s;

		// given the raw scenarioId, return the cached value
		if (escapedScenarioIdDictionary.hasKey(rawScenarioId)) then {
			return escapedScenarioIdDictionary[rawScenarioId];
		}
		
		// not found, just return original string
		return rawScenarioId;
	}
	
	action getUnescapedScenarioId( string escapedScenarioId ) returns string {
		
		string s;
		for s in escapedScenarioIdDictionary.keys() {
			if (escapedScenarioIdDictionary[s] = escapedScenarioId) then {
				return s;
			}
		}
		
		// not found, just return original string
		return escapedScenarioId;
	}
	
	action convertToScenarioId( string in_dvName ) returns string {
		string PREFIX := "DV_";
		string out_scenarioId;
		
		// for now just prepend the prefix, but in future do more checks and escaping of the name
		out_scenarioId:=PREFIX+in_dvName;
		
		return out_scenarioId;
	}
	
	
	action onload {
		log "DataViewService implementation loaded. MetaData: "+implementationMetaData.toString() at INFO;
		
		log "onload() - entered." at DEBUG;

		// Look for the event to define a new DataView
		on all DataViewAddDefinition():dvAddDefinition {
			string escapedDvName := escapeDvName(dvAddDefinition.dvName);
			
			// name must not be ""
			if (dvAddDefinition.dvName.length()=0) then {
				string msg := "Invalid name for new DataView - length must be greater than zero.";
				log "onload().on_all_DataViewAddDefinition() - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string> );
				return;
			}
			
			//name can not start with MEMST (clashes with memorystore plugin)
			string MEMORY_STORE_PREFIX := "MEMST_";
			if (dvAddDefinition.dvName.find(MEMORY_STORE_PREFIX)=0) then {
				string msg := "Invalid name for new DataView - Must not start with " + MEMORY_STORE_PREFIX;
				log "onload().on_all_DataViewAddDefinition() - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, dvAddDefinition.dvName, msg, new dictionary<string,string> );
				return;
			}
			
			
			// displayName must not be ""
			if (dvAddDefinition.dvDisplayName.length()=0) then {
				string msg := "Invalid displayName for new DataView - length must be greater than zero.";
				log "onload().on_all_DataViewAddDefinition() - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string> );
				return;
			}
			
			// use the escaped dvName here.  Will save to the escapedDvNamesDictionary
			// when validation is passed

			// both dvName and scenarioId are escaped
			dvName:=escapedDvName;
			scenarioId:=convertToScenarioId(dvName);
			string rawScenarioId:=convertToScenarioId(dvAddDefinition.dvName);
			
			// Validate the params we were given...
			
			// Make sure this is not already present as a DataView or Scenario
			if dataViewNamesDictionary.hasKey(scenarioId) then {
				string msg := "DataView name already exists";
				log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
				return;
			}
			
				
			// Make sure we were given more than zero field names and types
			if (0=dvAddDefinition.fieldNames.size() or 0=dvAddDefinition.fieldTypes.size()) then {
				string msg := "There must be 1 or more fields. DataViewAddDefinition event supplied "+dvAddDefinition.fieldNames.size().toString() +" names, and "+dvAddDefinition.fieldTypes.size().toString()+" types.";
				log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
				return;
			}
			
			// Make sure we were not given any duplicate field names or emptystring field names
			dictionary<string,boolean> validNames := new dictionary<string,boolean>;
			string fName;
			for fName in dvAddDefinition.fieldNames {
				// check for name=""
				if (0=fName.length()) then {
					string msg := "One of the supplied field names in a DataViewAddDefinition event is invalid. Field names must have a length greater than zero. The field names supplied were: "+dvAddDefinition.fieldNames.toString();
					log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
					route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
					return;					
				}
				// check for duplicates
				if (validNames.hasKey(fName)) then {
					string msg := "One of the supplied field names in a DataViewAddDefinition event is a duplicate. Duplicate field name: \""+fName+"\". The field names supplied were: "+dvAddDefinition.fieldNames.toString();
					log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
					route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
					return;
				}
				validNames[fName] := true;
			}
			
			// Make sure we were given enough types for the field names
			if (dvAddDefinition.fieldNames.size() != dvAddDefinition.fieldTypes.size()) then {
				string msg := "Each field name must have a corresponding type. DataViewAddDefinition event supplied "+dvAddDefinition.fieldNames.size().toString() +" names, and "+dvAddDefinition.fieldTypes.size().toString()+" types.";
				log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
				return;
			}
			
			// Make sure the type strings we were given represent valid scenario variable types
			dictionary<string,boolean> validTypes := {"string":true, "float":true, "integer":true, "boolean":true, "enumeration":true};			
			integer i := 0;
			string t;
			for t in dvAddDefinition.fieldTypes {
				if not validTypes.hasKey(t) then {
					string msg := "One of the supplied field types in a DataViewAddDefinition event is invalid. The type supplied at index "+i.toString()+" was: \""+t+"\"";
					log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
					route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
					return;
				}
				i:=i+1;
			}

			compoundKeyIndexes := new sequence<integer>; // ensure it is ALWAYS reset
			compoundKeyNames := new sequence<string>; // ensure it is ALWAYS reset
			// if we've been given some optional key fields, then validate these
			if (dvAddDefinition.keyFields.size() > 0) then {
				string k;
				for k in dvAddDefinition.keyFields {
					integer idx := dvAddDefinition.fieldNames.indexOf(k);
					if (-1 = idx) then {
						string msg := "One of the supplied keyField field names in a DataViewAddDefinition event is invalid. The invalid keyField name supplied was: \""+k+"\". The keyField names supplied were: "+dvAddDefinition.keyFields.toString();
						log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
						route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
						return;						
					}
					if (-1 < compoundKeyIndexes.indexOf(idx)) then {
						string msg := "A duplicate keyField field name was given in a DataViewAddDefinition event. Duplicate keyField name: \""+k+"\". The keyField names supplied were: "+dvAddDefinition.keyFields.toString();
						log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
						route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
						return;												
					}
					compoundKeyIndexes.append(idx); // since it is valid, add the index to the set.
				}
				compoundKeyNames := dvAddDefinition.keyFields;
			}

			// all fields are validated, save the escapedDvName and associate the scenarioId with the escapedName (dvName is escaped already)
			escapedDvNamesDictionary.add(dvAddDefinition.dvName, dvName);
			escapedScenarioIdDictionary.add(rawScenarioId, scenarioId);
			
			dataViewNamesDictionary.add(scenarioId, dvName);
			log "onload().on_all_DataViewAddDefinition() - \""+dvAddDefinition.dvName+"\" - adding new DataView definition with name: \""+dvAddDefinition.dvName+"\", and exposed externally with scenarioId: \""+scenarioId+"\"" at INFO;
			log "onload().on_all_DataViewAddDefinition() - \""+dvAddDefinition.dvName+"\" - spawning initializeScenario()..." at DEBUG;
			spawn initializeScenario;

		}

		// look for requests to unload definitions and tidy up our records.
		// The actual (spawned) DataView *also* looks for this event and kills itself
		DataViewDeleteDefinition dvDeleteDefinition;
		on all DataViewDeleteDefinition():dvDeleteDefinition {
			string rawScenarioId := convertToScenarioId(dvDeleteDefinition.dvName);
			string escapedScenarioId := getEscapedScenarioId(rawScenarioId);
			if dataViewNamesDictionary.hasKey(escapedScenarioId) then {
				log "onload().on_all_DataViewDeleteDefinition() - \""+dvDeleteDefinition.dvName+"\" - removing DataView from dictionary with DataView name: \""+dvDeleteDefinition.dvName+"\", and exposed externally with scenarioId: \""+rawScenarioId+"\"" at INFO;
				dataViewNamesDictionary.remove(escapedScenarioId);
				escapedDvNamesDictionary.remove(dvDeleteDefinition.dvName);  // key is unescapedDvName
				escapedScenarioIdDictionary.remove(rawScenarioId);  // key is unescapedScenarioId
			}
		}

		
		// Look for external (i.e. com.apama.scenario API events) to remove
		// existing scenarios from our list to ensure we're up to date.
		ScenarioUnloaded scenScenarioUnloaded;
		on all ScenarioUnloaded():scenScenarioUnloaded {
			// the following if statement should never now eval to true, as the entry in the dictionary 
			// should always have been previously deleted by the DataViewDeleteDefinition (see above). Done for completeness.
			if dataViewNamesDictionary.hasKey(scenScenarioUnloaded.scenarioId) then {
				string dvName := dataViewNamesDictionary[scenScenarioUnloaded.scenarioId];
				log "onload().on_all_ScenarioUnloaded() - \""+scenScenarioUnloaded.scenarioId+"\" - removing DataView from dictionary with DataView name: \""+dvName+"\", and exposed externally with scenarioId: \""+scenScenarioUnloaded.scenarioId+"\"" at INFO;
				dataViewNamesDictionary.remove(scenScenarioUnloaded.scenarioId);
				escapedDvNamesDictionary.remove(getUnescapedDvName(dvName));  // key is unescapedDvName
				escapedScenarioIdDictionary.remove(getUnescapedScenarioId(scenScenarioUnloaded.scenarioId));  // key is unescapedScenarioId
			}			
		}

		
		// Look for DataViewItem* events for DataView names that do not exist and route exception events
		DataViewAddItem unmatchedAddItem;
		on all unmatched DataViewAddItem():unmatchedAddItem {
			string msg := "Unknown DataView name in a DataViewAddItem event";
			log "unmatched DataViewAddItem() - "+msg at WARN;
			route DataViewException(unmatchedAddItem.msgId, escapeDvName(unmatchedAddItem.dvName), msg, new dictionary<string,string>);
		}
		DataViewAddOrUpdateItem unmatchedAddOrUpdateItem;
		on all unmatched DataViewAddOrUpdateItem():unmatchedAddOrUpdateItem {
			string msg := "Unknown DataView name in a DataViewAddOrUpdateItem event";
			log "unmatched DataViewAddOrUpdateItem() - "+msg at WARN;
			route DataViewException(unmatchedAddOrUpdateItem.msgId, escapeDvName(unmatchedAddOrUpdateItem.dvName), msg, new dictionary<string,string>);
		}
		DataViewUpdateItem unmatchedUpdateItem;
		on all unmatched DataViewUpdateItem():unmatchedUpdateItem {
			string msg := "Unknown DataView name in a DataViewUpdateItem event";
			log "unmatched DataViewUpdateItem() - "+msg at WARN;
			route DataViewItemException(unmatchedUpdateItem.msgId, escapeDvName(unmatchedUpdateItem.dvName), unmatchedUpdateItem.dvItemId, msg, new dictionary<string,string>);
		}
		DataViewUpdateItemDelta unmatchedUpdateItemDelta;
		on all unmatched DataViewUpdateItemDelta():unmatchedUpdateItemDelta {
			string msg := "Unknown DataView name in a DataViewUpdateItemDelta event";
			log "unmatched DataViewUpdateItemDelta() - "+msg at WARN;
			route DataViewItemException(unmatchedUpdateItemDelta.msgId, escapeDvName(unmatchedUpdateItemDelta.dvName), unmatchedUpdateItemDelta.dvItemId, msg, new dictionary<string,string>);
		}
		DataViewDeleteItem unmatchedDeleteItem;
		on all unmatched DataViewDeleteItem():unmatchedDeleteItem {
			string msg := "Unknown DataView name in a DataViewDeleteItem event";
			log "unmatched DataViewDeleteItem() - "+msg at WARN;
			route DataViewItemException(unmatchedDeleteItem.msgId, escapeDvName(unmatchedDeleteItem.dvName), unmatchedDeleteItem.dvItemId, msg, new dictionary<string,string>);
		}
		DataViewDeleteAllItems unmatchedDeleteAllItems;
		on all unmatched DataViewDeleteAllItems():unmatchedDeleteAllItems {
			string msg := "Unknown DataView name in a DataViewDeleteAllItems event";
			log "unmatched DataViewDeleteAllItems() - "+msg at WARN;
			route DataViewException(unmatchedDeleteAllItems.msgId, escapeDvName(unmatchedDeleteAllItems.dvName), msg, new dictionary<string,string>);
		}
		DataViewGetFieldLookup unmatchedLookup;
		on all unmatched DataViewGetFieldLookup():unmatchedLookup {
			string msg := "Unknown DataView name in a DataViewGetFieldLookup event";
			log "unmatched DataViewGetFieldLookup() - "+msg at WARN;
			route DataViewException(unmatchedLookup.msgId, escapeDvName(unmatchedLookup.dvName), msg, new dictionary<string,string>);
		}
		
		log "onload() - complete." at DEBUG;
	}


	//===================================================================================

	
	// This defines the behaviour for each DataView bridge scenario type
	action initializeScenario {
		log "initializeScenario() - \""+dvName+"\" - entered (spawned with this action)." at DEBUG;
		updater.init(scenarioId, context.current());

		string SCENARIO_SERVICE_CHANNEL := "com.apama.scenario";
		Scenario scenario := new Scenario; // store the schema of the DataView

		// Build up the scenario definition event
		scenario.scenarioId := scenarioId;
		scenario.displayName := dvAddDefinition.dvDisplayName;
		scenario.description := dvAddDefinition.dvDescription;
		scenario.inputNames := [];
		scenario.inputTypes := [];
		scenario.inputConstraints := [];
		scenario.inputDefaults := [];
		scenario.outputNames := dvAddDefinition.fieldNames;
		scenario.outputTypes := dvAddDefinition.fieldTypes;
		scenario.executionMode := 0;
		scenario.extraParams := dvAddDefinition.extraParams;
		scenario.extraParams.add("isReadOnly", "true");
		NUM_FIELDS := scenario.outputTypes.size();
	
		// If we have dont have enough constraints then set default constraints for ALL inputs (ignore any we were given)
		// - no - don't need to do that - always ZERO INPUTS
		
		// If we have dont have enough default initial inputs set basic defaults for ALL inputs (ignore any we were given)
		// - no - don't need to do that - always ZERO INPUTS

		
		// Notify any client listeners when scenario loads
		route scenario;
		send scenario to SCENARIO_SERVICE_CHANNEL;
		route DataViewDefinition(dvAddDefinition.msgId, dvName, dvAddDefinition.dvDisplayName, dvAddDefinition.dvDescription, dvAddDefinition.fieldNames, dvAddDefinition.fieldTypes, dvAddDefinition.keyFields, new dictionary<string,string>);

		// Build the helper dictionaries
		initialiseFieldLookup(scenario, dvName);
		
		// Look for the request to delete this bridge type
		DataViewDeleteDefinition delDef;
		on DataViewDeleteDefinition(dvName = getUnescapedDvName(dvName)):delDef {
			//Remove this bridge type
			// the "on unload" listener will generate the response.
			log "initializeScenario().on_DataViewDeleteDefinition() - \""+dvName+"\" - routing DataViewDefinitionDeleted/ScenarioUnloaded events..." at INFO;
			route DataViewDefinitionDeleted(delDef.msgId, dvName, new dictionary<string,string>);
			route ScenarioUnloaded(scenarioId);
			log "initializeScenario().on_DataViewDeleteDefinition() - \""+dvName+"\" - Killing the mthread for this DataView." at INFO;
			die;
		}

		// RequestInstances handling (dumps current state of all instances by sending Instance events)
		RequestInstancesInternal scenRequestInstances;
		on all RequestInstancesInternal(scenarioId = scenarioId): scenRequestInstances {
			log "initializeScenario().on_all_RequestInstances() - \""+scenarioId+"\" - received request for instances. Initiating recovery on for request messageId: "+scenRequestInstances.messageId.toString() at DEBUG;
			
			integer k;
			_Item item;
			for k in instancesDictionary.keys() {
				item := instancesDictionary[k];

				log "dvItemMThread().on_all_RequestInstances() - \""+scenarioId+":"+k.toString()+"\" - routing an Instance event for this DataView Item..." at DEBUG;

				if(scenRequestInstances.ownerFilter = false or 
				   scenRequestInstances.owner = item.owner or 
				   item.owner = "*") then {
					updater.emitInstance(scenRequestInstances, item.scenarioInstanceId, item.owner, "RUNNING", new sequence<string>, item.outputFields);
				}
			}
			route RequestInstancesDone(scenarioId, scenRequestInstances.messageId);
		}
		
		// Look for the scenario recovery event and send out the definition of this Scenario/DataView. (remember we have spawned per Scenario)
		on all StartScenarioRecovery() {
			route scenario;
		}

		
		
		
		// ========= Listeners for Create/Delete/Edit/Update ==================
		
		
		// ####################################################################
		// ####################################################################	
		// CREATE
		// First if an instance is created via the scenario API (e.g. a dashboard)...
		Create scenCreate;
		on all Create(scenarioId = scenarioId): scenCreate {
			log "initializeScenario().on_all_Create() - \""+scenarioId+"\" - Scenario instance create ignored - DataViewService does not handle incoming CREATE events from the ScenarioService." at WARN;
			emitNack(scenCreate.messageId, -1);
			return;
		}
		// ... secondly if it is created from the MonitorScript side of things
		DataViewAddItem dvAddItem;
		on all DataViewAddItem(dvName = getUnescapedDvName(dvName)): dvAddItem {
			log "initializeScenario().on_all_DataViewAddItem() - \""+dvName+"\" - " at DEBUG;
			addDataViewItem(dvAddItem);
		}
		
		
		// #########################################################
		// #########################################################
		// DELETE
		// From Scenario API - Ignore/Nack
		Delete scenDelete;
		on all Delete(scenarioId=scenarioId):scenDelete {
			log "initializeScenario().on_all_Delete() - \""+scenarioId+":"+scenDelete.scenarioInstanceId.toString()+"\" - Scenario instance delete ignored - DataViewService does not handle incoming DELETE events from the ScenarioService." at WARN;
			emitNack(scenDelete.messageId, scenDelete.scenarioInstanceId);
			return;
		}
		// From DataViewService API
		DataViewDeleteItem dvDeleteItem;
		on all DataViewDeleteItem(dvName=getUnescapedDvName(dvName)):dvDeleteItem {
			log "initializeScenario().on_all_DataViewDeleteItem() - \""+dvName+":"+dvDeleteItem.dvItemId.toString()+"\" - " at DEBUG;
			deleteDataViewItem(dvDeleteItem);
		}
		// From DataViewService API
		DataViewDeleteAllItems dvDeleteAllItems;
		on all DataViewDeleteAllItems(dvName=getUnescapedDvName(dvName)):dvDeleteAllItems {
			log "initializeScenario().on_all_DataViewDeleteAllItems() - \""+dvName+"\" - " at DEBUG;
			deleteAllDataViewItems(dvDeleteAllItems);
		}
		
		
		// #########################################################
		// #########################################################
		// EDIT
		// From Scenario API - Ignore/Nack
		Edit scenEdit;
		on all Edit(scenarioId = scenarioId):scenEdit {
			log "initializeScenario().on_all_Edit() - \""+scenarioId+":"+scenEdit.scenarioInstanceId.toString()+"\" - Scenario instance edit ignored - DataViewService does not handle incoming EDIT events from the ScenarioService." at WARN;
			emitNack(scenEdit.messageId, scenEdit.scenarioInstanceId);
			return;
		}		

		
		// #########################################################
		// #########################################################
		// ADD OR UPDATE (full)
		// Forward the AddOrUpdates from the Monitor via this DataViewService to the Scenario API
		DataViewAddOrUpdateItem dvAddOrUpdateItem;
		on all DataViewAddOrUpdateItem(dvName = getUnescapedDvName(dvName)):dvAddOrUpdateItem {
			addOrUpdateDataViewItem(dvAddOrUpdateItem);
		}

		// #########################################################
		// #########################################################
		// UPDATE (full)
		// Forward the Updates from the Monitor via this DataViewService to the Scenario API
		DataViewUpdateItem dvUpdateItem;
		on all DataViewUpdateItem(dvName = getUnescapedDvName(dvName)):dvUpdateItem {
			updateFullDataViewItem(dvUpdateItem);
		}

		// #########################################################
		// #########################################################
		// UPDATE (delta) - an update containing only deltas
		// Forward the Updates from the Monitor via this DataViewService to the Scenario API
		DataViewUpdateItemDelta dvUpdateItemDelta;
		on all DataViewUpdateItemDelta(dvName = getUnescapedDvName(dvName)):dvUpdateItemDelta {
			updateDeltaDataViewItem(dvUpdateItemDelta);
		}
		
		// ####################################################################
		// ####################################################################
		log "initializeScenario() - \""+dvName+"\" - complete." at DEBUG;
	}
	
	
	//===================================================================================

	
	// Management Actions

	/** Build the fieldname-index lookup dictionary, and add a the DataViewGetFieldLookup listener. */
	action initialiseFieldLookup(Scenario theScenario, string dataViewName) {
		log "initialiseFieldLookup() - building the dictionary, and adding a the DataViewGetFieldLookup listener" at DEBUG;
		string s;
		integer count := 0;
		dictionary <string, integer> fieldLookupDictionary := new dictionary<string, integer>; // fieldName : index in sequence
		for s in theScenario.outputNames {
			fieldLookupDictionary.add(s, count);
			count := count + 1;
		}		


		// Look for requests for the helper lookup dictionaries and reply
		DataViewGetFieldLookup lookupReq;
		on all DataViewGetFieldLookup(dvName = getUnescapedDvName(dataViewName)):lookupReq {
			log "initialiseFieldLookup().on_all_DataViewGetFieldLookup() - \""+dataViewName+"\" - routing DataViewFieldLookup event..." at DEBUG;
			route DataViewFieldLookup(lookupReq.msgId, dataViewName, fieldLookupDictionary, new dictionary<string,string>);
		}		
	}
	

	action generateInstanceDied(_Item item) {
		// this should only ever be called once, from deleteDataViewItem() or deleteAllDataViewItems(), so we no longer need a flag to says its been called.
		log "generateInstanceDied() - \""+scenarioId+":"+item.scenarioInstanceId.toString()+"\" - routing Died events." at DEBUG;
		updater.emitInstanceDied(item.scenarioInstanceId, item.owner);
	}
	
	
	//===================================================================================

	
	// Management Actions
	action onunload {
		route DataViewServiceUnloaded( new dictionary<string,string> );
		log "DataViewService implementation unloaded." at INFO;
	}
	
	
	//===================================================================================

	/* Build the compound key from a COMPLETE sequence of values (i.e. not just the keyFields).
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromSeq(sequence<string> fieldValues) returns string {
		string key := "#";
		integer keyIndex;
		integer i:=0;
		if not (fieldValues.size() = NUM_FIELDS) then {
			log "buildCompoundKeyfromSeq() - the given sequence of fields is the wrong size. Required: "+NUM_FIELDS.toString()+", Found: "+fieldValues.size().toString() at WARN;
			return "";
		}
		for keyIndex in compoundKeyIndexes {
			if (fieldValues.size() <= keyIndex) then {
				log "buildCompoundKeyfromSeq() - the given sequence of fields does not contain a required keyField: "+compoundKeyNames[i]+", index: "+keyIndex.toString() at WARN;
				return "";
			}
			key := key + fieldValues[keyIndex]; 
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}

	/* Build the compound key from a sequence of keyField values ONLY (i.e. just the keyFields).
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromKeySeq(sequence<string> keyFieldValues) returns string {
		string key := "#";
		string keyValue;
		integer i:=0;
		if not (keyFieldValues.size() = compoundKeyIndexes.size()) then {
			log "buildCompoundKeyfromKeySeq() - the given sequence of keyFields is the wrong size. Required: "+compoundKeyIndexes.size().toString()+", Found: "+keyFieldValues.size().toString() at WARN;
			return "";
		}
		for keyValue in keyFieldValues {
			key := key + keyValue; 
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}

	/* Build the compound key from a dictionary of fieldNAME<->fieldvalue. 
	 * The dictionary does not need to contain a complete set of fields, but must contain at least the keyFields.
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromDict(dictionary<string,string> fields) returns string {
		string key := "#"; // all keys will have this prefix
		string keyName;
		integer i:=0;
		for keyName in compoundKeyNames {
			if not (fields.hasKey(keyName)) then {
				log "buildCompoundKeyfromDict() - the given dictionary does not contain a required keyField: "+keyName at WARN;
				return "";
			}
			key := key + fields[keyName];
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}

	/* Build the compound key from a dictionary of fieldINDEX<->fieldvalue. 
	 * The dictionary does not need to contain a complete set of fields, but must contain at least the keyFields.
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromIndexDict(dictionary<integer,string> fields) returns string {
		string key := "#"; // all keys will have this prefix
		integer keyIndex;
		integer i:=0;
		for keyIndex in compoundKeyIndexes {
			if not (fields.hasKey(keyIndex)) then {
				log "buildCompoundKeyfromIndexDict() - the given dictionary does not contain a required keyField: "+compoundKeyNames[i]+", index: "+keyIndex.toString() at WARN;
				return "";
			}
			key := key + fields[keyIndex];
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}
	
	
	/** Add a new DataViewItem to the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewAddItem.
	 * 
	 * @exception Routes a DataViewException event if the new Item cannot be added.
	 */
	action addDataViewItem(DataViewAddItem dvAddItem) {
		log "addDataViewItem() - \""+dvName+"\" - entered." at DEBUG;
		
		if (dvAddItem.fieldValues.size() != NUM_FIELDS) then {
			string msg := "DataView addItem ignored - " + NUM_FIELDS.toString() + " output field(s) required but " + dvAddItem.fieldValues.size().toString() + " provided.";
			
			// dvName is escaped already
			log "addDataViewItem() - \""+dvName+"\" - " + msg at WARN;
			route DataViewException(dvAddItem.msgId, dvName, msg, new dictionary<string,string>);
			return;
		}

		_Item newItem := createDefaultItem();
		newItem.owner := dvAddItem.owner;
		newItem.outputFields := dvAddItem.fieldValues;
		
		// are we using the automatic compound key feature? If so we must generate the key and store it in a dictionary
		if (compoundKeyIndexes.size()>0) then {
			// build the key
			string compoundKey := buildCompoundKeyFromSeq(newItem.outputFields);
			
			// dvName is escaped already
			log "addDataViewItem() - \""+dvName+"\" - compoundKey is: "+compoundKey at DEBUG;
			
			// do we already have an item with that key?
			if (compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// reject the new item - duplicate key
				string msg := "DataView addItem ignored - the DataView uses the keyFields feature and the new item clashes with an existing item.  The supplied values were: "+dvAddItem.fieldValues.toString();
				log "addDataViewItem() - \""+dvName+"\" - " + msg at WARN;
				route DataViewException(dvAddItem.msgId, dvName, msg, new dictionary<string,string>);
				return;
			}
			
			// add the new key to the dictionary to map it to the scenarioInstanceId(=dvItemId)
			compoundKeyInstanceDictionary.add(compoundKey, scenarioInstanceId);
		}
		
		//copy then increment the main instanceId counter
		newItem.scenarioInstanceId := scenarioInstanceId;
		scenarioInstanceId := scenarioInstanceId + 1;

		// store the newly created Item
		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - storing Item..." at INFO;
		instancesDictionary.add(newItem.scenarioInstanceId, newItem);
	
		// Send Created/Added events to both the Scenario and DataViewService APIs
		// This ensures that the Application MonitorScript and the Components such as Dashboards see the new instance
		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing Created/Added events..." at DEBUG;
		updater.emitCreated(-1, newItem.scenarioInstanceId, newItem.owner, "RUNNING", new sequence<string>, newItem.outputFields);
		
		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing initial Update event for this Item..." at DEBUG;
		float timeStamp := dvAddItem.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(newItem.scenarioInstanceId, timeStamp, newItem.outputFields, newItem.owner);
		
		route DataViewItem(dvAddItem.msgId, dvName, newItem.scenarioInstanceId, newItem.owner, newItem.outputFields, new dictionary<string,string>);

		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - complete." at DEBUG;
	}
	
	
	/* Add a new DataViewItem to the current (spawned) DataView if it does not already exist, 
	 * or update it when it does exist. This will ONLY work when keyFields are used.
	 * Attempts to change the owner of an existing item will be rejected with a DataViewItemException.
	 *
	 * This action is called as a result of matching a DataViewAddOrUpdateItem.
	 * 
	 * @exception Routes a DataViewException event if the new Item cannot be added.
	 * @exception Routes a DataViewItemException event if the new Item attempts to change the owner of an existing item.
	 */
	action addOrUpdateDataViewItem(DataViewAddOrUpdateItem dvAddOrUpdateItem) {
		log "addOrUpdateDataViewItem() - \""+dvName+"\" - entered." at DEBUG;
		
		if (0=compoundKeyIndexes.size()) then { 
			// this DataView does not use keyFields - error - The DataViewAddOrUpdateItem event is only valid for DataViews which use keyFields
			string msg := "DataViewAddOrUpdateItem event is only valid for DataViews which use keyFields";
			log "addOrUpdateDataViewItem() - \""+dvName+"\" - routing DataViewException event - "+msg at WARN;
			route DataViewException(dvAddOrUpdateItem.msgId, dvName, msg, new dictionary<string,string>);
			return;
		}

		if (dvAddOrUpdateItem.fieldValues.size() != NUM_FIELDS) then {
			string msg := "DataView addOrUpdateItem ignored - " + NUM_FIELDS.toString() + " output field(s) required but " + dvAddOrUpdateItem.fieldValues.size().toString() + " provided.";
			log "addOrUpdateDataViewItem() - \""+dvName+"\" - " + msg at WARN;
			route DataViewException(dvAddOrUpdateItem.msgId, dvName, msg, new dictionary<string,string>);
			return;
		}

		_Item newItem := createDefaultItem();
		newItem.owner := dvAddOrUpdateItem.owner;
		newItem.outputFields := dvAddOrUpdateItem.fieldValues;
		
		// build the key
	
		string compoundKey := buildCompoundKeyFromSeq(newItem.outputFields);
		log "addOrUpdateDataViewItem() - \""+dvName+"\" - compoundKey is: "+compoundKey at DEBUG;
		
		// do we already have an item with that key?
		boolean alreadyExists := compoundKeyInstanceDictionary.hasKey(compoundKey);
		if (alreadyExists) then {
			// Yes we found the key - so we're going to get the existing item and update it (after a couple of checks)
			integer itemId := compoundKeyInstanceDictionary[compoundKey];
			newItem.scenarioInstanceId := itemId; // copy the ID for use when we send out the update
			log "addOrUpdateDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
			
			// Get the existing item
			_Item item := instancesDictionary[itemId];
			
			// Check the owner is not changed
			if (item.owner != newItem.owner) then {
				// reject the new item - attempted to change OWNER
				string msg := "DataView addOrUpdateItem ignored - detected attempt to change the owner of an existing item.  Current owner: \""+item.owner+"\", attempted owner: \""+newItem.owner+"\"";
				log "addOrUpdateDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - " + msg at WARN;
				route DataViewItemException(dvAddOrUpdateItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			
			// Now we can make the change to the actual stored values
			item.outputFields := newItem.outputFields;
		}
		else {
			// No didn't find the key, so it must be new - add the new key to the dictionary to map it to the scenarioInstanceId(=dvItemId)
			compoundKeyInstanceDictionary.add(compoundKey, scenarioInstanceId);
			
			//copy then increment the main instanceId counter
			newItem.scenarioInstanceId := scenarioInstanceId;
			scenarioInstanceId := scenarioInstanceId + 1;

			// store the newly created Item
			log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - storing Item..." at INFO;
			instancesDictionary.add(newItem.scenarioInstanceId, newItem);
		
			// Send Created/Added events to both the Scenario and DataViewService APIs
			// This ensures that the Application MonitorScript and the Components such as Dashboards see the new instance
			log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing Created/Added events..." at DEBUG;
			updater.emitCreated(-1, newItem.scenarioInstanceId, newItem.owner, "RUNNING", new sequence<string>, newItem.outputFields);
		}

		// In either case (add or update), we now need to route the Update event
		log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing an Update event with the following field values:"+newItem.outputFields.toString() at DEBUG;
		float timeStamp := dvAddOrUpdateItem.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(newItem.scenarioInstanceId, timeStamp, newItem.outputFields, newItem.owner);
		
		if (not alreadyExists) then {
		
			route DataViewItem(dvAddOrUpdateItem.msgId, dvName, newItem.scenarioInstanceId, newItem.owner, newItem.outputFields, new dictionary<string,string>);
		}

		// All done
		log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - complete." at DEBUG;
	}


	/** Delete an existing DataViewItem from the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewDeleteItem.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be deleted (not found, etc).
	 */
	action deleteDataViewItem(DataViewDeleteItem dvDeleteItem) {
		integer itemId := dvDeleteItem.dvItemId;
		string compoundKey;
		if (0<=itemId) then { // an itemId was supplied
			if (not instancesDictionary.hasKey(itemId)) then {
				string msg := "Unknown dvItemId: "+itemId.toString();
				log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
		}
		else { // no itemId supplied
			if (0=compoundKeyIndexes.size()) then { 
				// this DataView does not use keyFields - error - must supply a dvItemId
				string msg := "A valid dvItemId must be supplied (this DataView does not use keyFields)";
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			if (dvDeleteItem.keyFields.size() != compoundKeyIndexes.size()) then {
				// invalid number of keys supplied
				string msg := "Incorrect number of key fields supplied. Found "+dvDeleteItem.keyFields.size().toString()+", require "+compoundKeyIndexes.size().toString();
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}

			// build the key
			compoundKey := buildCompoundKeyFromKeySeq(dvDeleteItem.keyFields);
			if (0=compoundKey.length()) then {
				// we get an error back from buildCompoundKey - most likely the key fields were not supplied
				string msg := "Invalid set of key fields supplied: "+dvDeleteItem.keyFields.toString();
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;								
			}
			
			
			// all valid - get the itemId from the dictionary
			if (not compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// we built a valid key, but no dvItem is currently known with that key
				string msg := "No DataViewItem could be found for the keyFields supplied: "+dvDeleteItem.keyFields.toString();
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			itemId := compoundKeyInstanceDictionary[compoundKey];
			log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
			
			// remove that compound key
			compoundKeyInstanceDictionary.remove(compoundKey);
		}
		_Item item := instancesDictionary[itemId];

		// Tell everyone about Deletion
		generateInstanceDied(item);
		log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing Deleted events..." at DEBUG;
		updater.emitDeleted(-1, itemId, item.owner);
		if (dvDeleteItem.keyFields.size() != compoundKeyIndexes.size()) then {
			// deleted using dvItemId, but this DataView is using keyFields, so we need to build the key to pass out in the Deleted event
			integer i := 0;
			while i < compoundKeyIndexes.size() {
				dvDeleteItem.keyFields.append( item.outputFields[compoundKeyIndexes[i]] );
				i := i + 1;
			}
		}
		route DataViewItemDeleted(dvDeleteItem.msgId, dvName, itemId, dvDeleteItem.keyFields, new dictionary<string,string>);
		log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - removing Item..." at INFO;
		instancesDictionary.remove(itemId);
		
		//log "deleteDataViewItem() - instancesDictionary content after removal: "+instancesDictionary.toString() at DEBUG;
	}


	
	/** Delete all existing DataViewItems from the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewDeleteAllItems.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be deleted (not found, etc).
	 */
	action deleteAllDataViewItems(DataViewDeleteAllItems dvDeleteAllItems) {
		
		// Iterate all the items an delete each one
		integer itemId;
		_Item item;
		for itemId in instancesDictionary.keys() {
			item := instancesDictionary[itemId];
			// Tell everyone about Deletion
			generateInstanceDied(item);
			log "deleteAllDataViewItems() - \""+dvName+":"+itemId.toString()+"\" - routing Deleted events..." at DEBUG;
			updater.emitDeleted(-1, itemId, item.owner);
		}
		
		// Clear the dictionaries
		log "deleteAllDataViewItems() - \""+dvName+"\" - removing ALL Items..." at INFO;
		compoundKeyInstanceDictionary.clear();
		instancesDictionary.clear();

		route DataViewAllItemsDeleted(dvDeleteAllItems.msgId, dvName, new dictionary<string,string>);
		
		//log "deleteAllDataViewItems() - instancesDictionary content after removal: "+instancesDictionary.toString() at DEBUG;
	}


	/** Update ALL the field values of an existing DataViewItem in the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewUpdateItem.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be updated (not found, keyField clash, etc).
	 */
	action updateFullDataViewItem(DataViewUpdateItem dvupdate) {
		integer itemId := dvupdate.dvItemId;
		
		// first check the number of fields (this is required before some of the other checks)
		if (dvupdate.fieldValues.size()!= NUM_FIELDS) then {
			string msg := "DataView updateItem ignored - " + NUM_FIELDS.toString() + " output field(s) required but " + dvupdate.fieldValues.size().toString() + " provided.";
			log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - " + msg at WARN;
			route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
			return;
		}

		string compoundKey := "";
		if (0>itemId) then { // no itemId supplied
			if (0=compoundKeyIndexes.size()) then { 
				// this DataView does not use keyFields - error - must supply a dvItemId
				string msg := "A valid dvItemId must be supplied (this DataView does not use keyFields)";
				log "updateFullDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			// build the key
			compoundKey := buildCompoundKeyFromSeq(dvupdate.fieldValues);
			log "updateFullDataViewItem() - \""+dvName+"\" - compoundKey: "+compoundKey at DEBUG;
			if (0=compoundKey.length()) then {
				// we get an error back from buildCompoundKey - most likely the key fields were not supplied?
				string msg := "Unable to construct compound key from field values: "+dvupdate.fieldValues.toString();
				log "updateFullDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;								
			}
			
			// all valid - get the itemId from the dictionary
			if (not compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// we built a valid key, but no dvItem is currently known with that key
				string msg := "No DataViewItem could be found using the keyFields from the field values supplied: "+dvupdate.fieldValues.toString();
				log "updateFullDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			itemId := compoundKeyInstanceDictionary[compoundKey];
			log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
		}
		
		// check if we have an Item with the (supplied or calculated) itemId
		if (not instancesDictionary.hasKey(itemId)) then {
			string msg := "Unknown dvItemId: "+itemId.toString();
			log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
			route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
			return;
		}
				
		_Item item := instancesDictionary[itemId];
		
		// IMPORTANT
		// check we have not altered a keyField value if this DataView is configured for their use!!
		if (0<compoundKeyIndexes.size()) then {
			string existingCompoundKey := buildCompoundKeyFromSeq(item.outputFields);
			if (0=compoundKey.length()) then {
				compoundKey := buildCompoundKeyFromSeq(dvupdate.fieldValues);
			}
			if not (compoundKey=existingCompoundKey) then {
				string msg := "DataView updateItem ignored - It is not permitted to change the value of a keyField. The supplied values were: "+dvupdate.fieldValues.toString();
				log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);

				log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - existing compoundKey: \""+existingCompoundKey+"\", new compoundKey: \""+compoundKey+"\"" at DEBUG;
				
				return;				
			}
		}

		// Now we can make the change to the actual stored values
		integer i:=0;
		while(i<NUM_FIELDS) {
			item.outputFields[i] := dvupdate.fieldValues[i].clone();
			i:=i+1;
		}

		log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing an Update event with the following field values:"+item.outputFields.toString() at DEBUG;
		float timeStamp := dvupdate.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(item.scenarioInstanceId, timeStamp, item.outputFields, item.owner);
	}
	
	
	/** Update a SUBSET of the field values of an existing DataViewItem in the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewUpdateItemDelta.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be updated (not found, keyField clash, etc).
	 */
	action updateDeltaDataViewItem(DataViewUpdateItemDelta dvdelta) {

		integer numberOfUpdatedFields := dvdelta.fieldValues.size() - compoundKeyIndexes.size();
		if (numberOfUpdatedFields=0) or (dvdelta.fieldValues.size()=0) then {
			// empty delta
			log "updateDeltaDataViewItem() - \""+dvName+":"+dvdelta.dvItemId.toString()+"\" - empty delta - ignored. Delta field values: "+dvdelta.fieldValues.toString() at DEBUG;
			//route DataViewItemException(dvName, dvdelta.dvItemId, "Empty delta - ignored. Delta field values: "+dvdelta.fieldValues.toString(), new dictionary<string,string>);
			return;
		}
		
		integer itemId := dvdelta.dvItemId;
		string compoundKey := "";
		
		if (0>itemId) then { // no itemId supplied
			if (0=compoundKeyIndexes.size()) then { 
				// this DataView does not use keyFields - error - must supply a dvItemId
				string msg := "A valid dvItemId must be supplied (this DataView does not use keyFields)";
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			if (numberOfUpdatedFields<0) then {
				// not enough dictionary items provided - must be at least the number of keyFields+1
				string msg := "Not enough delta field values provided. Must be at least number of keyFields +1 (="+ (compoundKeyIndexes.size()+1).toString() +"). Supplied delta field values: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			// build the key
			compoundKey := buildCompoundKeyFromIndexDict(dvdelta.fieldValues);
			log "updateDeltaDataViewItem() - \""+dvName+"\" - compoundKey: "+compoundKey at DEBUG;
			
			if (0=compoundKey.length()) then {
				// we get an error back from buildCompoundKey - most likely the key fields were not supplied?
				string msg := "Unable to construct compound key from delta field values: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;								
			}
			
			// all valid - get the itemId from the dictionary
			if (not compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// we built a valid key, but no dvItem is currently known with that key
				string msg := "No DataViewItem could be found for the keyFields supplied: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			itemId := compoundKeyInstanceDictionary[compoundKey];
			log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
		}

		// check if we have an Item with the (supplied or calculated) itemId
		if (not instancesDictionary.hasKey(itemId)) then {
			string msg := "Unknown dvItemId: "+itemId.toString();
			log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
			route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
			return;
		}
		
		//log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - content of delta: "+dvdelta.fieldValues.toString() at DEBUG;
		_Item item := instancesDictionary[itemId];
		integer k;
		sequence<string> tmpFields := item.outputFields.clone(); // take a copy of the current values
		for k in dvdelta.fieldValues.keys() {
			if (k<0 or k>=NUM_FIELDS) then {
				string msg := "DataView updateItemDelta ignored - Invalid field index provided ("+k.toString()+") in the delta field values: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - " + msg at WARN;					
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			// no need to check for duplicate indexs, as we're getting them out of a dictionary - by definition there can't be duplicate keys!

			tmpFields[k] := dvdelta.fieldValues[k]; // overwrite a specific value with a new value
		}
		
		// IMPORTANT
		// check we have not altered a keyField value if this DataView is configured for their use!!
		if (0<compoundKeyIndexes.size()) then {
			string existingCompoundKey := buildCompoundKeyFromSeq(item.outputFields);
			if (0=compoundKey.length()) then {
				compoundKey := buildCompoundKeyFromSeq(tmpFields);
			}
			if not (compoundKey=existingCompoundKey) then {
				string msg := "DataView updateItemDelta ignored - It is not permitted to change the value of a keyField. The supplied values were: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);

				log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - existing compoundKey: \""+existingCompoundKey+"\", new compoundKey: \""+compoundKey+"\"" at DEBUG;

				return;				
			}
		}

		// Now we can make the change to the actual stored values
		item.outputFields := tmpFields; // replace with the new updated set
		
		log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing an Update event with the following field values: "+item.outputFields.toString() at DEBUG;
		float timeStamp := dvdelta.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(item.scenarioInstanceId, timeStamp, item.outputFields, item.owner);
	}

	
	//===================================================================================

	
	
	// The ACKs and NACKs for the Scenario API and the Scenario Bridge API.	
	action emitAcknowledgement(integer messageId, _Item item) {
		updater.emitAcknowledgement(messageId, item.scenarioInstanceId, item.outputFields);
	}

	action emitNack(integer messageId, integer scenarioInstanceId) {
		updater.emitNack(messageId, scenarioInstanceId);
	}

}
 0000003e C:\SoftwareAG\Apama 5.3\monitors\DataViewService_Impl_Dict.mon
CONN 0000003c 6795184426424404343:6961107302970820983 from 127.0.0.1:58611
TIME 0000000e 1444729770.8,1
MONF 0000c703 /*
 * $Copyright (c) 2012 Progress Software Corporation and/or its subsidiaries and affiliates. All rights reserved.$ 
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
 *
 * Event definitions for the Correlator-integrated Apama JMS adapter. 
 *
 * $Revision: 241128 $
 *
 */
package com.apama.correlator.jms;


// *****************************************************************************
// 
// Private event definitions - for internal use only. 
//

/** @private*/ event __AddSender
{
	string connectionId;
	string senderId;
	string senderReliability;
	dictionary<string,string> extraAddParams;
}

/** @private*/ event __RemoveSender
{
	string senderId;
}

/** @private*/ event __AddReceiver
{
	string connectionId;
	string receiverId;
	string destination;
	string receiverReliability;
	string durableTopicSubscriptionName;
	string messageSelector;
	boolean noLocal;
	dictionary<string,string> extraAddParams;
}

/** @private*/ event __RemoveReceiver
{
	string receiverId;
}

/** @private*/ event __JMSReceiverFlowControlWindowUpdate
{
	string receiverId;
	integer __processInstanceToken;
	integer __flowControlMarker;
	integer __flowControlWindow;
}

/** @private*/ event __ReceiverAcknowledgeAndResume
{
	string receiverId;
}

/** @private*/ event __JMSSenderFlush
{
	integer requestId;
	string channelName;
}

// *****************************************************************************
// 
// Public event API for dynamically adding/removing JMS senders and receivers
//
// To be notified about the successful addition or removal of senders and 
// receivers, applications should listen for the separate Sender/ReceiverStatus 
// events, looking for the OK or REMOVED status. 
//

/** An enumeration containing constants for the currently supported sender 
	reliability values.
*/
event JMSSenderReliability
{
	/** Best effort non-reliable messaging; events may be lost or duplicated 
		if a component fails. */
	constant string BEST_EFFORT := "BEST_EFFORT";
	/** Reliable messaging without duplicate detection. 
	
		Events may be  duplicated or reordered if a component fails, but will 
		not be lost. */
	constant string AT_LEAST_ONCE := "AT_LEAST_ONCE";
	/** Reliable messaging with duplicate detection identifiers. 
	
		Events may be reordered if a component fails, but will not be lost, 
		and will not be duplicated if the unique message ids are mapped into 
		the message and the receiving JMS client uses an appropriate duplicate 
		detection window. */
	constant string EXACTLY_ONCE := "EXACTLY_ONCE";
}

/** An enumeration containing constants for the message delivery modes for sender.
*/
event JMSMessageDeliveryMode
{
	/** Use PERSISTENT message delivery mode for sending messages to the broker.
	
		Reliable senders always use PERSISTENT message delivery mode.
	*/
	constant string PERSISTENT := "PERSISTENT";
	
	/** Use NON_PERSISTENT message delivery mode for sending messages to the broker.
	
		This is the default for BEST_EFFORT senders.
	*/
	constant string NON_PERSISTENT := "NON_PERSISTENT";
}

/** An event object representing an existing JMS sender. 
 *
 * A JMS sender has an associated channel to which Apama events can be "sent", 
 * which will then be mapped to JMS messages using the requested message 
 * reliability setting and delivered to a destination on the JMS message bus. 
 */
event JMSSender
{
	// Public
	
	/** Returns the unique identifier of this sender. */
	action getSenderId() returns string { return __senderId; }
	
	/** Returns the Correlator channel to use for events that should 
	 * be delivered to JMS using this sender. 
	 *
	 * Note that if this senderId does not exist or has been removed then 
	 * events sent to this channel will be lost without a warning. 
	 */
	action getChannel() returns string { return __channel; }
	
	/** Requests removal of this JMS sender. The removal will be performed 
	 * asynchronously, and completes after all events already sent by this 
	 * context have been passed to JMS, and the associated JMS producer and 
	 * session have been closed. 
	 *
	 * EPL applications may listen for the REMOVED JMSSenderStatus event to 
	 * detect when the removal has completed. 
	 *
	 * If the connection is currently down there could be an unbounded delay 
	 * in completing the removal of the sender. The application should not 
	 * send any more events to the sender channel once this action has been 
	 * called. 
	 *
	 * It is an error to attempt to remove a JMS sender that does not exist, or 
	 * to attempt to remove a static JMS sender. Such errors will result in 
	 * the termination of the current EPL monitor instance. 
	 * 
	 * @see JMSSenderStatus#REMOVED
	 */
	action remove()
	{
		__plugin.processControlEvent(__RemoveSender(__senderId).toString());
	}

	/** Returns the number of events that have been send to this sender's 
	 * channel from the application, but are still queued waiting to be sent to 
	 * JMS.
	 *
	 * This allows an EPL application to throttle or reduce the rate at which 
	 * it sends events based on the size of the backlog building up in the 
	 * Correlator's queues, to ensure that the Correlator does not run out of 
	 * memory due to a temporary peak in throughput rate or loss of the JMS 
	 * connection. 
	 *
	 * Calling this action is a slightly expensive operation, so it is best to 
	 * get the number of outstanding events once, then loop sending a batch of 
	 * events. Therefore do not call getOutstandingEvents inside a loop that is 
	 * continually sending events to JMS. 
	 *
	 * You must not call this method after calling remove().
	 */
	action getOutstandingEvents() returns integer
	{
		return __plugin.getOutstandingMessages(__senderId);
	}
	
	/** Requests a notification event after flushing all messages 
	 * already sent to the sender's channel by the current context. 
	 *
	 * A JMSSenderFlushed event will be sent to this context when all the 
	 * messages already sent to the sender channel have been processed 
	 * and passed to the JMS broker (or dropped, in the case of 
	 * non-recoverable mapping errors). 
	 *
	 * This feature is only applicable to BEST_EFFORT senders, as for 
	 * AT_LEAST_ONCE/EXACTLY_ONCE senders reliability is already taken care of 
	 * by the integration with Correlator state persistence. It is an error 
	 * to call this action from a persistent monitor. 
	 * 
	 * Applications may have multiple flush requests in flight at any one time. 
	 * Performance will be improved by sending multiple messages (e.g. 1000) 
	 * between each flush request.
	 *
	 * @returns The unique request id for flush request, which will be included 
	 * in the resulting JMSSenderFlushed event.
	 *
	 * @see JMSSenderFlushed Notification event sent in response to 
	 */
	action requestFlush() returns integer
	{
		__plugin.checkNonPersistentMonitor("requestFlush");
		integer requestId := integer.getUnique();
		string privateChannel := "com.apama.jms.backchannel." + context.current().getId().toString();
		monitor.subscribe(privateChannel);
		send __JMSSenderFlush(requestId, privateChannel) to self.getChannel();
		return requestId;
	}
	
	// Private
	
	/** @private*/ string __senderId;
	/** @private*/ string __channel;
	/** @private*/ import "JMSPlugin" as __plugin;

}

/** An event object representing the configuration of a new JMS sender, for 
 * dynamically adding JMS senders at runtime. 
 *
 * Call JMSConnection.createSenderConfiguration() to create an instance, and 
 * then use the setter actions to specify each required configuration option. 
 * Each setter method returns this configuration instance to make it possible 
 * to chain calls and specify all required options in a single statement. 
 *
 * @see JMSConnection#createSenderConfiguration() Creates a new 
 *	JMSSenderConfiguration event object. 
 * @see JMSConnection#addSenderWithConfiguration() Uses a JMSSenderConfiguration 
 *	to add a new JMS sender. 
 */
event JMSSenderConfiguration
{
	/** The unique identifier of this sender. */
	action getSenderId() returns string
	{ return __senderId; }

	/** The identifier of the connection this sender belongs to. */
	action getConnectionId() returns string
	{ return __connectionId; }
	
	/** Specifies the reliability mode to use for messages from this sender. 
	 * @param value Must be one of the enumeration constants from the 
	 * JMSSenderReliability event, or "" to indicate that the connection's 
	 * defaultSenderReliability should be used. 
	 * @see JMSSenderReliability
	 */
	action setSenderReliability(string value) returns JMSSenderConfiguration
	{ __senderReliability := value; return self; }
	/** Specifies the reliability mode to use for messages from this sender. */
	action getSenderReliability() returns string
	{ return __senderReliability; }
	
	/** Specifies the message delivery mode to use for messages from this sender.
	 *
	 * This can be used only for non-reliable BEST_EFFORT senders.
	 * It is ignored for reliable senders which always use PERSISTENT message 
	 * delivery mode.
	 *
	 * @param value Must be one of the enumeration constants from the 
	 * JMSMessageDeliveryMode event, or "" to indicate that the default mode will be used
	 * @see JMSMessageDeliveryMode
	 */
	action setMessageDeliveryMode(string value) returns JMSSenderConfiguration
	{ __messageDeliveryMode := value; return self; }
	/** Specifies the message delivery mode to use for messages from this sender. */
	action getMessageDeliveryMode() returns string
	{ return __messageDeliveryMode; }
	
	// Private fields
	
	/** @private*/ string __connectionId;
	/** @private*/ string __senderId;
	/** @private*/ string __senderReliability;
	/** @private*/ string __messageDeliveryMode;
	
	/** Initializes this object with required parameters 
	 * @private*/ 
	action __init(string connectionId, string senderId) 
	{
		self.__connectionId := connectionId;
		self.__senderId := senderId;
	}
	
	/** @private*/ 
	action __getAddSender() returns __AddSender
	{
		return __AddSender(
			getConnectionId(), 
			getSenderId(), 
			getSenderReliability(),
			{"MessageDeliveryMode":getMessageDeliveryMode()}
			);
	}
}

/** A notification event sent to an EPL application in response to a sender 
 * flush request.
 * 
 * The application context will receive this event after all the messages 
 * already sent by the application at the time of the flush request have been 
 * processed and passed to the JMS broker (or dropped, in the case of 
 * non-recoverable mapping errors). 
 *
 * This event will be sent to the context that requested message flushing.
 *
 * @see JMSSender#requestFlush()
 */
event JMSSenderFlushed
{
	/** The unique request id returned by the flush request.*/
	integer requestId;
	/** The identifier of sender. */
	string senderId;
}

/** An enumeration containing constants for the currently supported receiver 
	reliability values.
*/
event JMSReceiverReliability
{
	/** Best effort non-reliable messaging; events may be lost or duplicated 
		if a component fails. */
	constant string BEST_EFFORT := "BEST_EFFORT";
	/** Reliable messaging without duplicate detection; events may be 
		duplicated or reordered if a component fails, but will not be lost. */
	constant string AT_LEAST_ONCE := "AT_LEAST_ONCE";
	/** Reliable messaging with duplicate detection; events may be 
		reordered if a component fails, but will not be lost, and will not be 
		duplicated provided the unique message ids and duplicate detection 
		window are configured correctly. */
	constant string EXACTLY_ONCE := "EXACTLY_ONCE";
	/** Reliable messaging with acknowledgements controlled by the application.
	*/
	constant string APP_CONTROLLED := "APP_CONTROLLED";
}

/** An event object representing an existing JMS receiver. 
 *
 * A receiver listeners for messages on a specific JMS queue or topic, maps 
 * them to Apama events and sends them to the Correlator's public contexts. 
 */
event JMSReceiver
{
	// Public
	
	/** Returns the unique identifier of this receiver. */
	action getReceiverId() returns string { return __receiverId; }
	
	
	/** Requests removal of this JMS receiver. 
	 *
	 * The removal will be performed asynchronously, and completes after all 
	 * events already received from this JMS destination have been enqueued to 
	 * the Correlator, any persisted uniqueMessageIds no longer required for 
	 * duplicate detection have been deleted, any durable topic subscription 
	 * has been removed from the JMS broker, and the associated JMS consumer 
	 * and session have been closed. 
	 *
	 * EPL applications may listen for the REMOVED JMSReceiverStatus event to 
	 * detect when the removal has completed. 
	 *
	 * If the connection is currently down there could be an unbounded delay 
	 * in completing the removal of the receiver. 
	 *
	 * It is an error to attempt to remove a JMS receiver that does not exist, 
	 * or to attempt to remove a static JMS receiver. Such errors will result 
	 * in the termination of the current EPL monitor instance. 
	 * 
	 * @see JMSReceiverStatus#REMOVED
	 */
	action remove()
	{
		__plugin.processControlEvent(__RemoveReceiver(__receiverId).toString());
	}
	
	
	/** Signals that the application is ready for messages received 
	 * since the last appControlledAcknowledgeAndResume() call to be 
	 * acknowledged to JMS, and that message receiving can then resume. 
	 *
	 * This is used only by receivers which are running in APP_CONTROLLED 
	 * reliability mode. APP_CONTROLLED receivers should listen for the 
	 * JMSAppControlledReceivingSuspended event enqueued at the end of each 
	 * batch of incoming messages and respond by calling 
	 * appControlledAcknowledgeAndResume() once the messages or the output 
	 * events/state changes resulting from processing them have been reliably 
	 * stored in another system (e.g. sent and flushed to a downstream JMS 
	 * destination, or committed to a database or distributed MemoryStore). 
	 *
	 * To avoid race conditions, it is important to call this method only from 
	 * the context that is handling both the JMS messages from this receiver 
	 * and the JMSAppControlledReceivingSuspended event. 
	 * 
	 * Never call this method except in response to a 
	 * JMSAppControlledReceivingSuspended event, and do not call it from 
	 * a persistent monitor - both will result in an exception.
	 *
	 * @see JMSAppControlledReceivingSuspended
	 */
	action appControlledAcknowledgeAndResume() {
		__plugin.processControlEvent(__ReceiverAcknowledgeAndResume(__receiverId).toString());
	}
	
	// Private
	
	/** @private*/ string __receiverId;
	/** @private*/ import "JMSPlugin" as __plugin;

}

/** A notification event sent to an EPL application every time an APP_CONTROLLED 
 * receiver suspends, at the end of each message batch. 
 *
 * The application should respond by taking whatever action is required to 
 * ensure that the messages received since the last suspend 
 * or the output events/state changes resulting from processing them 
 * have been reliably stored in another system (e.g. sent and flushed to 
 * a downstream JMS destination, or committed to a database or distributed MemoryStore). 
 *
 * Once these operations have completed the application should call 
 * JMSReceiver.appControlledAcknowledgeAndResume() to signal that the message 
 * batch can be acknowledged to JMS (i.e. no longer needs to be retained for 
 * possible resending in the event of crash) and that receiving can resume. 
 *
 * This event will be sent to the same context(s) that are handling the 
 * messages from this receiver. 
 * The event will be sent at the end of every message 'batch' 
 * (see "maxBatchSize" in the documentation for more details). 
 * @see JMSReceiver#appControlledAcknowledgeAndResume()
 */
event JMSAppControlledReceivingSuspended
{
	/** The unique identifier of the suspended receiver. */
	string receiverId;
}


/** An event object representing the configuration of a new JMS receiver, for 
 * dynamically adding JMS receivers at runtime. 
 *
 * Call JMSConnection.createReceiverConfiguration() to create an instance, and 
 * then use the setter actions to specify each required configuration option. 
 * Each setter method returns this configuration instance to make it possible 
 * to chain calls and specify all required options in a single statement. 
 *
 * @see JMSConnection#createReceiverConfiguration() Creates a new 
 *	JMSReceiverConfiguration event object. 
 * @see JMSConnection#addReceiverWithConfiguration() Uses a 
 *	JMSReceiverConfiguration to add a new JMS receiver. 
 */
event JMSReceiverConfiguration
{
	/** The unique identifier of this receiver. */
	action getReceiverId() returns string
	{ return __receiverId; }

	/** The identifier of the connection this receiver belongs to. */
	action getConnectionId() returns string
	{ return __connectionId; }
	
	/** The queue or topic this receiver will listen to. */
	action getDestination() returns string
	{ return __destination; }
	
	/** Specifies the reliability mode to use for receiving messages. 
	 * @param value Must be one of the enumeration constants from the 
	 *	JMSReceiverReliability event, or "" to indicate that the connection's 
	 *	defaultReceiverReliability should be used. 
	 * @see JMSReceiverReliability
	 */
	action setReceiverReliability(string value) returns JMSReceiverConfiguration
	{ __receiverReliability := value; return self; }
	/** Specifies the reliability mode to use for receiving messages. */
	action getReceiverReliability() returns string
	{ return __receiverReliability; }
	
	/** Specifies the unique identifier for the subscription if a durable topic 
	 * subscription is to be created.
	 * @param value A unique JMS subscription name if a durable topic 
	 *	subscription should be created, or "" if a non-durable topic 
	 *	subscription should be made. Only valid for topics, and only if the 
	 *	reliability is not BEST_EFFORT.
	 */
	action setDurableTopicSubscriptionName(string value) returns JMSReceiverConfiguration
	{ __durableTopicSubscriptionName := value; return self; }
	/** Specifies the unique identifier for the subscription if a durable topic 
	 * subscription is to be created. */
	action getDurableTopicSubscriptionName() returns string
	{ return __durableTopicSubscriptionName; }

	/** Specifies the JMS message selector query string to select a subset of 
	 * queue/topic messages to be processed by this receiver. 
	 * @param value A message selector string, or "" to receive all messages. 
	 * See the JMS documentation for the javax.jms.Message interface for more 
	 * details. 
	 */
	action setMessageSelector(string value) returns JMSReceiverConfiguration
	{ __messageSelector := value; return self; }
	/** Specifies the JMS message selector query string to select a subset of 
	 * queue/topic messages to be processed by this receiver. */
	action getMessageSelector() returns string
	{ return __messageSelector; }

	/** Specifies an application-defined identifier to override how receivers 
	 * are grouped together for duplicate-detection purposes when using 
	 * EXACTLY_ONCE reliability. 
	 * @param value An arbitrary (but preferably short) string defined by the 
	 *	EPL application. All EXACTLY_ONCE receivers with this string will be 
	 *	grouped together to form a single duplicate detection domain. 
	 *
	 *	This is an advanced feature - by default, receivers are grouped into 
	 *	a duplicate detection domain together with other receivers in the 
	 *	same connectionId listening to the same destination, which is the 
	 *	correct setting in the majority of cases. 
	 */
	action setDupDetectionDomainId(string value) returns JMSReceiverConfiguration
	{ __dupDetectionDomainId := value; return self; }
	/** Specifies an application-defined identifier to override how receivers 
	 * are grouped together for duplicate-detection purposes when using 
	 * EXACTLY_ONCE reliability. */
	action getDupDetectionDomainId() returns string
	{ return __dupDetectionDomainId; }

	/** Specifies that messages sent to this destination by our own connection 
	 * should be ignored by the receiver. 
	 * @param value May be set to true or false for topic destinations. If 
	 *	the destination is a queue, the behaviour of noLocal=true is not 
	 *	specified, and will not work with many providers. The default value of 
	 *	false is usually fine. 
	 */
	action setNoLocal(boolean value) returns JMSReceiverConfiguration
	{ __noLocal := value; return self; }
	/** Specifies that messages sent to this destination by our own connection 
	 * should be ignored by the receiver. */
	action getNoLocal() returns boolean
	{ return __noLocal; }
	
	// Private fields
	
	/** @private*/ string __connectionId;
	/** @private*/ string __receiverId;
	/** @private*/ string __destination;
	/** @private*/ string __receiverReliability;
	/** @private*/ string __durableTopicSubscriptionName;
	/** @private*/ string __messageSelector;
	/** @private*/ string __dupDetectionDomainId;
	/** @private*/ boolean __noLocal;
	
	
	/** Initializes this object with required parameters 
	 * @private*/ 
	action __init(string connectionId, string receiverId, string destination) 
	{
		self.__connectionId := connectionId;
		self.__receiverId := receiverId;
		self.__destination := destination;
	}
	/** Initializes this object with required parameters 
	 * @private*/ 
	action __getAddReceiver() returns __AddReceiver
	{
		__AddReceiver result := new __AddReceiver;
		result.connectionId := getConnectionId();
		result.receiverId := getReceiverId();
		result.destination := getDestination();
		result.receiverReliability := getReceiverReliability();
		result.durableTopicSubscriptionName := getDurableTopicSubscriptionName();
		result.messageSelector := getMessageSelector();
		result.noLocal := getNoLocal();
		if getDupDetectionDomainId() != "" then { result.extraAddParams["dupDetectionDomainId"] := getDupDetectionDomainId(); }
		
		return result;
	}
}

/** An event object representing a JMS connection, with actions for 
 * manipulating a connection's existing senders and receivers, and also for 
 * dynamically adding senders and receivers at runtime. 
 *
 * Senders and receivers may be added dynamically either using the 
 * comprehensive JMSConnection.addReceiver/SenderWithConfiguration() actions 
 * which provide access to all configuration parameters, or one of the 
 * other addReceiver/Sender*() actions that simplify creation of 
 * senders/receivers using the more common configuration parameter sets. 
 *
 * @see JMS#getConnection() Use this method to get a JMSConnection
 */
event JMSConnection
{
	// Public
	
	/** The unique identifier of this connection. */
	action getConnectionId() returns string 
	{
		return __connectionId;
	}

	/** Get a JMSReceiver event object representing a receiver that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid receiverId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing receiver then 
	 * operations on the returned JMSReceiver (such as remove()) will cause an 
	 * error. 
	 */
	action getReceiver(string receiverId) returns JMSReceiver { return JMSReceiver(receiverId); }
	
	/** Get a JMSSender event object representing a sender that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid senderId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing sender then 
	 * operations on the returned JMSSender (such as remove()) will cause an 
	 * error. 
	 */
	action getSender(string senderId) returns JMSSender { return JMSSender(senderId, "jms:"+senderId); }

	/** Get a JMSSender event object representing the default sender for this 
	 * connection (which exists automatically if no other static senders 
	 * were explicitly configured). 
	 */
	action getDefaultSender() returns JMSSender { return getSender(__connectionId+"-default-sender"); }

	
	/** Requests the addition of a new dynamic JMS sender, with the specified 
	 * reliability setting. 
	 *
	 * EPL applications may listen for the JMSSenderStatus event to be notified 
	 * when the new sender has been added, and when it has reached the 
	 * "OK" state. Events can be sent to the sender's channel as soon as 
	 * this action returns. 
	 *
	 * A unique senderId will be generated automatically. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param senderReliability An enumeration value from JMSSenderReliability 
	 * indicating the reliability setting to use for sending events. 
	 * Alternatively, specify an empty string "" to use the connection's 
	 * defaultSenderReliability. 
	 *
	 * @return A JMSSender instance which can be used to get the senderId for 
	 * status monitoring, the channel to send events to, and an action for 
	 * removing the sender when it is no longer required. 
	 * @see JMSSenderReliability
	 */
	action addSender(string senderReliability) returns JMSSender
	{
		return addSenderWithConfiguration(createSenderConfiguration(__makeUniqueId("sender", senderReliability))
			.setSenderReliability(senderReliability));
	}
	
	
	/** Requests the addition of a new dynamic JMS sender, with the specified 
	 * sender configuration. 
	 *
	 * EPL applications may listen for the JMSSenderStatus event to be notified 
	 * when the new sender has been added, and when it has reached the 
	 * "OK" state. Note that no events will actually be sent into the 
	 * Correlator until JMS.onApplicationInitialized() has been called. 
 	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param config An event representing the configuration of the new sender, 
	 * constructed using JMSConnection.createSenderConfiguration and the 
	 * setter methods on JMSSenderConfiguration.
	 *
	 * @return A JMSSender instance which can be used to get the senderId for 
	 * status monitoring, the channel to send events to, and an action for 
	 * removing the sender when it is no longer required. 
	 *
	 * @see JMSConnection#createSenderConfiguration()
	 */
	action addSenderWithConfiguration(JMSSenderConfiguration config) returns JMSSender
	{
		__plugin.processControlEvent(config.__getAddSender().toString());
		return getSender(config.getSenderId());
	}
	
	/** Create a JMSSenderConfiguration for this connection that can be 
	 * used to add a new sender with the specified settings. 
	 *
	 * @param senderId An application-defined unique identifier for this 
	 * sender, used to track status and removal. The senderId must not be an 
	 * empty string or contain the colon ":" character - if it does, the 
	 * monitor will terminate with an error when trying to create the sender.
	 *
	 * Applications are encouraged to use <tt>integer.getUnique().toString()</tt> 
	 * or a similar generator of unique numbers for all or part of the senderId. 
	 *
	 * @see JMSConnection#addSenderWithConfiguration()
	 */
	action createSenderConfiguration(string senderId) returns JMSSenderConfiguration
	{
		JMSSenderConfiguration result := new JMSSenderConfiguration;
		result.__init(__connectionId, senderId);
		return result;
	}

	/** Requests the addition of a new dynamic JMS receiver, with the specified 
	 * queue/topic name and reliability setting. 
	 *
	 * EPL applications may listen for the JMSReceiverStatus event to be 
	 * notified when the new receiver has been added, and when it has reached 
	 * the "OK" state. 
	 *
	 * A unique receiverId will be generated automatically. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param destination A JMS queue name, JMS topic name, or JNDI name, 
	 *	prefixed by <tt>"queue:"</tt>, <tt>"topic:"</tt> or <tt>"jndi:"</tt>.
	 
	 * @param receiverReliability An enumeration value from 
	 *	JMSReceiverReliability indicating the reliability setting to use. 
	 *	Alternatively, specify an empty string "" to use the connection's 
	 *	defaultReceiverReliability. 
	 *
	 * @return A JMSReceiver instance which can be used to get the receiverId 
	 *	for status monitoring, and an action for removing the receiver when it 
	 *	is no longer required. 
	 * @see JMSReceiverReliability
	 */
	action addReceiver(string destination, string receiverReliability) returns JMSReceiver
	{
		return addReceiverWithConfiguration(
			createReceiverConfiguration(__makeUniqueId("receiver", destination), destination)
			.setReceiverReliability(receiverReliability));
	}

	/** Requests the addition of a new dynamic JMS durable topic subscription. 
	 *
	 * EPL applications may listen for the JMSReceiverStatus event to be 
	 * notified when the new receiver has been added, and when it has reached 
	 * the "OK" state. 
	 *
	 * This durable topic subscription will remain on the JMS broker until this 
	 * dynamic receiver is removed using JMSReceiver.remove(). 
	 *
	 * A unique receiverId will be generated automatically. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param destination A JMS topic name, or JNDI name, 
	 *	prefixed by <tt>"topic:"</tt> or <tt>"jndi:"</tt>.
	 *
	 * @param receiverReliability An enumeration value from 
	 *	JMSReceiverReliability indicating the reliability setting to use.
	 
	 *	For a durable topic subscription, this must not be BEST_EFFORT.  
	 *	Specify an empty string "" to use the connection's 
	 *	defaultReceiverReliability. 
	 *
	 * @param durableTopicSubscriptionName The unique identifier used by the 
	 *	JMS broker for for this durable topic subscription. 
	 *
	 *	Must not be "", and must not match any other subscription name with the 
	 *	same connection clientID. 
	 *
	 * @param messageSelector An optional JMS message selector query string to 
	 *	select a subset of topic messages to be processed by this receiver, or 
	 *	"" to receive all messages. 
	 *
	 *	See the JMS documentation for the javax.jms.Message interface for more 
	 *	details. 

	 * @return A JMSReceiver instance which can be used to get the receiverId 
	 *	for status monitoring, and an action for removing the receiver when it 
	 *	is no longer required. 
	 * @see JMSReceiverReliability
	 * @see JMSReceiver#remove()
	 */
	action addReceiverWithDurableTopicSubscription(string destination, string receiverReliability, 
		string durableTopicSubscriptionName, string messageSelector) returns JMSReceiver
	{
		return addReceiverWithConfiguration(
			createReceiverConfiguration(__makeUniqueId("durable-subscriber", durableTopicSubscriptionName), destination)
			.setReceiverReliability(receiverReliability)
			.setMessageSelector(messageSelector)
			.setDurableTopicSubscriptionName(durableTopicSubscriptionName)
			);
	}

	/** Requests the addition of a new dynamic JMS receiver, with the specified 
	 * receiver configuration. 
	 *
	 * EPL applications may listen for the JMSReceiverStatus event to be 
	 * notified when the new receiver has been added, and when it has reached 
	 * the "OK" state. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param config An event representing the configuration of the new 
	 * receiver, constructed using JMSConnection.createReceiverConfiguration 
	 * and the setter methods on JMSReceiverConfiguration.
	 *
	 * @return A JMSReceiver instance which can be used to get the receiverId 
	 * for status monitoring, and an action for removing the receiver when it 
	 * is no longer required. 
	 *
	 * @see JMSConnection#createReceiverConfiguration()
	 */
	action addReceiverWithConfiguration(JMSReceiverConfiguration config) returns JMSReceiver
	{
		__plugin.processControlEvent(config.__getAddReceiver().toString());
		return getReceiver(config.getReceiverId());
	}
	
	/** Create a JMSReceiverConfiguration for this connection that can be 
	 * used to add a new receiver with the specified settings. 
	 *
	 * @param receiverId An application-defined unique identifier for this 
	 * receiver, used to track status and removal. The receiverId must not be an 
	 * empty string or contain the colon ":" character - if it does, the 
	 * monitor will terminate with an error when trying to create the receiver.
	 *
	 * Applications are encouraged to use <tt>integer.getUnique().toString()</tt> 
	 * or a similar generator of unique numbers for all or part of the receiverId. 
	 *
	 * @param destination A JMS queue name, JMS topic name, or JNDI name, 
	 * prefixed by <tt>"queue:"</tt>, <tt>"topic:"</tt> or <tt>"jndi:"</tt>.
	 *
	 * @see JMSConnection#addReceiverWithConfiguration()
	 */
	action createReceiverConfiguration(string receiverId, string destination) returns JMSReceiverConfiguration
	{
		JMSReceiverConfiguration result := new JMSReceiverConfiguration;
		result.__init(__connectionId, receiverId, destination);
		return result;
	}
	
	// Private
	
	/** @private*/ string __connectionId;
	/** @private*/ import "JMSPlugin" as __plugin;
	
	/** @private*/ 
	action __makeUniqueId(string requiredSuffix, string optionalSuffix) returns string {
		string result := __connectionId+"-"+requiredSuffix;
		if optionalSuffix != "" then {
			result := result+"-"+optionalSuffix;
		}
		result := result.replaceAll(":","-"); // ensure it's a valid identifier
		return result + "-" + integer.getUnique().toString();
	}
	
}

/** The top-level event object representing the Correlator-integrated JMS 
 * runtime.
 */
event JMS
{
	// Public
	
	/** Should be called by EPL applications after all EPL has been injected 
	 * and initialized, to indicate that the application is ready to receive 
	 * events from the JMS runtime, such as received JMS messages and 
	 * status notification events. 
	 *
	 * Invoking this action more than once will have no effect. 
	 *
	 */
	action onApplicationInitialized() 
	{
		__plugin.onApplicationInitialized();
	}
	
	/** Get a JMSConnection event object representing a connection defined  
	 * in the XML configuration file. 
	 */
	action getConnection(string connectionId) returns JMSConnection
	{
		return JMSConnection(connectionId);
	}
	
	/** Get a JMSReceiver event object representing a receiver that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid receiverId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing receiver then 
	 * operations on the returned JMSReceiver (such as remove()) will cause an 
	 * error. 
	 */
	action getReceiver(string receiverId) returns JMSReceiver { return (new JMSConnection).getReceiver(receiverId); }
	
	/** Get a JMSSender event object representing a sender that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid senderId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing sender then 
	 * operations on the returned JMSSender (such as remove()) will cause an 
	 * error. 
	 */
	action getSender(string senderId) returns JMSSender { return (new JMSConnection).getSender(senderId); }
	
	// Private
	
	/** @private*/ import "JMSPlugin" as __plugin;
}


//*****************************************************************************
//
// Status events
//

/** 
 * A notification event sent to an EPL application when a configured JMS 
 * connection encounters an error or changes state. 
 *
 * This event includes string constants for each supported status. 
 *
 * Note that all notification events will be held back until 
 * JMS.onApplicationInitialized() has been called. 
 */
event JMSConnectionStatus
{
	/** The unique identifier of the JMS connection. 
	*/
	string connectionId;

	/** An enumeration value specifying the status of the connection. The 
	 * values in the enumeration are provided as constants in this event. 
	 *
	 * If the status is OK then the connection is up. 
	 */
	string status;
	
	/** A user-readable string specifying the cause of the error. This should 
		always be a non-empty string when the status is "ERROR". */
	string errorMessage;
	
	/** Additional status information items. None are currently supported. */
	dictionary<string,string> extraStatusInfo;
	
	// enumeration constants for status field value:
	
	/** The status value indicating that the Correlator-JMS runtime is fully 
		connected to the JMS broker with a valid JMS Connection object. */
	constant string OK := "OK";
	
	/** The status value indicating that the Correlator-JMS runtime is trying
		to establish an initial connection.  */
	constant string CONNECTING := "CONNECTING";

	/** The status value indicating that the connection is not available due to 
		some non-fatal error condition; the Correlator-JMS runtime will keep 
		retrying in the background. */
	constant string ERROR := "ERROR";
}

/** 
 * A notification event sent to an EPL application when a configured JMS 
 * sender has been created successfully, encounters an error, or is removed. 
 *
 * This event includes string constants for each supported status, and 
 * fields specifying information about the configuration of this sender
 * (as specified when it was created). 
 *
 * Note that all notification events will be held back until 
 * JMS.onApplicationInitialized() has been called. 
 *
 * JMSSenderStatus events are sent for both static senders in the 
 * configuration file (or the implicitly defined default sender), and 
 * dynamic senders created with JMSConnection.addSender.
 */
event JMSSenderStatus
{
	/** The unique identifier of the JMS connection. 
	*/
	string connectionId;

	/** The unique identifier of this sender. 
	*/
	string senderId;

	/** An enumeration value specifying the status of the sender. The values
	 * in the enumeration are provided as constants in this event. 
	 *
	 * If the status is OK then the sender is functioning correctly; if it 
	 * is REMOVED then removal of the sender has completed.  
	 */
	string status;
	
	/** A user-readable string specifying the cause of the error. This is 
	 * guaranteed not empty if status="ERROR" or "FATAL_ERROR". */
	string errorMessage;
	
	/** Additional status information items. None are currently supported. */
	dictionary<string,string> extraStatusInfo;
	
	// enumeration constants for status field value:
	
	/** The status value indicating that the sender is fully connected to the 
		JMS broker with a valid JMS Producer object, and is available to send 
		messages. */
	constant string OK := "OK";
	
	/** The status value indicating that the sender is waiting for the 
		JMS connection or sender session to be established. */
	constant string CONNECTING := "CONNECTING";
	/** The status value indicating that the sender is not available due to 
		some non-fatal error condition; the Correlator-JMS runtime will keep 
		retrying in the background. */
	constant string ERROR := "ERROR";
	
	/** The status value indicating that the sender is not available due to 
		a fatal error condition. 
		
		Senders in this state are no longer useful and should be removed by the 
		EPL application (if dynamic) or the system administrator (if statically 
		defined in the XML config file). Note that the removal of such failed 
		senders does not happen automatically. */
	constant string FATAL_ERROR := "FATAL_ERROR";
	/** The status value indicating that the removal of a dynamic sender has 
		been completed, which will be sent some time after a sender removal 
		request, once all the associated state on the broker and the 
		Correlator's database has been removed. 
		
		In rare cases it's possible that a status event for a sender may be 
		sent after the REMOVED status; any such event should be ignored.  */
	constant string REMOVED := "REMOVED";
	
	// fields specifying the sender's configuration:

	/** Sender quality of service, specifying the reliability mode of the 
		messages from this sender. 
		
		One of the enumeration constants from the JMSSenderReliability event. */
	string senderReliability;

	/** Additional sender configuration parameters specified when it was added. 
	*/
	dictionary<string,string> extraAddParams;

}

/** 
 * A notification event sent to an EPL application when a configured JMS 
 * receiver has been created successfully, encounters an error, or is removed. 
 *
 * This event includes string constants for each supported status, and 
 * fields specifying information about the configuration of this receiver
 * (as specified when it was created). 
 *
 * Note that the ordering of JMSReceiverStatus events relative to received 
 * messages is not defined. Also note that notification events will be held 
 * back until JMS.onApplicationInitialized() has been called. 
 *
 * JMSReceiverStatus events are sent for both static receivers in the 
 * configuration file, and dynamic receivers created with 
 * JMSConnection.addReceiver.
 */
event JMSReceiverStatus
{
	/** The unique identifier of the JMS connection.  */
	string connectionId;
	
	/** The unique identifier of this receiver. */
	string receiverId;

	/** An enumeration value specifying the status of the receiver. The values
	 * in the enumeration are provided as constants in this event. 
	 *
	 * If the status is OK then the receiver is functioning correctly; if it 
	 * is REMOVED then removal of the receiver has completed.  
	 */
	string status;
	
	/** A user-readable string specifying the cause of the error. This is 
	 * guaranteed not empty if status="ERROR" or "FATAL_ERROR". */
	string errorMessage;

	// enumeration constants for status field value:
	
	/** The status value indicating that the receiver is fully connected to the 
		JMS broker with a valid JMS Consumer object, and is available to receive 
		messages. */
	constant string OK := "OK";
	
	/** The status value indicating that the receiver is waiting for the 
		JMS connection or receiver session to be established. */
	constant string CONNECTING := "CONNECTING";
	/** The status value indicating that the receiver is not available due to 
		some non-fatal error condition; the Correlator-JMS runtime will keep 
		retrying in the background. */
	constant string ERROR := "ERROR";

	/** The status value indicating the  receiver could not be found because of 
		a problem accessing the specified destination (i.e. a JMS or JNDI 
		error). */
	constant string DESTINATION_NOT_FOUND := "DESTINATION_NOT_FOUND"; 	

	/** The status value indicating that the receiver is not available due to 
		a fatal error condition. 
		
		Receivers in this state are no longer useful and should be removed by 
		the EPL application (if dynamic) or the system administrator (if 
		statically defined in the XML config file). The removal of such failed 
		receivers does not happen automatically. 
	*/
	constant string FATAL_ERROR := "FATAL_ERROR";

	/** The status value indicating that the removal of a dynamic receiver has 
		been completed, which will be sent some time after a receiver removal 
		request, once all the associated state on the broker and the 
		Correlator's database has been removed. 
		
		In rare cases it's possible that a status event for a receiver may be 
		sent after the REMOVED status; any such event should be ignored.  */
	constant string REMOVED := "REMOVED";
	
	/** Additional status information items. None are currently supported. */
	dictionary<string,string> extraStatusInfo;

	// fields specifying the receiver's configuration:
	
	/** A JMS queue name, JMS topic name, or JNDI name, prefixed by 
		<tt>"queue:"</tt>, <tt>"topic:"</tt> or <tt>"jndi:"</tt>. */
	string destination;
	/** Receiver quality of service, specifying the reliability mode used 
		for receiving messages. 
		
		One of the enumeration constants from the JMSReceiverReliability event*/
	string receiverReliability;
	/** A unique JMS subscription name if a durable topic subscription should 
		be created, or "" if a non-durable topic subscription should be made. */
	string durableTopicSubscriptionName;
	/** JMS message selector string, to specify a subset of messages from the 
		destination to be processed by this receiver. 
	*/
	string messageSelector;
	/** Specifies that messages sent to this destination by our own connection 
		should be ignored by the receiver. */
	boolean noLocal;
	/** Additional receiver configuration parameters. None currently supported. */
	dictionary<string,string> extraAddParams;
}

//*****************************************************************************
//
// Advanced control events
//


/** A control event periodically sent to an EPL application for each receiver 
 * with receiverFlowControl enabled, which the application uses to update 
 * the flow control window.
 *
 * This event is used as a baseline from which the EPL application specifies 
 * the size of the window of new events it is currently ready to receive, 
 * specified relative to the last event received before this marker. 
 *
 * The event is sent:
 * i) when a receiver with receiverFlowControl=true is first added 
 * (once onApplicationInitialized has been called), 
 * ii) during recovery (in a persistent correlator), and 
 * iii) also periodically as JMS messages are received and 
 * enqueued to the correlator (typically these events are sent as often as 
 * the configured maxBatchSize, e.g. at least once every 1000 events). 
 *
 * To correctly implement the receiver flow control protocol, applications must 
 * respond to this event by calling updateFlowControlWindow (see below) 
 * to indicate the maximum number of additional events that the JMS runtime 
 * should take from this receiver, using the point in the event stream at 
 * which this marker was received as the baseline. 
 *
 * Applications that wish to  use flow control to throttle message receiving 
 * based on the number of outstanding asynchronous operations from 
 * already-received messages (to put a finite bound on memory usage) should 
 * also cache the most recent JMSReceiverFlowControlMarker for each 
 * active JMSReceiver so that the flow control window can be updated 
 * (e.g. extended) as pending operations complete, since there is no guarantee 
 * another JMSReceiverFlowControlMarker event will be sent until the window 
 * is extended enough for more events to be received. 
 *
 * Note that the fields of this event (apart from receiverId) are intended as 
 * 'opaque' data for internal use only and should be ignored by customer code.
 *
 * @see JMSReceiverFlowControlMarker#updateFlowControlWindow() Set the flow 
 * control window for this receiver, relative to this marker. 
 */ 
event JMSReceiverFlowControlMarker
{
	/** The unique identifier of this receiver. */
	string receiverId;
	
	/** For internal use only, treat as opaque data. */ 
	integer __processInstanceToken;
	
	/** For internal use only, treat as opaque data. */ 
	integer __flowControlMarker;
	
	/**
	* Sets the current flow control window size for a given receiver, which 
	* indicates the number of extra Apama events that should be taken from JMS 
	* and passed to the application before blocking, relative to the last data 
	* event received before this marker. 
	*
	* @param windowSizeEvents The maximum number of new events that should be 
	* received from this JMS receiver and enqueued to the correlator, relative 
	* to the position in the event flow indicated by this marker. 
	* The window size may be a constant number (e.g. 10,000 events) for 
	* applications that immediately process received events to completion,
	* or it may have a number of 'pending' events subtracted from it to create 
	* a bound on on the number of events that may be received from the JMS 
	* broker but are not yet been fully processed by the application (e.g. if 
	* an asynchronous database operation must complete before the memory, data 
	* structures or event listeners associated with the event may be deleted).
	*
	* It is valid to supply a zero or negative number for this value, in which 
	* case the JMS runtime will attempt to pause receiving, and take no more 
	* messages from the JMS queue/topic until this action is called again 
	* with a positive window (though it is not possible to guarantee that the 
	* flow of events will stop immediately, since some events could already be 
	* queued up). To allow an unbounded number of events to be received, 
	* specify integer.MAX for windowSizeEvents.
	* 
	* It is important that the overall long-term maximum window size 
	* (i.e. the chosen constant upper bound, ignoring any currently pending 
	* operations) is greater than than the receiver's maxBatchSize 
	* (typically 1000). 
	*/
	action updateFlowControlWindow(integer windowSizeEvents)
	{
		// use 'UnlessDisabled' as this should be a no-op when JMS is disabled, to support replay log
		__plugin.processControlEventUnlessDisabled(__JMSReceiverFlowControlWindowUpdate(
			receiverId, __processInstanceToken, __flowControlMarker, windowSizeEvents).toString()
		);
	}
	
	/** @private*/ import "JMSPlugin" as __plugin;
}
 00000038 C:\SoftwareAG\Apama 5.3\monitors\CorrelatorJMSEvents.mon
MONF 00003097 //*****************************************************************************
// Title:       StatusSupport
// Description: Provides event definitions for generic status reporting from  
//              service monitors.
//
// Revision:    $Revision: 235381 $
//
// $Copyright(c) 2006-2007, 2008-2009, 2011-2012 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

package com.apama.statusreport;

/*
	The events defined in this file act as an API between applications
	or blocks and service monitors.  They provide functionality to 
	Subscribe to status messages.
	
	The aim of this API is to provide an abstraction over any adapter
	specific details - for example, some adapters may require an explicit 
	call to subscribe to such data, some may be sent it anyway.
	
	Any adapter specific information that the application needs to supply
	or be supplied can be passed in the extraParams dictionary - these 
	are free-form (though there are conventions on the keys, see below).
	
	The service monitor also needs to handle any session initiation that
	may be required.
	
	A Status event does not denote a change of state, merely what the current
	state is - in particular, one will be sent out after every 
	SubscribeStatus request.

	All operations and responses are keyed on serviceId (if non-blank), 
	object,	connection and subServiceID. Every event starts with these 4 
	fields.
	
*/


/**
 *	Sent to the SubscribeStatus chanenl to subscribe to status.
 *	
 */
event SubscribeStatus {
	constant string CHANNEL := "SubscribeStatus";
	/**
	 *	service ID to subscribe to - blank will target all services.
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"Market" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;
}

/**
 *	Sent to the service monitor to unsubscribe from status.
 *	
 */
event UnsubscribeStatus {	 
	constant string CHANNEL := "SubscribeStatus";
	/**
	 *	service ID to subscribe to - blank will target all services
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"Market" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;
}


/**
 *	Sent from the service monitor to the StatusReport channel to notify the application of status for a 
 *	subscribed item.
 *	
 */
event Status {	
	constant string CHANNEL := "StatusReport";
	/**
	 *	service ID to subscribe to - blank will target all services
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"MarketState" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;

	/**
	 *	status description.
	 *	A free-form text string giving a description of the status.
	 */
	string description;
	
	/**
	 *	A sequence of summary strings specifying information about the 
	 *	status of the specified object.  This will be a well recognized
	 *	sequence of words - for example, a financial market's
	 *	"MarketState" may be "Open", "Closed", "PreOpen", etc.  A Connection 
	 *	may be "Connected", "Disconnected", "Disconnected LoginFailed", 
	 *	"Disconnected TimedOut", etc. 
	 */
	sequence<string> summaries;

	/**
	 *	available.
	 *	True if the object is "available" - the exact meaning is adapter 
	 * 	specific; for example, connected, open for general orders, etc.
	 */
	 boolean available;
	 
	 /** 
	 *	extra parameters that do not map into any of the above.  Convention
	 *	is that keys are in TitleCase.  e.g. "Username", "CloseTime", etc.
	 */
	wildcard dictionary <string, string> extraParams;
}


event StatusError {
	constant string CHANNEL := "StatusReport";
	/**
	 *	service ID to subscribe to - blank will target all services
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"MarketState" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;

	/**
	 *	status description.
	 *	A free-form text string giving a description of the status.
	 */
	string description;
	
	/**
	 *	Whether the subscription has been terminated.  Any subscribers will 
	 *	need to send a new SubscribeStatus request after this.
	 */
	boolean failed;
}
	
//*****************************************************************************
// Title:         ParallelStatusSupport
// Description:   ParallelStatusSupport description
// Dependencies:  None
// Author:        arrustem
//
//*****************************************************************************

/*
	Event definitions for block subject event wrappers;
	These are provided for backwards compatibility.  Monitors listening to status should instead subscribe to the "StatusReport" channel.
*/
event SubscribeStatusToContext {
	context instanceContext;
	SubscribeStatus subscribe;
}

event UnsubscribeStatusToContext {
	context instanceContext;
	UnsubscribeStatus unsubscribe;
}

monitor ParallelStatusSupport {
	/*	dictionary < [symbol] , sequence of contexts > eventRouter;
	 - eventRouter will keep track of all contexts that are listening to a particular symbol
	 - The same d.s. will be used for both, Status and StatusError
	   since they are added/removed precisely at the same time. 
	*/
	dictionary < SubscribeStatus , sequence<context> > eventRouter;
	
	/*	dictionary < [event key], dictionary < [contextId], [key ctr] > > statusToContextCtr;
	 - Keeps count of number of listeners for each symbol on each context
	*/
	dictionary < SubscribeStatus, dictionary < integer, integer > > statusToContextCtr;

	/*	dictionary < [symbol], listener > statusListeners;
	 - keeps track of the local listeners for Status
		dictionary < [symbol], listener > errorListeners;
	 - keeps track of the local listeners for StatusError
	*/
	dictionary < SubscribeStatus, listener > statusListeners;
	dictionary < SubscribeStatus, listener > errorListeners;
	
	action onload() {
		monitor.subscribe("StatusReport");
		// set up listeners for the wrapped events coming from subjects
		SubscribeStatusToContext subscribe;
		on all SubscribeStatusToContext():subscribe subscribeEventHandler(subscribe);
		
		UnsubscribeStatusToContext unsubscribe;
		on all UnsubscribeStatusToContext():unsubscribe unsubscribeEventHandler(unsubscribe);
	}
	
	action ondie() {
                // print out an error if statusToContextCtr is not empty
                if (statusToContextCtr.size() != 0) then {
                        log "ParallelStatusSupport is terminating but there may still be contexts subscribed to Status events" at ERROR;
                }
                else {
                        log "ParallelStatusSupport is terminating" at INFO;
                }
	}
	
	action onunload() {
		// not doing anything here since it is assumed that only one instance of this monitor is executing 
	}
	
	action subscribeEventHandler(SubscribeStatusToContext evt) {
		
		SubscribeStatus key := evt.subscribe;
		integer cId := evt.instanceContext.getId();
		
		// manage statusToContextCtr
		if not statusToContextCtr.hasKey(key) then {
			dictionary <integer, integer> entry := {cId:0};
			statusToContextCtr.add(key, entry);
		}
		else {
			if not statusToContextCtr[key].hasKey(cId) then {
				statusToContextCtr[key].add(cId, 0);
				
			}
		}
		statusToContextCtr[key][cId] := statusToContextCtr[key][cId] + 1;
		
		// manage eventRouter
		if not eventRouter.hasKey(key) then {
			sequence < context > entry := [];
			eventRouter.add(key, entry);
			addListener(key);
		}
		// look up context in the symbol
		if (eventRouter[key].indexOf(evt.instanceContext) = -1) then {
			eventRouter[key].append(evt.instanceContext);
		}

		route evt.subscribe;
	}

	action unsubscribeEventHandler(UnsubscribeStatusToContext evt) {
		
		// SubscribeStatus type for the "key" variable is only for the purposes of matching with the dictionary type 
		SubscribeStatus key := SubscribeStatus(evt.unsubscribe.serviceID, evt.unsubscribe.object, 
							   evt.unsubscribe.subServiceID, evt.unsubscribe.connection);
		
		integer cId := evt.instanceContext.getId();
		
		// manage statusToContextCtr
		if ((not statusToContextCtr.hasKey(key)) or 
			(not statusToContextCtr[key].hasKey(cId))) then {
			log "unsubscribeEventHandler: unexpected UnsubscribeStatusToContext received for (key=" + 
				key.toString() + ", contextId=" + cId.toString() + ")" at WARN;
		}
		else {
			statusToContextCtr[key][cId] := statusToContextCtr[key][cId] - 1;
			if (statusToContextCtr[key][cId] = 0) then {
				statusToContextCtr[key].remove(cId);
				integer i := eventRouter[key].indexOf(evt.instanceContext);
				if (i != -1) then {
					eventRouter[key].remove(i);
				}
			}
			if (statusToContextCtr[key].size() = 0) then {
				eventRouter.remove(key);
				removeListener(key);
			}
		}

		route evt.unsubscribe;
	}
	
	action addListener(SubscribeStatus evt) {
		listener dl, el;

		Status d;
		dl := on all Status(serviceID=evt.serviceID, object=evt.object, subServiceID=evt.subServiceID, connection=evt.connection):d {
			send d to eventRouter[evt];
		}
		if statusListeners.hasKey(evt) then {
			log "[action addListener] statusListeners already contains a listener for entry " + evt.toString() at WARN;
		}
		else {
			statusListeners.add(evt, dl);
		}
		
		StatusError e;
		el := on all StatusError(serviceID=evt.serviceID, object=evt.object, subServiceID=evt.subServiceID, connection=evt.connection):e {
			send e to eventRouter[evt];
		}
		if errorListeners.hasKey(evt) then {
			log "[action addListener] errorListeners already contains a listener for entry " + evt.toString() at WARN;
		}
		else {
			errorListeners.add(evt, el);
		}
	}
	
	action removeListener(SubscribeStatus evt) {

		if statusListeners.hasKey(evt) then {
			statusListeners[evt].quit();
			statusListeners.remove(evt);
		}
		else {
			log "[action removeListener] statusListeners does not contain a listener for entry " + evt.toString() at WARN;			
		}
		
		if errorListeners.hasKey(evt) then {
			errorListeners[evt].quit();
			errorListeners.remove(evt);
		}
		else {
			log "[action removeListener] errorListeners does not contain a listener for entry " + evt.toString() at WARN;			
		}
	}
}

 00000032 C:\SoftwareAG\Apama 5.3\monitors\StatusSupport.mon
TIME 0000000e 1444729770.9,1
MONF 0000348d /*
 * Apama Correlator-integrated JMS Status Manager service.
 *
 * Implements the StatusSupport event interface to allow an EPL application to 
 * monitor status information about the status of Correlator-Integrated JMS connections, 
 * senders and receivers.
 * 
 * $Copyright (c) 2012 Progress Software Corporation and/or its subsidiaries and affiliates. All rights reserved.$ 
 * $Copyright (c) 2013 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
 *
 */
package com.apama.correlator.jms;

using com.apama.correlator.jms.JMSConnectionStatus;
using com.apama.correlator.jms.JMSSenderStatus;
using com.apama.correlator.jms.JMSReceiverStatus;
using com.apama.statusreport.Status;
using com.apama.statusreport.StatusError;
using com.apama.statusreport.SubscribeStatus;
using com.apama.statusreport.UnsubscribeStatus;


/**
 * Provides a bridge between the JMS-specific status events and the generic 
 * StatusSupport API used by some Apama applications. 
 *
 * @see com.apama.statusreport.SubscribeStatus Generic StatusSupport 
 * status subscription request that an application may send to SubscribeStatus.CHANNEL.
 * @see com.apama.statusreport.Status Generic StatusSupport 
 * status information sent to the Status channel by this monitor for subscribed 
 * objects.
 */
monitor CorrelatorJMSStatusManager 
{
	dictionary<SubscribeStatus, integer> subs;

	dictionary<string, JMSConnectionStatusPublisher> csPubs;
	dictionary<string, JMSSenderStatusPublisher> ssPubs;
	dictionary<string, JMSReceiverStatusPublisher> rsPubs;

	action onload() 
	{
		// Set up listeners for client requests
		listenForSubscribeStatus();
		listenForUnsubscribeStatus();
	
		// Set up listeners for correlator-jms status events
		listenForNewJmsEntities();
	}

	action ondie()
	{
		//Can't distinguish between abnormal termination and shutdown,
		//so just log a message to indicate termination.
		log "CORRELATOR_JMS status manager has terminated." at INFO;
	}

	action listenForSubscribeStatus()
	{
		monitor.subscribe(SubscribeStatus.CHANNEL);
		SubscribeStatus newSub;
		on all SubscribeStatus("CORRELATOR_JMS", *, *, *):newSub
		{
			if isValidSubscription(newSub) then 
			{
				log "Received status subscription: " + newSub.toString() at INFO;

				if subs.hasKey(newSub) then { subs.add(newSub, subs[newSub] + 1); }
				else { subs.add(newSub, 1); }

				boolean atLeastOneAckSent := false;
				
				JMSConnectionStatusPublisher csPub;
				for csPub in csPubs.values()
				{
					atLeastOneAckSent := csPub.ackMatchingNewSub(newSub) or atLeastOneAckSent;
				}

				JMSSenderStatusPublisher ssPub;
				for ssPub in ssPubs.values()
				{
					atLeastOneAckSent := ssPub.ackMatchingNewSub(newSub) or atLeastOneAckSent;
				}

				JMSReceiverStatusPublisher rsPub;
				for rsPub in rsPubs.values()
				{
					atLeastOneAckSent := rsPub.ackMatchingNewSub(newSub) or atLeastOneAckSent;
				}

				if not atLeastOneAckSent then 
				{
					log "No status events received yet from entities matching subscription: " + newSub.toString() at INFO;
					sequence<string> summaries := [ "UNKNOWN" ];
					dictionary<string,string> extraParams := {};	
					Status status := Status("CORRELATOR_JMS", newSub.object, newSub.subServiceID, newSub.connection, "No status events received yet from entities matching subscription", summaries, false, extraParams);
					send status to Status.CHANNEL; 
				}
			}
		}
	}

	action listenForUnsubscribeStatus() 
	{
		UnsubscribeStatus unsub;
		on all UnsubscribeStatus("CORRELATOR_JMS", *, *, *):unsub
		{
			if isValidUnsubscription(unsub) then
			{
				log "Received status unsubscription: " + unsub.toString() at INFO;
				SubscribeStatus key := SubscribeStatus(unsub.serviceID, unsub.object, unsub.subServiceID, unsub.connection);
	
				if subs.hasKey(key) then
				{
					if subs[key] <= 1 then
					{
						subs.remove(key);	
					}
					else { subs[key] := subs[key] - 1; }
				}
				else
				{
					log "No subscription exists that matches unsubscription: " + unsub.toString() at DEBUG;
				}
			}
		}
	}

	action listenForNewJmsEntities()
	{
		JMSConnectionStatus cs;
		on all JMSConnectionStatus():cs
		{
			if not csPubs.hasKey(cs.connectionId) then
			{
				log "Received connection status from new connection: " + cs.toString() at DEBUG;
				JMSConnectionStatusPublisher csPub := new JMSConnectionStatusPublisher;
				csPub.activate(cs, subs);
				csPubs.add(cs.connectionId, csPub);
			}
		}	

		JMSSenderStatus ss;
		on all JMSSenderStatus():ss
		{
			if not ssPubs.hasKey(ss.connectionId + ":" + ss.senderId) then
			{
				log "Received sender status from new sender: " + ss.toString() at DEBUG;
				JMSSenderStatusPublisher ssPub := new JMSSenderStatusPublisher;
				ssPub.activate(ss, subs);
				ssPubs.add(ss.connectionId + ":" + ss.senderId, ssPub);
			}
		}	

		JMSReceiverStatus rs;
		on all JMSReceiverStatus():rs
		{
			if not rsPubs.hasKey(rs.connectionId + ":" + rs.receiverId) then
			{
				log "Received receiver status from new receiver: " + rs.toString() at DEBUG;
				JMSReceiverStatusPublisher rsPub := new JMSReceiverStatusPublisher;
				rsPub.activate(rs, subs);
				rsPubs.add(rs.connectionId + ":" + rs.receiverId, rsPub);
			}
		}	
	}

	action isValidSubscription(SubscribeStatus sub) returns boolean 
	{ 
		return isValidSubOrUnsub(sub.serviceID, sub.object, sub.subServiceID, sub.connection, "SubscribeStatus", sub.toString()); 
	}	

	action isValidUnsubscription(UnsubscribeStatus unsub) returns boolean 
	{ 
		return isValidSubOrUnsub(unsub.serviceID, unsub.object, unsub.subServiceID, unsub.connection, "UnsubscribeStatus", unsub.toString()); 
	}	

	action isValidSubOrUnsub(string serviceID, string object, string subServiceID, string connection, string requestType, string asString) returns boolean
	{
		string errMsg;
		if serviceID = "CORRELATOR_JMS" then
		{
			if object = "" then
			{
				if not subServiceID = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (subServiceID must be \"\" when object is \"\"): " + asString;	
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}
			}
			else if object = "CONNECTION" then
			{
				if connection = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (connection may not be \"\" when object is \"CONNECTION\"): " + asString;
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}

				if not subServiceID = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (subServiceID must be \"\" when object is \"CONNECTION\"): " + asString;	
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}
			}
			else if object = "SENDER" or object = "RECEIVER" then
			{
				if connection = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (connection may not be \"\" when object is \"" + object + "\"): " + asString;
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}

				if subServiceID = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (subServiceID may not be \"\" when object is \"" + object + "\"): " + asString;	
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}
			}
			else
			{ 
				errMsg := "Invalid CORRELATOR_JMS " + requestType + " (valid values for object field are \"CONNECTION\", \"SENDER\", \"RECEIVER\" or \"\"): " + asString;
				send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
				return false; 
			} 
			
			return true;
		}
		else 
		{ 
			errMsg := "Unexpected request to validate non-CORRELATOR_JMS " + requestType + " (serviceID must be CORRELATOR_JMS): " + asString;
			send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
			return false; 
		}
	}

	event JMSConnectionStatusPublisher
	{
		JMSConnectionStatus current;	
		dictionary<SubscribeStatus, integer> allSubs;
		
		action activate(JMSConnectionStatus cs, dictionary<SubscribeStatus, integer> subs) 
		{
			current := cs;
			allSubs := subs;

			if existsMatchingSub() then { sendStatus(); }

			JMSConnectionStatus update;
			on all JMSConnectionStatus(current.connectionId, *, *, *):update
			{
				current := update;	
				if existsMatchingSub() then { sendStatus(); }	
			}
		}

		action existsMatchingSub() returns boolean 
		{ 
			SubscribeStatus sub;
			for sub in allSubs.keys()
			{
				if matches(sub) then { return true; }
			}
			return false;
		}

		action matches(SubscribeStatus sub) returns boolean
		{
			return (sub.object = "" and (sub.connection = "" or sub.connection = current.connectionId)) or 
	 			(sub.object = "CONNECTION" and sub.connection = current.connectionId);
		}

		action ackMatchingNewSub(SubscribeStatus newSub) returns boolean 
		{ 
			if matches(newSub) then
			{
				sendStatus();
				return true;
			} 
			return false;
		}

		action sendStatus() 
		{
			boolean available := false;
			if (current.status = JMSConnectionStatus.OK) then { available := true; }

			sequence<string> summaries := [ current.status ];
			dictionary<string,string> extraParams := {};	
			Status status := Status("CORRELATOR_JMS", "CONNECTION", "", current.connectionId, current.errorMessage, summaries, available, extraParams);
			send status to Status.CHANNEL;
		}
	}

	event JMSSenderStatusPublisher
	{
		JMSSenderStatus current;	
		dictionary<SubscribeStatus, integer> allSubs;

		action activate(JMSSenderStatus ss, dictionary<SubscribeStatus, integer> subs) 
		{
			current := ss;
			allSubs := subs;

			if existsMatchingSub() then { sendStatus(); }

			JMSSenderStatus update;
			on all JMSSenderStatus(current.connectionId, current.senderId, *, *, *, *, *):update
			{	
				current := update;	
				if existsMatchingSub() then { sendStatus(); }	
			}
		}

		action existsMatchingSub() returns boolean 
		{ 
			SubscribeStatus sub;
			for sub in allSubs.keys()
			{
				if matches(sub) then { return true; }
			}
			return false;
		}

		action matches(SubscribeStatus sub) returns boolean
		{
			return (sub.object = "" and (sub.connection = "" or sub.connection = current.connectionId)) or 
	 			(sub.object = "SENDER" and sub.connection = current.connectionId and sub.subServiceID = current.senderId);
		}

		action ackMatchingNewSub(SubscribeStatus newSub) returns boolean 
		{
			if matches(newSub) then
			{
				sendStatus();
				return true;
			} 
			return false;
		}

		action sendStatus() 
		{
			boolean available := false;
			if (current.status = JMSSenderStatus.OK) then { available := true; }

			sequence<string> summaries := [ current.status ];
			dictionary<string,string> extraParams := {};	
			Status status := Status("CORRELATOR_JMS", "SENDER", current.senderId, current.connectionId, current.errorMessage, summaries, available, extraParams);
			send status to Status.CHANNEL; 
		}
	}

	event JMSReceiverStatusPublisher
	{
		JMSReceiverStatus current;	
		dictionary<SubscribeStatus, integer> allSubs;

		action activate(JMSReceiverStatus rs, dictionary<SubscribeStatus, integer> subs) 
		{
			current := rs;
			allSubs := subs;

			if existsMatchingSub() then { sendStatus(); }
			
			JMSReceiverStatus update;
			on all JMSReceiverStatus(current.connectionId, current.receiverId, *, *, *, *, *, *, *, *, *):update
			{
				current := update;	
				if existsMatchingSub() then { sendStatus(); }	
			}
		}

		action existsMatchingSub() returns boolean 
		{ 
			SubscribeStatus sub;
			for sub in allSubs.keys()
			{
				if matches(sub) then { return true; }
			}
			return false;
		}

		action matches(SubscribeStatus sub) returns boolean
		{
			return (sub.object = "" and (sub.connection = "" or sub.connection = current.connectionId)) or 
	 			(sub.object = "RECEIVER" and sub.connection = current.connectionId and sub.subServiceID = current.receiverId);
		}

		action ackMatchingNewSub(SubscribeStatus newSub) returns boolean 
		{
			if matches(newSub) then
			{
				sendStatus();
				return true;
			} 
			return false;
		}

		action sendStatus() 
		{
			boolean available := false;
			if (current.status = JMSReceiverStatus.OK) then { available := true; }
			log "Sending receiver status report in response to status event: " + current.toString() at DEBUG;

			sequence<string> summaries := [ current.status ];
			dictionary<string,string> extraParams := {};	
			Status status := Status("CORRELATOR_JMS", "RECEIVER", current.receiverId, current.connectionId, current.errorMessage, summaries, available, extraParams);
			send status to Status.CHANNEL;
		}
	}
}
 0000003f C:\SoftwareAG\Apama 5.3\monitors\CorrelatorJMSStatusManager.mon
MONF 00000e5e //*****************************************************************************
// Title:         DashboardSupport.mon
// Description:   Monitor defining events to be sent when a client connects
//                or disconnects from a dashboard.  The monitor also provides
//                multi-context support for the connect/disconnect events.
// Dependencies:  None
// $Copyright(c) 2010 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

package com.apama.dashboard;


event DashboardClientConnected {
	string userName;
	string sessionId;
	dictionary<string,string> extraParams;
}

event DashboardClientDisconnected {
	string userName;
	string sessionId;
	dictionary<string,string> extraParams;
}

// Events to support parallel execution (contexts)

event RegisterContextForDashboardClientConnections {
	context instanceContext;
}

event DeregisterContextForDashboardClientConnections {
	context instanceContext;
}


/**
 * This monitor provides the context forwarders needed to allow
 * the Dashboard connect and disconnect notification events to be sent to
 * the registered contexts.
 * The notifications are always sent to the main context.
 */
monitor DashboardSupport
{
	// Used to persist contexts interested in notifications
	sequence < context > notifyContexts;

	action onload {
		
		log "Loaded Dashboard Client Connect Notification service" at INFO;
		
		// Forwarders to support parallel execution (contexts)
		setupContextForwarders();
		
	}
	
	action setupContextForwarders()
	{

		DashboardClientConnected connect;
		on all DashboardClientConnected(): connect {
			log "Dashboard Client Connected - User:" + connect.userName +
				"  Session:" + connect.sessionId at DEBUG;
			if notifyContexts.size() > 0 then {
				context ctx;
				for ctx in notifyContexts {
					send connect to ctx;
				}
			}
		}

		DashboardClientDisconnected disconnect;
		on all DashboardClientDisconnected(): disconnect {
			log "Dashboard Client Disconnected - User:" + disconnect.userName +
				"  Session:" + disconnect.sessionId at DEBUG;
			if notifyContexts.size() > 0 then {
				context ctx;
				for ctx in notifyContexts {
					send disconnect to ctx;
				}
			}
		}
		
		RegisterContextForDashboardClientConnections regCtx;
		on all RegisterContextForDashboardClientConnections():regCtx registerCtx(regCtx.instanceContext);
	
		DeregisterContextForDashboardClientConnections deregCtx;
		on all DeregisterContextForDashboardClientConnections():deregCtx deregisterCtx(deregCtx.instanceContext);
	}
	
	action registerCtx(context ctx)
	{		
		notifyContexts.append(ctx);
	}

	action deregisterCtx(context ctx)
	{
		if notifyContexts.size() > 0 then {
			integer ctxId := notifyContexts.indexOf(ctx);
			if ctxId >= 0 then {
				notifyContexts.remove(ctxId);
			}
		}
	}

	action ondie() {
		if (notifyContexts.size() != 0) then {
			log "ondie: Dashboard Support service is terminating but there may still be contexts subscribed to dashboard connect events" at ERROR;
		}
		else {
			log "ondie: Dashboard Support service is terminating" at INFO;
		}
	}

	action onunload {
		log "Unloaded Dashboard Support service" at INFO;
	}


}
 00000035 C:\SoftwareAG\Apama 5.3\monitors\DashboardSupport.mon
MONF 00000529 //*****************************************************************************
// Title:       ScenarioDeleterSupport
// Description: Provides event definitions for deleting Scenario instances. 
//
// Revision:    $Id: ScenarioDeleterSupport.mon 228871 2014-06-09 10:43:32Z matj $
//
// $Copyright(c) 2004-2005, 2008-2009 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

package com.apama.scenarios;

event DeleteAllScenarios {
	constant string CHANNEL := "ScenarioDeleter";
}

event DeleteScenariosByUser {
	string owner;
}

monitor ScenarioDeleterSupport {
	
	action onload() {
		
		DeleteAllScenarios deleteAll;
		on all DeleteAllScenarios():deleteAll {
			send deleteAll to DeleteAllScenarios.CHANNEL;
		}
		
		DeleteScenariosByUser deleteByUser;
		on all DeleteScenariosByUser():deleteByUser {
			send deleteByUser to DeleteAllScenarios.CHANNEL;
		}
	}
	
} 0000004c C:\SoftwareAG\Apama 5.3\monitors\scenario_support\ScenarioDeleterSupport.mon
MONF 000003b9 //*****************************************************************************
// Title:         SensorEvents
// Description:   SensorEvents description
// Dependencies:  None
// Author:        ydhimate
//
//*****************************************************************************

package com.prosoftgroup.klgame;

event AddSensor {
	string	sensorName;
}

event UserObject {
	string	userId;
	string	name;
	string	beaconId;
	string	regionLabel;
	string	timestamp;
	string	eventType;
}

event HelloWorld {
	string message;
}

event IWStatus {
	string iwstatus;
	string destination;
}

event IWRegion {
	string iwregion;
	string destination;
}

event IWCustomer {
	string iwcustomer;
	string destination;
}

event RegionCount {
	string regionLabel;
	integer count;
}

event UserCount {
	string userId;
	string name;
	integer count;
}

event DummyEvent {
	string	userId;
	string	name;

}


 0000005d C:\SoftwareAG\ApamaWork_5.3\studio_workspace\Prosoft_IW2015\eventdefinitions\SensorEvents.mon
MONF 00000818 //*****************************************************************************
//Title:         SensorSimulators
//Description:   SensorSimulators description
//Dependencies:  None
//Author:        ydhimate

//*****************************************************************************

package com.prosoftgroup.klgame; 

//TODO: Monitors and event definitions here

monitor SensorSimulator{

	sequence<string>  users := ["Carolyn Smith","James Walker","Erin Doe","Chris Bean","Annie Hall", "Shawn Adams"];
	sequence<string>  regions := ["Terracotta", "Natural", "GCS", 
	                              "Meet the Experts", "Registration Desk", "General Entrance", 
	                              "Prosoft Booth", "Prosoft Booth", "Prosoft Booth",
	                              "Showcase Entrance", "Prosoft Booth", "Prosoft Booth"];
	string user;
	string userId;
	string  currentHall;
	boolean toggleHall := false;
		
	action onload() {
		DummyEvent dummy;
		on DummyEvent() :dummy {
			log dummy.toString();
			string s;
			for s in users {
				user := s;
				userId := (users.indexOf(user) + 90).toString();
				spawn simulationHandler();
			}
		}
	}


	action simulationHandler() {

		string	beaconId:="Beacon";
		string	regionLabel;
		string	timestamp:="";
		string	eventType:="";
		// Set initial values 
		integer randomWait;
		integer randomHall;
		integer waitTime;
		randomWait := 10;
		waitTime := randomWait.rand()*10;

		if waitTime = 0 then { waitTime := 10; }
		// Randomly fluctuate values for random seconds
		on all wait (waitTime.toFloat()) {
			randomHall := 12;
			regionLabel := regions[randomHall.rand()]; 
			if toggleHall = false then {
				currentHall := regionLabel;
				toggleHall := true;
			}
			else {
				regionLabel := currentHall;
				toggleHall := false;
			}
			
		//	print (toggleHall.toString() + "|" + waitTime.toString() + "|" + userId + "|" + user + "|" + regionLabel);
			
			route UserObject(userId,user,beaconId,regionLabel,timestamp,eventType);
		}

	}
} 00000059 C:\SoftwareAG\ApamaWork_5.3\studio_workspace\Prosoft_IW2015\monitors\SensorSimulators.mon
MONF 000025a7 //*****************************************************************************
// Title:         SensorMonitors
// Description:   SensorMonitors description
// Dependencies:  None
// Author:        ydhimate
//
//*****************************************************************************

package com.prosoftgroup.klgame; 
using com.apama.correlator.jms.JMS;
using com.apama.aggregates.count;

// TODO: Monitors and event definitions here

monitor SensorMonitors {
	
	JMS jms;
	sequence <string> names;
	UserObject userObject;
	UserObject idleObject;
	UserObject staticObject;
	float regionEntryTime := 0.0;
	float timeInRegion := 0.0;
	string currentRegion := "";
	float dealTime := 0.0;
	string status := "In Transit";
	string dealRemark := "Customer moving to another region";
	
	constant float IDLE_TRIGGER := 30.0;
	constant float DEAL_TRIGGER := 60.0;
	constant float DEAL_WAIT := 3600.0;
	constant float REGION_HISTORY := 3600.0;
	constant float STATUS_DELETE := 1800.0;
	
	action onload() {
		 
		on all UserObject() : userObject {
			integer index;
			index := names.indexOf(userObject.userId);
			
			if index = -1 then{

				names.append(userObject.userId);
				spawn sensorHandler (userObject.userId, userObject.name);
				route userObject;
			}
			
		}
		
		stream <UserObject> regionStream := all UserObject();
		
		UserObject region;
		RegionCount rcount;
		from region in regionStream within REGION_HISTORY
		  group by region.regionLabel
		  select RegionCount(region.regionLabel, count()):rcount {
			emit IWRegion(rcount.regionLabel + "|" + rcount.count.toString(), 
			              "topic:IWRegion") to "jms:UniversalMessaging-default-sender"; 
			//print "Count for region " + rcount.regionLabel + " - " + rcount.count.toString(); 
		}
		
//		UserObject user;
//		UserCount ucount;
		
//		from user in regionStream 
//		  partition by user.regionLabel within 3600.0
//		  group by user.userId, user.regionLabel
//		  select UserCount(user.regionLabel, user.userId, count()):ucount {
//			print "Count for user " + ucount.name + " - " + ucount.count.toString(); 
//		}
		
		jms.onApplicationInitialized();
		
		emit HelloWorld("Prosoft IW Demo: Refresh the tables") to "jms:UniversalMessaging-default-sender";
		
		route DummyEvent("Prosoft IW Demo", "Refresh complete" );
	
	
	}
	
	action sensorHandler (string id, string uname) {
		UserObject sensorObject;
		
		integer lastCount;
		integer idleCount;
		integer staticCount;
		boolean sendDeal := false;
		
		
		stream <UserObject> userStream := all UserObject(userId = id);
		
		from userObject in userStream within STATUS_DELETE
		  select count():lastCount {
			
			if lastCount = 0 then {
				
				emit IWStatus(userObject.userId + "|" 
				                + userObject.name + "|"
				                + currentRegion + "|" 
				                + status + "|"
				                + dealRemark + "|"
				                + sendDeal.toString() + "|"
				              + "delete" + "|"
				              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
		
				
			}
		}
		
		from idleObject in userStream within IDLE_TRIGGER 
		  select count(): idleCount {
			
			//print "IDLE OBJECT :" +idleCount.toString();
			if idleCount = 0 then {
				timeInRegion := currentTime - regionEntryTime;
				
				if timeInRegion >= DEAL_TRIGGER then {
					if dealTime = 0.0 then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := " Deal sent to " + uname; 
					
					}
					else if (currentTime - dealTime) > DEAL_WAIT then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := "Deal sent to " + uname;
					}
					else {
						sendDeal := false;
						dealRemark := "Deal already sent. Wait for the next deal for " + uname;
					}
				}
				
				
				//print "IDLE OBJECT :" + timeInRegion.toString();
				if (timeInRegion >= IDLE_TRIGGER and timeInRegion < DEAL_TRIGGER) then {
					status := "Idle";
					dealRemark := "Customer not moving";
				}
				else if (timeInRegion < IDLE_TRIGGER) then {
					status := "In Transit";
					dealRemark := "Customer moving to another region";
				}
				else if (timeInRegion >= DEAL_TRIGGER) then {
					status := "Stationary";
				}
			
				emit IWStatus(id + "|" 
				                + uname + "|"
				                + currentRegion + "|" 
				                + status + "|"
				                + dealRemark + "|"
				                + sendDeal.toString() + "|"
				              + "add" + "|"
				              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";

			}
		}
		
		
		
		from idleObject in userStream within DEAL_TRIGGER 
		  select count(): staticCount {
			
			//print "STATIC OBJECT :" +staticCount.toString(); 
			if staticCount = 0 then {
				timeInRegion := currentTime - regionEntryTime;
				
				if timeInRegion >= DEAL_TRIGGER then {
					if dealTime = 0.0 then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := " Deal sent to " + uname; 
					
					}
					else if (currentTime - dealTime) > DEAL_WAIT then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := "Deal sent to " + uname;
					}
					else {
						sendDeal := false;
						dealRemark := "Deal already sent. Wait for the next deal for " + uname;
					}
				}
				
				//print "STATIC OBJECT :" + timeInRegion.toString();
				
				if (timeInRegion >= IDLE_TRIGGER and timeInRegion < DEAL_TRIGGER) then {
					status := "Idle";
					dealRemark := "Customer not moving";
				}
				else if (timeInRegion < IDLE_TRIGGER) then {
					status := "In Transit";
					dealRemark := "Customer moving to another region";
				}
				else if (timeInRegion >= DEAL_TRIGGER) then {
					status := "Stationary";
				}
			
				emit IWStatus(id + "|" 
				                + uname + "|"
				                + currentRegion + "|" 
				                + status + "|"
				                + dealRemark + "|"
				                + sendDeal.toString() + "|"
				              + "add" + "|"
				              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
			
			}
		}
		
		
		
		on all UserObject(userId=id) : sensorObject {
			
			//log "Received event " + sensorObject.toString();
			
			if currentRegion = "" then {
				currentRegion := sensorObject.regionLabel;
			}
			
			if currentRegion = sensorObject.regionLabel then {
				if regionEntryTime = 0.0 then {
					regionEntryTime := currentTime;
				}
				
				timeInRegion := currentTime - regionEntryTime;
				
				if timeInRegion >= DEAL_TRIGGER then {
					if dealTime = 0.0 then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := " Deal sent to " + sensorObject.name; 
					
					}
					else if (currentTime - dealTime) > DEAL_WAIT then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := "Deal sent to " + sensorObject.name;
					}
					else {
						sendDeal := false;
						dealRemark := "Deal already sent. Wait for the next deal for " + sensorObject.name;
					}
				}
				
				
				if (timeInRegion >= IDLE_TRIGGER and timeInRegion < DEAL_TRIGGER) then {
					status := "Idle";
					dealRemark := "Customer not moving";
				}
				else if (timeInRegion < IDLE_TRIGGER) then {
					status := "In Transit";
					dealRemark := "Customer moving to another region";
				}
				else if (timeInRegion >= DEAL_TRIGGER) then {
					status := "Stationary";
				}
			} 
			else {
				currentRegion := sensorObject.regionLabel;
				regionEntryTime := currentTime;
				timeInRegion := currentTime - regionEntryTime;
				status := "In Transit";
				dealRemark := "Customer moving to another region";
				dealTime := 0.0;
			}
			
//			print 	"Region Entry Time " + regionEntryTime.toString() + 
//			" Region Time " + timeInRegion.toString()+
//			" Current Region " + currentRegion + 
//			" Deal time " + dealTime.toString() + 
//			" Status " + status;
//			
			emit IWStatus(sensorObject.userId + "|" 
			                + sensorObject.name + "|"
			                + currentRegion + "|" 
			                + status + "|"
			                + dealRemark + "|"
			                + sendDeal.toString() + "|"
			              + "add" + "|" 
			              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
			
	
		}
	
		on all wait (13.0) {
			
			timeInRegion := currentTime - regionEntryTime;

			
			if timeInRegion >= DEAL_TRIGGER then {
				if dealTime = 0.0 then {
					sendDeal := true;
					dealTime := currentTime;
					
					dealRemark := " Deal sent to " + uname; 
				
				}
				else if (currentTime - dealTime) > DEAL_WAIT then {
					sendDeal := true;
					dealTime := currentTime;
					
					dealRemark := "Deal sent to " + uname;
				}
				else {
					sendDeal := false;
					dealRemark := "Deal already sent. Wait for the next deal for " + uname;
				}
			}
			
			
			emit IWStatus(id + "|" 
			                + uname + "|"
			                + currentRegion + "|" 
			                + status + "|"
			                + dealRemark + "|"
			                + sendDeal.toString() + "|"
			              + "add" + "|" + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
	
	
		}		
	}
} 00000057 C:\SoftwareAG\ApamaWork_5.3\studio_workspace\Prosoft_IW2015\monitors\SensorMonitors.mon
DISC 0000003c 6795184426424404343:6961106315128015223 from 127.0.0.1:58606
TIME 0000000c 1444729771,1
EVNT 00000052 0 "",com.apama.correlator.jms.JMSConnectionStatus("UniversalMessaging","OK","",{})
EVNT 000000bb 0 "",com.apama.correlator.jms.JMSReceiverStatus("UniversalMessaging","UniversalMessaging-receiver-InnovationWorld","CONNECTING","",{},"topic:InnovationWorld","BEST_EFFORT","","",false,{})
EVNT 00000083 0 "",com.apama.correlator.jms.JMSSenderStatus("UniversalMessaging","UniversalMessaging-default-sender","OK","",{},"BEST_EFFORT",{})
EVNT 000000b3 0 "",com.apama.correlator.jms.JMSReceiverStatus("UniversalMessaging","UniversalMessaging-receiver-InnovationWorld","OK","",{},"topic:InnovationWorld","BEST_EFFORT","","",false,{})
CONN 0000003c 6961121953104791927:6961123370444261751 from 127.0.0.1:58622
TIME 0000000e 1444729775.1,1
TIME 0000000e 1444729775.3,1
EVNT 0000007a 6961121953104791927 "",com.apama.scenario.RequestScenarios("com.apama.scenario.private_6961126248072481144_1444729775174")
TIME 0000000e 1444729779.4,1
DISC 0000003c 6961121953104791927:6961123370444261751 from 127.0.0.1:58622
TIME 0000000e 1444729780.9,1
TIME 0000000e 1444729790.9,1
TIME 0000000e 1444729793.9,1
TIME 0000000e 1444729800.9,1
TIME 0000000e 1444729803.9,1
TIME 0000000e 1444729806.9,1
TIME 0000000e 1444729810.9,1
TIME 0000000e 1444729813.9,1
TIME 0000000e 1444729816.9,1
TIME 0000000e 1444729819.9,1
TIME 0000000e 1444729820.9,1
TIME 0000000e 1444729823.9,1
TIME 0000000e 1444729826.9,1
TIME 0000000e 1444729829.9,1
TIME 0000000e 1444729830.9,1
TIME 0000000e 1444729832.9,1
TIME 0000000e 1444729836.9,1
TIME 0000000e 1444729839.9,1
TIME 0000000e 1444729840.9,1
TIME 0000000e 1444729842.9,1
TIME 0000000e 1444729845.9,1
TIME 0000000e 1444729849.9,1
TIME 0000000e 1444729850.9,1
TIME 0000000e 1444729852.9,1
TIME 0000000e 1444729855.9,1
TIME 0000000e 1444729858.9,1
TIME 0000000e 1444729860.9,1
TIME 0000000e 1444729862.9,1
TIME 0000000e 1444729863.9,1
TIME 0000000e 1444729865.9,1
TIME 0000000e 1444729868.9,1
TIME 0000000e 1444729870.9,1
TIME 0000000e 1444729871.9,1
TIME 0000000e 1444729875.9,1
TIME 0000000e 1444729876.9,1
TIME 0000000e 1444729878.9,1
TIME 0000000e 1444729880.9,1
TIME 0000000e 1444729881.9,1
TIME 0000000e 1444729884.9,1
TIME 0000000e 1444729888.9,1
TIME 0000000e 1444729889.9,1
TIME 0000000e 1444729890.9,1
TIME 0000000e 1444729891.9,1
TIME 0000000e 1444729894.9,1
TIME 0000000e 1444729897.9,1
TIME 0000000e 1444729900.9,1
TIME 0000000e 1444729901.9,1
TIME 0000000e 1444729902.9,1
TIME 0000000e 1444729904.9,1
TIME 0000000e 1444729907.9,1
TIME 0000000e 1444729910.9,1
TIME 0000000e 1444729914.9,1
TIME 0000000e 1444729915.9,1
TIME 0000000e 1444729917.9,1
TIME 0000000e 1444729920.9,1
TIME 0000000e 1444729923.9,1
TIME 0000000e 1444729927.9,1
TIME 0000000e 1444729928.9,1
TIME 0000000e 1444729930.9,1
TIME 0000000e 1444729933.9,1
TIME 0000000e 1444729936.9,1
TIME 0000000e 1444729940.9,1
TIME 0000000e 1444729941.9,1
TIME 0000000e 1444729943.9,1
TIME 0000000e 1444729946.9,1
TIME 0000000e 1444729949.9,1
TIME 0000000e 1444729950.9,1
TIME 0000000e 1444729953.9,1
TIME 0000000e 1444729954.9,1
TIME 0000000e 1444729956.9,1
TIME 0000000e 1444729959.9,1
TIME 0000000e 1444729960.9,1
TIME 0000000e 1444729962.9,1
TIME 0000000e 1444729966.9,1
TIME 0000000e 1444729967.9,1
TIME 0000000e 1444729969.9,1
TIME 0000000e 1444729970.9,1
TIME 0000000e 1444729972.9,1
TIME 0000000e 1444729975.9,1
TIME 0000000e 1444729979.9,1
TIME 0000000e 1444729980.9,1
TIME 0000000e 1444729982.9,1
TIME 0000000e 1444729985.9,1
TIME 0000000e 1444729988.9,1
TIME 0000000e 1444729990.9,1
TIME 0000000e 1444729992.9,1
TIME 0000000e 1444729993.9,1
TIME 0000000e 1444729995.9,1
TIME 0000000e 1444729998.9,1
TIME 0000000e 1444730000.9,1
TIME 0000000e 1444730001.9,1
TIME 0000000e 1444730005.9,1
TIME 0000000e 1444730006.9,1
TIME 0000000e 1444730008.9,1
TIME 0000000e 1444730010.9,1
TIME 0000000e 1444730011.9,1
TIME 0000000e 1444730014.9,1
TIME 0000000e 1444730018.9,1
TIME 0000000e 1444730019.9,1
TIME 0000000e 1444730020.9,1
TIME 0000000e 1444730021.9,1
TIME 0000000e 1444730024.9,1
TIME 0000000e 1444730027.9,1
TIME 0000000e 1444730030.9,1
TIME 0000000e 1444730031.9,1
TIME 0000000e 1444730032.9,1
TIME 0000000e 1444730034.9,1
TIME 0000000e 1444730037.9,1
TIME 0000000e 1444730040.9,1
TIME 0000000e 1444730044.9,1
TIME 0000000e 1444730045.9,1
TIME 0000000e 1444730047.9,1
TIME 0000000e 1444730050.9,1
TIME 0000000e 1444730053.9,1
TIME 0000000e 1444730057.9,1
TIME 0000000e 1444730058.9,1
TIME 0000000e 1444730060.9,1
TIME 0000000e 1444730063.9,1
TIME 0000000e 1444730066.9,1
TIME 0000000e 1444730070.9,1
TIME 0000000e 1444730071.9,1
TIME 0000000e 1444730073.9,1
TIME 0000000e 1444730076.9,1
TIME 0000000e 1444730079.9,1
TIME 0000000e 1444730080.9,1
TIME 0000000e 1444730083.9,1
TIME 0000000e 1444730084.9,1
TIME 0000000e 1444730086.9,1
TIME 0000000e 1444730089.9,1
TIME 0000000e 1444730090.9,1
TIME 0000000e 1444730092.9,1
TIME 0000000e 1444730096.9,1
TIME 0000000e 1444730097.9,1
TIME 0000000e 1444730099.9,1
TIME 0000000e 1444730100.9,1
TIME 0000000e 1444730102.9,1
TIME 0000000e 1444730105.9,1
TIME 0000000e 1444730109.9,1
TIME 0000000e 1444730110.9,1
TIME 0000000e 1444730112.9,1
TIME 0000000e 1444730115.9,1
TIME 0000000e 1444730118.9,1
TIME 0000000e 1444730120.9,1
TIME 0000000e 1444730122.9,1
TIME 0000000e 1444730123.9,1
TIME 0000000e 1444730125.9,1
TIME 0000000e 1444730128.9,1
TIME 0000000e 1444730130.9,1
TIME 0000000e 1444730131.9,1
TIME 0000000e 1444730135.9,1
TIME 0000000e 1444730136.9,1
TIME 0000000e 1444730138.9,1
TIME 0000000e 1444730140.9,1
TIME 0000000e 1444730141.9,1
TIME 0000000e 1444730144.9,1
TIME 0000000e 1444730148.9,1
TIME 0000000e 1444730149.9,1
TIME 0000000e 1444730150.9,1
TIME 0000000e 1444730151.9,1
TIME 0000000e 1444730154.9,1
TIME 0000000e 1444730157.9,1
TIME 0000000e 1444730160.9,1
TIME 0000000e 1444730161.9,1
TIME 0000000e 1444730162.9,1
TIME 0000000e 1444730164.9,1
TIME 0000000e 1444730167.9,1
TIME 0000000e 1444730170.9,1
TIME 0000000e 1444730174.9,1
TIME 0000000e 1444730175.9,1
TIME 0000000e 1444730177.9,1
TIME 0000000e 1444730180.9,1
TIME 0000000e 1444730183.9,1
TIME 0000000e 1444730187.9,1
TIME 0000000e 1444730188.9,1
TIME 0000000e 1444730190.9,1
TIME 0000000e 1444730193.9,1
TIME 0000000e 1444730196.9,1
TIME 0000000e 1444730200.9,1
TIME 0000000e 1444730201.9,1
TIME 0000000e 1444730203.9,1
TIME 0000000e 1444730206.9,1
TIME 0000000e 1444730209.9,1
TIME 0000000e 1444730210.9,1
TIME 0000000e 1444730213.9,1
TIME 0000000e 1444730214.9,1
TIME 0000000e 1444730216.9,1
TIME 0000000e 1444730219.9,1
TIME 0000000e 1444730220.9,1
TIME 0000000e 1444730222.9,1
TIME 0000000e 1444730226.9,1
TIME 0000000e 1444730227.9,1
TIME 0000000e 1444730229.9,1
TIME 0000000e 1444730230.9,1
TIME 0000000e 1444730232.9,1
TIME 0000000e 1444730235.9,1
TIME 0000000e 1444730239.9,1
TIME 0000000e 1444730240.9,1
TIME 0000000e 1444730242.9,1
TIME 0000000e 1444730245.9,1
TIME 0000000e 1444730248.9,1
TIME 0000000e 1444730250.9,1
TIME 0000000e 1444730252.9,1
TIME 0000000e 1444730253.9,1
TIME 0000000e 1444730255.9,1
TIME 0000000e 1444730258.9,1
TIME 0000000e 1444730260.9,1
TIME 0000000e 1444730261.9,1
TIME 0000000e 1444730265.9,1
TIME 0000000e 1444730266.9,1
TIME 0000000e 1444730268.9,1
TIME 0000000e 1444730270.9,1
TIME 0000000e 1444730271.9,1
TIME 0000000e 1444730274.9,1
TIME 0000000e 1444730278.9,1
TIME 0000000e 1444730279.9,1
TIME 0000000e 1444730280.9,1
TIME 0000000e 1444730281.9,1
TIME 0000000e 1444730284.9,1
TIME 0000000e 1444730287.9,1
TIME 0000000e 1444730290.9,1
TIME 0000000e 1444730291.9,1
TIME 0000000e 1444730292.9,1
TIME 0000000e 1444730294.9,1
TIME 0000000e 1444730297.9,1
TIME 0000000e 1444730300.9,1
TIME 0000000e 1444730304.9,1
TIME 0000000e 1444730305.9,1
TIME 0000000e 1444730307.9,1
TIME 0000000e 1444730310.9,1
TIME 0000000e 1444730313.9,1
TIME 0000000e 1444730317.9,1
TIME 0000000e 1444730318.9,1
TIME 0000000e 1444730320.9,1
TIME 0000000e 1444730323.9,1
TIME 0000000e 1444730326.9,1
TIME 0000000e 1444730330.9,1
TIME 0000000e 1444730331.9,1
TIME 0000000e 1444730333.9,1
TIME 0000000e 1444730336.9,1
TIME 0000000e 1444730339.9,1
TIME 0000000e 1444730340.9,1
TIME 0000000e 1444730343.9,1
TIME 0000000e 1444730344.9,1
TIME 0000000e 1444730346.9,1
TIME 0000000e 1444730349.9,1
TIME 0000000e 1444730350.9,1
TIME 0000000e 1444730352.9,1
TIME 0000000e 1444730356.9,1
TIME 0000000e 1444730357.9,1
TIME 0000000e 1444730359.9,1
TIME 0000000e 1444730360.9,1
TIME 0000000e 1444730362.9,1
TIME 0000000e 1444730365.9,1
TIME 0000000e 1444730369.9,1
TIME 0000000e 1444730370.9,1
TIME 0000000e 1444730372.9,1
TIME 0000000e 1444730375.9,1
TIME 0000000e 1444730378.9,1
TIME 0000000e 1444730380.9,1
TIME 0000000e 1444730382.9,1
TIME 0000000e 1444730383.9,1
TIME 0000000e 1444730385.9,1
TIME 0000000e 1444730388.9,1
TIME 0000000e 1444730390.9,1
TIME 0000000e 1444730391.9,1
TIME 0000000e 1444730395.9,1
TIME 0000000e 1444730396.9,1
TIME 0000000e 1444730398.9,1
TIME 0000000e 1444730400.9,1
TIME 0000000e 1444730401.9,1
TIME 0000000e 1444730404.9,1
TIME 0000000e 1444730408.9,1
TIME 0000000e 1444730409.9,1
TIME 0000000e 1444730410.9,1
TIME 0000000e 1444730411.9,1
TIME 0000000e 1444730414.9,1
TIME 0000000e 1444730417.9,1
TIME 0000000e 1444730420.9,1
TIME 0000000e 1444730421.9,1
TIME 0000000e 1444730422.9,1
TIME 0000000e 1444730424.9,1
TIME 0000000e 1444730427.9,1
TIME 0000000e 1444730430.9,1
TIME 0000000e 1444730434.9,1
TIME 0000000e 1444730435.9,1
TIME 0000000e 1444730437.9,1
TIME 0000000e 1444730440.9,1
TIME 0000000e 1444730443.9,1
TIME 0000000e 1444730447.9,1
TIME 0000000e 1444730448.9,1
TIME 0000000e 1444730450.9,1
TIME 0000000e 1444730453.9,1
TIME 0000000e 1444730456.9,1
TIME 0000000e 1444730460.9,1
TIME 0000000e 1444730461.9,1
TIME 0000000e 1444730463.9,1
TIME 0000000e 1444730466.9,1
TIME 0000000e 1444730469.9,1
TIME 0000000e 1444730470.9,1
TIME 0000000e 1444730473.9,1
TIME 0000000e 1444730474.9,1
TIME 0000000e 1444730476.9,1
TIME 0000000e 1444730479.9,1
TIME 0000000e 1444730480.9,1
TIME 0000000e 1444730482.9,1
TIME 0000000e 1444730486.9,1
TIME 0000000e 1444730487.9,1
TIME 0000000e 1444730489.9,1
TIME 0000000e 1444730490.9,1
TIME 0000000e 1444730492.9,1
TIME 0000000e 1444730495.9,1
TIME 0000000e 1444730499.9,1
TIME 0000000e 1444730500.9,1
TIME 0000000e 1444730502.9,1
TIME 0000000e 1444730505.9,1
TIME 0000000e 1444730508.9,1
TIME 0000000e 1444730510.9,1
TIME 0000000e 1444730512.9,1
TIME 0000000e 1444730513.9,1
TIME 0000000e 1444730515.9,1
TIME 0000000e 1444730518.9,1
TIME 0000000e 1444730520.9,1
TIME 0000000e 1444730521.9,1
TIME 0000000e 1444730525.9,1
TIME 0000000e 1444730526.9,1
TIME 0000000e 1444730528.9,1
TIME 0000000e 1444730530.9,1
TIME 0000000e 1444730531.9,1
TIME 0000000e 1444730534.9,1
TIME 0000000e 1444730538.9,1
TIME 0000000e 1444730539.9,1
TIME 0000000e 1444730540.9,1
TIME 0000000e 1444730541.9,1
TIME 0000000e 1444730544.9,1
TIME 0000000e 1444730547.9,1
TIME 0000000e 1444730550.9,1
TIME 0000000e 1444730551.9,1
TIME 0000000e 1444730552.9,1
TIME 0000000e 1444730554.9,1
TIME 0000000e 1444730557.9,1
TIME 0000000e 1444730560.9,1
TIME 0000000e 1444730564.9,1
TIME 0000000e 1444730565.9,1
TIME 0000000e 1444730567.9,1
TIME 0000000e 1444730570.9,1
TIME 0000000e 1444730573.9,1
TIME 0000000e 1444730577.9,1
TIME 0000000e 1444730578.9,1
TIME 0000000e 1444730580.9,1
TIME 0000000e 1444730583.9,1
TIME 0000000e 1444730586.9,1
TIME 0000000e 1444730590.9,1
TIME 0000000e 1444730591.9,1
TIME 0000000e 1444730593.9,1
TIME 0000000e 1444730596.9,1
TIME 0000000e 1444730599.9,1
TIME 0000000e 1444730600.9,1
TIME 0000000e 1444730603.9,1
TIME 0000000e 1444730604.9,1
TIME 0000000e 1444730606.9,1
TIME 0000000e 1444730609.9,1
TIME 0000000e 1444730610.9,1
TIME 0000000e 1444730612.9,1
TIME 0000000e 1444730616.9,1
TIME 0000000e 1444730617.9,1
TIME 0000000e 1444730619.9,1
TIME 0000000e 1444730620.9,1
TIME 0000000e 1444730622.9,1
TIME 0000000e 1444730625.9,1
TIME 0000000e 1444730629.9,1
TIME 0000000e 1444730630.9,1
TIME 0000000e 1444730632.9,1
TIME 0000000e 1444730635.9,1
TIME 0000000e 1444730638.9,1
TIME 0000000e 1444730640.9,1
TIME 0000000e 1444730642.9,1
TIME 0000000e 1444730643.9,1
TIME 0000000e 1444730645.9,1
TIME 0000000e 1444730648.9,1
TIME 0000000e 1444730650.9,1
TIME 0000000e 1444730651.9,1
TIME 0000000e 1444730655.9,1
TIME 0000000e 1444730656.9,1
TIME 0000000e 1444730658.9,1
TIME 0000000e 1444730660.9,1
TIME 0000000e 1444730661.9,1
TIME 0000000e 1444730664.9,1
TIME 0000000e 1444730668.9,1
TIME 0000000e 1444730669.9,1
TIME 0000000e 1444730670.9,1
TIME 0000000e 1444730671.9,1
TIME 0000000e 1444730674.9,1
TIME 0000000e 1444730677.9,1
TIME 0000000e 1444730680.9,1
TIME 0000000e 1444730681.9,1
TIME 0000000e 1444730682.9,1
TIME 0000000e 1444730684.9,1
TIME 0000000e 1444730687.9,1
TIME 0000000e 1444730690.9,1
TIME 0000000e 1444730694.9,1
TIME 0000000e 1444730695.9,1
TIME 0000000e 1444730697.9,1
TIME 0000000e 1444730700.9,1
TIME 0000000e 1444730703.9,1
TIME 0000000e 1444730707.9,1
TIME 0000000e 1444730708.9,1
TIME 0000000e 1444730710.9,1
TIME 0000000e 1444730713.9,1
TIME 0000000e 1444730716.9,1
TIME 0000000e 1444730720.9,1
TIME 0000000e 1444730721.9,1
TIME 0000000e 1444730723.9,1
TIME 0000000e 1444730726.9,1
TIME 0000000e 1444730729.9,1
TIME 0000000e 1444730730.9,1
TIME 0000000e 1444730733.9,1
TIME 0000000e 1444730734.9,1
TIME 0000000e 1444730736.9,1
TIME 0000000e 1444730739.9,1
TIME 0000000e 1444730740.9,1
TIME 0000000e 1444730742.9,1
TIME 0000000e 1444730746.9,1
TIME 0000000e 1444730747.9,1
TIME 0000000e 1444730749.9,1
TIME 0000000e 1444730750.9,1
TIME 0000000e 1444730752.9,1
TIME 0000000e 1444730755.9,1
TIME 0000000e 1444730759.9,1
TIME 0000000e 1444730760.9,1
TIME 0000000e 1444730762.9,1
TIME 0000000e 1444730765.9,1
TIME 0000000e 1444730768.9,1
TIME 0000000e 1444730770.9,1
TIME 0000000e 1444730772.9,1
TIME 0000000e 1444730773.9,1
TIME 0000000e 1444730775.9,1
TIME 0000000e 1444730778.9,1
TIME 0000000e 1444730780.9,1
TIME 0000000e 1444730781.9,1
TIME 0000000e 1444730785.9,1
TIME 0000000e 1444730786.9,1
TIME 0000000e 1444730788.9,1
TIME 0000000e 1444730790.9,1
TIME 0000000e 1444730791.9,1
TIME 0000000e 1444730794.9,1
TIME 0000000e 1444730798.9,1
TIME 0000000e 1444730799.9,1
TIME 0000000e 1444730800.9,1
TIME 0000000e 1444730801.9,1
TIME 0000000e 1444730804.9,1
TIME 0000000e 1444730807.9,1
TIME 0000000e 1444730810.9,1
TIME 0000000e 1444730811.9,1
TIME 0000000e 1444730812.9,1
TIME 0000000e 1444730814.9,1
TIME 0000000e 1444730817.9,1
TIME 0000000e 1444730820.9,1
TIME 0000000e 1444730824.9,1
TIME 0000000e 1444730825.9,1
TIME 0000000e 1444730827.9,1
TIME 0000000e 1444730830.9,1
TIME 0000000e 1444730833.9,1
TIME 0000000e 1444730837.9,1
TIME 0000000e 1444730838.9,1
TIME 0000000e 1444730840.9,1
TIME 0000000e 1444730843.9,1
TIME 0000000e 1444730846.9,1
TIME 0000000e 1444730850.9,1
TIME 0000000e 1444730851.9,1
TIME 0000000e 1444730853.9,1
TIME 0000000e 1444730856.9,1
TIME 0000000e 1444730859.9,1
TIME 0000000e 1444730860.9,1
TIME 0000000e 1444730863.9,1
TIME 0000000e 1444730864.9,1
TIME 0000000e 1444730866.9,1
TIME 0000000e 1444730869.9,1
TIME 0000000e 1444730870.9,1
TIME 0000000e 1444730872.9,1
TIME 0000000e 1444730876.9,1
TIME 0000000e 1444730877.9,1
TIME 0000000e 1444730879.9,1
TIME 0000000e 1444730880.9,1
TIME 0000000e 1444730882.9,1
TIME 0000000e 1444730885.9,1
TIME 0000000e 1444730889.9,1
TIME 0000000e 1444730890.9,1
TIME 0000000e 1444730892.9,1
TIME 0000000e 1444730895.9,1
TIME 0000000e 1444730898.9,1
TIME 0000000e 1444730900.9,1
TIME 0000000e 1444730902.9,1
TIME 0000000e 1444730903.9,1
TIME 0000000e 1444730905.9,1
TIME 0000000e 1444730908.9,1
TIME 0000000e 1444730910.9,1
TIME 0000000e 1444730911.9,1
TIME 0000000e 1444730915.9,1
TIME 0000000e 1444730916.9,1
TIME 0000000e 1444730918.9,1
TIME 0000000e 1444730920.9,1
TIME 0000000e 1444730921.9,1
TIME 0000000e 1444730924.9,1
TIME 0000000e 1444730928.9,1
TIME 0000000e 1444730929.9,1
TIME 0000000e 1444730930.9,1
TIME 0000000e 1444730931.9,1
TIME 0000000e 1444730934.9,1
TIME 0000000e 1444730937.9,1
TIME 0000000e 1444730940.9,1
TIME 0000000e 1444730941.9,1
TIME 0000000e 1444730942.9,1
TIME 0000000e 1444730944.9,1
TIME 0000000e 1444730947.9,1
TIME 0000000e 1444730950.9,1
TIME 0000000e 1444730954.9,1
TIME 0000000e 1444730955.9,1
TIME 0000000e 1444730957.9,1
TIME 0000000e 1444730960.9,1
TIME 0000000e 1444730963.9,1
TIME 0000000e 1444730967.9,1
TIME 0000000e 1444730968.9,1
TIME 0000000e 1444730970.9,1
TIME 0000000e 1444730973.9,1
TIME 0000000e 1444730976.9,1
TIME 0000000e 1444730980.9,1
TIME 0000000e 1444730981.9,1
TIME 0000000e 1444730983.9,1
TIME 0000000e 1444730986.9,1
TIME 0000000e 1444730989.9,1
TIME 0000000e 1444730990.9,1
TIME 0000000e 1444730993.9,1
TIME 0000000e 1444730994.9,1
TIME 0000000e 1444730996.9,1
TIME 0000000e 1444730999.9,1
TIME 0000000e 1444731000.9,1
TIME 0000000e 1444731002.9,1
TIME 0000000e 1444731006.9,1
TIME 0000000e 1444731007.9,1
TIME 0000000e 1444731009.9,1
TIME 0000000e 1444731010.9,1
TIME 0000000e 1444731012.9,1
TIME 0000000e 1444731015.9,1
TIME 0000000e 1444731019.9,1
TIME 0000000e 1444731020.9,1
TIME 0000000e 1444731022.9,1
TIME 0000000e 1444731025.9,1
TIME 0000000e 1444731028.9,1
TIME 0000000e 1444731030.9,1
TIME 0000000e 1444731032.9,1
TIME 0000000e 1444731033.9,1
TIME 0000000e 1444731035.9,1
TIME 0000000e 1444731038.9,1
TIME 0000000e 1444731040.9,1
TIME 0000000e 1444731041.9,1
TIME 0000000e 1444731045.9,1
TIME 0000000e 1444731046.9,1
TIME 0000000e 1444731048.9,1
TIME 0000000e 1444731050.9,1
TIME 0000000e 1444731051.9,1
TIME 0000000e 1444731054.9,1
TIME 0000000e 1444731058.9,1
TIME 0000000e 1444731059.9,1
TIME 0000000e 1444731060.9,1
TIME 0000000e 1444731061.9,1
TIME 0000000e 1444731064.9,1
TIME 0000000e 1444731067.9,1
TIME 0000000e 1444731070.9,1
TIME 0000000e 1444731071.9,1
TIME 0000000e 1444731072.9,1
TIME 0000000e 1444731074.9,1
TIME 0000000e 1444731077.9,1
TIME 0000000e 1444731080.9,1
TIME 0000000e 1444731084.9,1
TIME 0000000e 1444731085.9,1
TIME 0000000e 1444731087.9,1
TIME 0000000e 1444731090.9,1
TIME 0000000e 1444731093.9,1
TIME 0000000e 1444731097.9,1
TIME 0000000e 1444731098.9,1
TIME 0000000e 1444731100.9,1
TIME 0000000e 1444731103.9,1
TIME 0000000e 1444731106.9,1
TIME 0000000e 1444731110.9,1
TIME 0000000e 1444731111.9,1
TIME 0000000e 1444731113.9,1
TIME 0000000e 1444731116.9,1
TIME 0000000e 1444731119.9,1
TIME 0000000e 1444731120.9,1
TIME 0000000e 1444731123.9,1
TIME 0000000e 1444731124.9,1
TIME 0000000e 1444731126.9,1
TIME 0000000e 1444731129.9,1
TIME 0000000e 1444731130.9,1
TIME 0000000e 1444731132.9,1
TIME 0000000e 1444731136.9,1
TIME 0000000e 1444731137.9,1
TIME 0000000e 1444731139.9,1
TIME 0000000e 1444731140.9,1
TIME 0000000e 1444731142.9,1
TIME 0000000e 1444731145.9,1
TIME 0000000e 1444731149.9,1
TIME 0000000e 1444731150.9,1
TIME 0000000e 1444731152.9,1
TIME 0000000e 1444731155.9,1
TIME 0000000e 1444731158.9,1
TIME 0000000e 1444731160.9,1
TIME 0000000e 1444731162.9,1
TIME 0000000e 1444731163.9,1
TIME 0000000e 1444731165.9,1
TIME 0000000e 1444731168.9,1
TIME 0000000e 1444731170.9,1
TIME 0000000e 1444731171.9,1
TIME 0000000e 1444731175.9,1
TIME 0000000e 1444731176.9,1
TIME 0000000e 1444731178.9,1
TIME 0000000e 1444731180.9,1
TIME 0000000e 1444731181.9,1
TIME 0000000e 1444731184.9,1
TIME 0000000e 1444731188.9,1
TIME 0000000e 1444731189.9,1
TIME 0000000e 1444731190.9,1
TIME 0000000e 1444731191.9,1
TIME 0000000e 1444731194.9,1
TIME 0000000e 1444731197.9,1
TIME 0000000e 1444731200.9,1
TIME 0000000e 1444731201.9,1
TIME 0000000e 1444731202.9,1
TIME 0000000e 1444731204.9,1
TIME 0000000e 1444731207.9,1
TIME 0000000e 1444731210.9,1
TIME 0000000e 1444731214.9,1
TIME 0000000e 1444731215.9,1
TIME 0000000e 1444731217.9,1
TIME 0000000e 1444731220.9,1
TIME 0000000e 1444731223.9,1
TIME 0000000e 1444731227.9,1
TIME 0000000e 1444731228.9,1
TIME 0000000e 1444731230.9,1
TIME 0000000e 1444731233.9,1
TIME 0000000e 1444731236.9,1
TIME 0000000e 1444731240.9,1
TIME 0000000e 1444731241.9,1
TIME 0000000e 1444731243.9,1
TIME 0000000e 1444731246.9,1
TIME 0000000e 1444731249.9,1
TIME 0000000e 1444731250.9,1
TIME 0000000e 1444731253.9,1
TIME 0000000e 1444731254.9,1
TIME 0000000e 1444731256.9,1
TIME 0000000e 1444731259.9,1
TIME 0000000e 1444731260.9,1
TIME 0000000e 1444731262.9,1
TIME 0000000e 1444731266.9,1
TIME 0000000e 1444731267.9,1
TIME 0000000e 1444731269.9,1
TIME 0000000e 1444731270.9,1
TIME 0000000e 1444731272.9,1
TIME 0000000e 1444731275.9,1
TIME 0000000e 1444731279.9,1
TIME 0000000e 1444731280.9,1
TIME 0000000e 1444731282.9,1
TIME 0000000e 1444731285.9,1
TIME 0000000e 1444731288.9,1
TIME 0000000e 1444731290.9,1
TIME 0000000e 1444731292.9,1
TIME 0000000e 1444731293.9,1
TIME 0000000e 1444731295.9,1
TIME 0000000e 1444731298.9,1
TIME 0000000e 1444731300.9,1
TIME 0000000e 1444731301.9,1
TIME 0000000e 1444731305.9,1
TIME 0000000e 1444731306.9,1
TIME 0000000e 1444731308.9,1
TIME 0000000e 1444731310.9,1
TIME 0000000e 1444731311.9,1
TIME 0000000e 1444731314.9,1
TIME 0000000e 1444731318.9,1
TIME 0000000e 1444731319.9,1
TIME 0000000e 1444731320.9,1
TIME 0000000e 1444731321.9,1
TIME 0000000e 1444731324.9,1
TIME 0000000e 1444731327.9,1
TIME 0000000e 1444731330.9,1
TIME 0000000e 1444731331.9,1
TIME 0000000e 1444731332.9,1
TIME 0000000e 1444731334.9,1
TIME 0000000e 1444731337.9,1
TIME 0000000e 1444731340.9,1
TIME 0000000e 1444731344.9,1
TIME 0000000e 1444731345.9,1
TIME 0000000e 1444731347.9,1
TIME 0000000e 1444731350.9,1
TIME 0000000e 1444731353.9,1
TIME 0000000e 1444731357.9,1
TIME 0000000e 1444731358.9,1
TIME 0000000e 1444731360.9,1
TIME 0000000e 1444731363.9,1
TIME 0000000e 1444731366.9,1
TIME 0000000e 1444731370.9,1
TIME 0000000e 1444731371.9,1
TIME 0000000e 1444731373.9,1
TIME 0000000e 1444731376.9,1
TIME 0000000e 1444731379.9,1
TIME 0000000e 1444731380.9,1
TIME 0000000e 1444731383.9,1
TIME 0000000e 1444731384.9,1
TIME 0000000e 1444731386.9,1
TIME 0000000e 1444731389.9,1
TIME 0000000e 1444731390.9,1
TIME 0000000e 1444731392.9,1
TIME 0000000e 1444731396.9,1
TIME 0000000e 1444731397.9,1
TIME 0000000e 1444731399.9,1
TIME 0000000e 1444731400.9,1
TIME 0000000e 1444731402.9,1
TIME 0000000e 1444731405.9,1
TIME 0000000e 1444731409.9,1
TIME 0000000e 1444731410.9,1
TIME 0000000e 1444731412.9,1
TIME 0000000e 1444731415.9,1
TIME 0000000e 1444731418.9,1
TIME 0000000e 1444731420.9,1
TIME 0000000e 1444731422.9,1
TIME 0000000e 1444731423.9,1
TIME 0000000e 1444731425.9,1
TIME 0000000e 1444731428.9,1
TIME 0000000e 1444731430.9,1
TIME 0000000e 1444731431.9,1
TIME 0000000e 1444731435.9,1
TIME 0000000e 1444731436.9,1
TIME 0000000e 1444731438.9,1
TIME 0000000e 1444731440.9,1
TIME 0000000e 1444731441.9,1
TIME 0000000e 1444731444.9,1
TIME 0000000e 1444731448.9,1
TIME 0000000e 1444731449.9,1
TIME 0000000e 1444731450.9,1
TIME 0000000e 1444731451.9,1
TIME 0000000e 1444731454.9,1
TIME 0000000e 1444731457.9,1
TIME 0000000e 1444731460.9,1
TIME 0000000e 1444731461.9,1
TIME 0000000e 1444731462.9,1
TIME 0000000e 1444731464.9,1
TIME 0000000e 1444731467.9,1
TIME 0000000e 1444731470.9,1
TIME 0000000e 1444731474.9,1
TIME 0000000e 1444731475.9,1
TIME 0000000e 1444731477.9,1
TIME 0000000e 1444731480.9,1
TIME 0000000e 1444731483.9,1
TIME 0000000e 1444731487.9,1
TIME 0000000e 1444731488.9,1
TIME 0000000e 1444731490.9,1
TIME 0000000e 1444731493.9,1
TIME 0000000e 1444731496.9,1
TIME 0000000e 1444731500.9,1
TIME 0000000e 1444731501.9,1
TIME 0000000e 1444731503.9,1
TIME 0000000e 1444731506.9,1
TIME 0000000e 1444731509.9,1
TIME 0000000e 1444731510.9,1
TIME 0000000e 1444731513.9,1
TIME 0000000e 1444731514.9,1
TIME 0000000e 1444731516.9,1
TIME 0000000e 1444731519.9,1
TIME 0000000e 1444731520.9,1
TIME 0000000e 1444731522.9,1
TIME 0000000e 1444731526.9,1
TIME 0000000e 1444731527.9,1
TIME 0000000e 1444731529.9,1
TIME 0000000e 1444731530.9,1
TIME 0000000e 1444731532.9,1
TIME 0000000e 1444731535.9,1
TIME 0000000e 1444731539.9,1
TIME 0000000e 1444731540.9,1
TIME 0000000e 1444731542.9,1
TIME 0000000e 1444731545.9,1
TIME 0000000e 1444731548.9,1
TIME 0000000e 1444731550.9,1
TIME 0000000e 1444731552.9,1
TIME 0000000e 1444731553.9,1
TIME 0000000e 1444731555.9,1
TIME 0000000e 1444731558.9,1
TIME 0000000e 1444731560.9,1
TIME 0000000e 1444731561.9,1
TIME 0000000e 1444731565.9,1
TIME 0000000e 1444731566.9,1
TIME 0000000e 1444731568.9,1
TIME 0000000e 1444731570.9,1
TIME 0000000e 1444731571.9,1
TIME 0000000e 1444731574.9,1
TIME 0000000e 1444731578.9,1
TIME 0000000e 1444731579.9,1
TIME 0000000e 1444731580.9,1
TIME 0000000e 1444731581.9,1
TIME 0000000e 1444731584.9,1
TIME 0000000e 1444731587.9,1
TIME 0000000e 1444731590.9,1
TIME 0000000e 1444731591.9,1
TIME 0000000e 1444731592.9,1
TIME 0000000e 1444731594.9,1
TIME 0000000e 1444731597.9,1
TIME 0000000e 1444731600.9,1
TIME 0000000e 1444731604.9,1
TIME 0000000e 1444731605.9,1
TIME 0000000e 1444731607.9,1
TIME 0000000e 1444731610.9,1
TIME 0000000e 1444731613.9,1
TIME 0000000e 1444731617.9,1
TIME 0000000e 1444731618.9,1
TIME 0000000e 1444731620.9,1
TIME 0000000e 1444731623.9,1
TIME 0000000e 1444731626.9,1
TIME 0000000e 1444731630.9,1
TIME 0000000e 1444731631.9,1
TIME 0000000e 1444731633.9,1
TIME 0000000e 1444731636.9,1
TIME 0000000e 1444731639.9,1
TIME 0000000e 1444731640.9,1
TIME 0000000e 1444731643.9,1
TIME 0000000e 1444731644.9,1
TIME 0000000e 1444731646.9,1
TIME 0000000e 1444731649.9,1
TIME 0000000e 1444731650.9,1
TIME 0000000e 1444731652.9,1
TIME 0000000e 1444731656.9,1
TIME 0000000e 1444731657.9,1
TIME 0000000e 1444731659.9,1
TIME 0000000e 1444731660.9,1
TIME 0000000e 1444731662.9,1
TIME 0000000e 1444731665.9,1
TIME 0000000e 1444731669.9,1
TIME 0000000e 1444731670.9,1
TIME 0000000e 1444731672.9,1
TIME 0000000e 1444731675.9,1
TIME 0000000e 1444731678.9,1
TIME 0000000e 1444731680.9,1
TIME 0000000e 1444731682.9,1
TIME 0000000e 1444731683.9,1
TIME 0000000e 1444731685.9,1
TIME 0000000e 1444731688.9,1
TIME 0000000e 1444731690.9,1
TIME 0000000e 1444731691.9,1
TIME 0000000e 1444731695.9,1
TIME 0000000e 1444731696.9,1
TIME 0000000e 1444731698.9,1
TIME 0000000e 1444731700.9,1
TIME 0000000e 1444731701.9,1
TIME 0000000e 1444731704.9,1
TIME 0000000e 1444731708.9,1
TIME 0000000e 1444731709.9,1
TIME 0000000e 1444731710.9,1
TIME 0000000e 1444731711.9,1
TIME 0000000e 1444731714.9,1
TIME 0000000e 1444731717.9,1
TIME 0000000e 1444731720.9,1
TIME 0000000e 1444731721.9,1
TIME 0000000e 1444731722.9,1
TIME 0000000e 1444731724.9,1
TIME 0000000e 1444731727.9,1
TIME 0000000e 1444731730.9,1
TIME 0000000e 1444731734.9,1
TIME 0000000e 1444731735.9,1
TIME 0000000e 1444731737.9,1
TIME 0000000e 1444731740.9,1
TIME 0000000e 1444731743.9,1
TIME 0000000e 1444731747.9,1
TIME 0000000e 1444731748.9,1
TIME 0000000e 1444731750.9,1
TIME 0000000e 1444731753.9,1
TIME 0000000e 1444731756.9,1
TIME 0000000e 1444731760.9,1
TIME 0000000e 1444731761.9,1
TIME 0000000e 1444731763.9,1
TIME 0000000e 1444731766.9,1
TIME 0000000e 1444731769.9,1
TIME 0000000e 1444731770.9,1
TIME 0000000e 1444731773.9,1
TIME 0000000e 1444731774.9,1
TIME 0000000e 1444731776.9,1
TIME 0000000e 1444731779.9,1
TIME 0000000e 1444731780.9,1
TIME 0000000e 1444731782.9,1
TIME 0000000e 1444731786.9,1
TIME 0000000e 1444731787.9,1
TIME 0000000e 1444731789.9,1
TIME 0000000e 1444731790.9,1
TIME 0000000e 1444731792.9,1
TIME 0000000e 1444731795.9,1
TIME 0000000e 1444731799.9,1
TIME 0000000e 1444731800.9,1
TIME 0000000e 1444731802.9,1
TIME 0000000e 1444731805.9,1
TIME 0000000e 1444731808.9,1
TIME 0000000e 1444731810.9,1
TIME 0000000e 1444731812.9,1
TIME 0000000e 1444731813.9,1
TIME 0000000e 1444731815.9,1
TIME 0000000e 1444731818.9,1
TIME 0000000e 1444731820.9,1
TIME 0000000e 1444731821.9,1
TIME 0000000e 1444731825.9,1
TIME 0000000e 1444731826.9,1
TIME 0000000e 1444731828.9,1
TIME 0000000e 1444731830.9,1
TIME 0000000e 1444731831.9,1
TIME 0000000e 1444731834.9,1
TIME 0000000e 1444731838.9,1
TIME 0000000e 1444731839.9,1
TIME 0000000e 1444731840.9,1
TIME 0000000e 1444731841.9,1
TIME 0000000e 1444731844.9,1
TIME 0000000e 1444731847.9,1
TIME 0000000e 1444731850.9,1
TIME 0000000e 1444731851.9,1
TIME 0000000e 1444731852.9,1
TIME 0000000e 1444731854.9,1
TIME 0000000e 1444731857.9,1
TIME 0000000e 1444731860.9,1
TIME 0000000e 1444731864.9,1
TIME 0000000e 1444731865.9,1
TIME 0000000e 1444731867.9,1
TIME 0000000e 1444731870.9,1
TIME 0000000e 1444731873.9,1
TIME 0000000e 1444731877.9,1
TIME 0000000e 1444731878.9,1
TIME 0000000e 1444731880.9,1
TIME 0000000e 1444731883.9,1
TIME 0000000e 1444731886.9,1
TIME 0000000e 1444731890.9,1
TIME 0000000e 1444731891.9,1
TIME 0000000e 1444731893.9,1
TIME 0000000e 1444731896.9,1
TIME 0000000e 1444731899.9,1
TIME 0000000e 1444731900.9,1
TIME 0000000e 1444731903.9,1
TIME 0000000e 1444731904.9,1
TIME 0000000e 1444731906.9,1
TIME 0000000e 1444731909.9,1
TIME 0000000e 1444731910.9,1
TIME 0000000e 1444731912.9,1
TIME 0000000e 1444731916.9,1
TIME 0000000e 1444731917.9,1
TIME 0000000e 1444731919.9,1
TIME 0000000e 1444731920.9,1
TIME 0000000e 1444731922.9,1
TIME 0000000e 1444731925.9,1
TIME 0000000e 1444731929.9,1
TIME 0000000e 1444731930.9,1
TIME 0000000e 1444731932.9,1
TIME 0000000e 1444731935.9,1
TIME 0000000e 1444731938.9,1
TIME 0000000e 1444731940.9,1
TIME 0000000e 1444731942.9,1
TIME 0000000e 1444731943.9,1
TIME 0000000e 1444731945.9,1
TIME 0000000e 1444731948.9,1
TIME 0000000e 1444731950.9,1
TIME 0000000e 1444731951.9,1
TIME 0000000e 1444731955.9,1
TIME 0000000e 1444731956.9,1
TIME 0000000e 1444731958.9,1
TIME 0000000e 1444731960.9,1
TIME 0000000e 1444731961.9,1
TIME 0000000e 1444731964.9,1
TIME 0000000e 1444731968.9,1
TIME 0000000e 1444731969.9,1
TIME 0000000e 1444731970.9,1
TIME 0000000e 1444731971.9,1
TIME 0000000e 1444731974.9,1
TIME 0000000e 1444731977.9,1
TIME 0000000e 1444731980.9,1
TIME 0000000e 1444731981.9,1
TIME 0000000e 1444731982.9,1
TIME 0000000e 1444731984.9,1
TIME 0000000e 1444731987.9,1
TIME 0000000e 1444731990.9,1
TIME 0000000e 1444731994.9,1
TIME 0000000e 1444731995.9,1
TIME 0000000e 1444731997.9,1
TIME 0000000e 1444732000.9,1
TIME 0000000e 1444732003.9,1
TIME 0000000e 1444732007.9,1
TIME 0000000e 1444732008.9,1
TIME 0000000e 1444732010.9,1
TIME 0000000e 1444732013.9,1
TIME 0000000e 1444732016.9,1
TIME 0000000e 1444732020.9,1
TIME 0000000e 1444732021.9,1
TIME 0000000e 1444732023.9,1
TIME 0000000e 1444732026.9,1
TIME 0000000e 1444732029.9,1
TIME 0000000e 1444732030.9,1
TIME 0000000e 1444732033.9,1
TIME 0000000e 1444732034.9,1
TIME 0000000e 1444732036.9,1
TIME 0000000e 1444732039.9,1
TIME 0000000e 1444732040.9,1
TIME 0000000e 1444732042.9,1
TIME 0000000e 1444732046.9,1
TIME 0000000e 1444732047.9,1
TIME 0000000e 1444732049.9,1
TIME 0000000e 1444732050.9,1
TIME 0000000e 1444732052.9,1
TIME 0000000e 1444732055.9,1
TIME 0000000e 1444732059.9,1
TIME 0000000e 1444732060.9,1
TIME 0000000e 1444732062.9,1
TIME 0000000e 1444732065.9,1
TIME 0000000e 1444732068.9,1
TIME 0000000e 1444732070.9,1
TIME 0000000e 1444732072.9,1
TIME 0000000e 1444732073.9,1
TIME 0000000e 1444732075.9,1
TIME 0000000e 1444732078.9,1
TIME 0000000e 1444732080.9,1
TIME 0000000e 1444732081.9,1
TIME 0000000e 1444732085.9,1
TIME 0000000e 1444732086.9,1
TIME 0000000e 1444732088.9,1
TIME 0000000e 1444732090.9,1
TIME 0000000e 1444732091.9,1
TIME 0000000e 1444732094.9,1
TIME 0000000e 1444732098.9,1
TIME 0000000e 1444732099.9,1
TIME 0000000e 1444732100.9,1
TIME 0000000e 1444732101.9,1
TIME 0000000e 1444732104.9,1
TIME 0000000e 1444732107.9,1
TIME 0000000e 1444732110.9,1
TIME 0000000e 1444732111.9,1
TIME 0000000e 1444732112.9,1
TIME 0000000e 1444732114.9,1
TIME 0000000e 1444732117.9,1
TIME 0000000e 1444732120.9,1
TIME 0000000e 1444732124.9,1
TIME 0000000e 1444732125.9,1
TIME 0000000e 1444732127.9,1
TIME 0000000e 1444732130.9,1
TIME 0000000e 1444732133.9,1
TIME 0000000e 1444732137.9,1
TIME 0000000e 1444732138.9,1
TIME 0000000e 1444732140.9,1
TIME 0000000e 1444732143.9,1
TIME 0000000e 1444732146.9,1
TIME 0000000e 1444732150.9,1
TIME 0000000e 1444732151.9,1
TIME 0000000e 1444732153.9,1
TIME 0000000e 1444732156.9,1
TIME 0000000e 1444732159.9,1
TIME 0000000e 1444732160.9,1
TIME 0000000e 1444732163.9,1
TIME 0000000e 1444732164.9,1
TIME 0000000e 1444732166.9,1
TIME 0000000e 1444732169.9,1
TIME 0000000e 1444732170.9,1
TIME 0000000e 1444732172.9,1
TIME 0000000e 1444732176.9,1
TIME 0000000e 1444732177.9,1
TIME 0000000e 1444732179.9,1
TIME 0000000e 1444732180.9,1
TIME 0000000e 1444732182.9,1
TIME 0000000e 1444732185.9,1
TIME 0000000e 1444732189.9,1
TIME 0000000e 1444732190.9,1
TIME 0000000e 1444732192.9,1
TIME 0000000e 1444732195.9,1
TIME 0000000e 1444732198.9,1
TIME 0000000e 1444732200.9,1
TIME 0000000e 1444732202.9,1
TIME 0000000e 1444732203.9,1
TIME 0000000e 1444732205.9,1
TIME 0000000e 1444732208.9,1
TIME 0000000e 1444732210.9,1
TIME 0000000e 1444732211.9,1
TIME 0000000e 1444732215.9,1
TIME 0000000e 1444732216.9,1
TIME 0000000e 1444732218.9,1
TIME 0000000e 1444732220.9,1
TIME 0000000e 1444732221.9,1
TIME 0000000e 1444732224.9,1
TIME 0000000e 1444732228.9,1
TIME 0000000e 1444732229.9,1
TIME 0000000e 1444732230.9,1
TIME 0000000e 1444732231.9,1
TIME 0000000e 1444732234.9,1
TIME 0000000e 1444732237.9,1
TIME 0000000e 1444732240.9,1
TIME 0000000e 1444732241.9,1
TIME 0000000e 1444732242.9,1
TIME 0000000e 1444732244.9,1
TIME 0000000e 1444732247.9,1
TIME 0000000e 1444732250.9,1
TIME 0000000e 1444732254.9,1
TIME 0000000e 1444732255.9,1
TIME 0000000e 1444732257.9,1
TIME 0000000e 1444732260.9,1
TIME 0000000e 1444732263.9,1
TIME 0000000e 1444732267.9,1
TIME 0000000e 1444732268.9,1
TIME 0000000e 1444732270.9,1
TIME 0000000e 1444732273.9,1
TIME 0000000e 1444732276.9,1
TIME 0000000e 1444732280.9,1
TIME 0000000e 1444732281.9,1
TIME 0000000e 1444732283.9,1
TIME 0000000e 1444732286.9,1
TIME 0000000e 1444732289.9,1
TIME 0000000e 1444732290.9,1
TIME 0000000e 1444732293.9,1
TIME 0000000e 1444732294.9,1
TIME 0000000e 1444732296.9,1
TIME 0000000e 1444732299.9,1
TIME 0000000e 1444732300.9,1
TIME 0000000e 1444732302.9,1
TIME 0000000e 1444732306.9,1
TIME 0000000e 1444732307.9,1
TIME 0000000e 1444732309.9,1
TIME 0000000e 1444732310.9,1
TIME 0000000e 1444732312.9,1
TIME 0000000e 1444732315.9,1
TIME 0000000e 1444732319.9,1
TIME 0000000e 1444732320.9,1
TIME 0000000e 1444732322.9,1
TIME 0000000e 1444732325.9,1
TIME 0000000e 1444732328.9,1
TIME 0000000e 1444732330.9,1
TIME 0000000e 1444732332.9,1
TIME 0000000e 1444732333.9,1
TIME 0000000e 1444732335.9,1
TIME 0000000e 1444732338.9,1
TIME 0000000e 1444732340.9,1
TIME 0000000e 1444732341.9,1
TIME 0000000e 1444732345.9,1
TIME 0000000e 1444732346.9,1
TIME 0000000e 1444732348.9,1
TIME 0000000e 1444732350.9,1
TIME 0000000e 1444732351.9,1
TIME 0000000e 1444732354.9,1
TIME 0000000e 1444732358.9,1
TIME 0000000e 1444732359.9,1
TIME 0000000e 1444732360.9,1
TIME 0000000e 1444732361.9,1
TIME 0000000e 1444732364.9,1
TIME 0000000e 1444732367.9,1
TIME 0000000e 1444732370.9,1
TIME 0000000e 1444732371.9,1
TIME 0000000e 1444732372.9,1
TIME 0000000e 1444732374.9,1
TIME 0000000e 1444732377.9,1
TIME 0000000e 1444732380.9,1
TIME 0000000e 1444732384.9,1
TIME 0000000e 1444732385.9,1
TIME 0000000e 1444732387.9,1
TIME 0000000e 1444732390.9,1
TIME 0000000e 1444732393.9,1
TIME 0000000e 1444732397.9,1
TIME 0000000e 1444732398.9,1
TIME 0000000e 1444732400.9,1
TIME 0000000e 1444732403.9,1
TIME 0000000e 1444732406.9,1
TIME 0000000e 1444732410.9,1
TIME 0000000e 1444732411.9,1
TIME 0000000e 1444732413.9,1
TIME 0000000e 1444732416.9,1
TIME 0000000e 1444732419.9,1
TIME 0000000e 1444732420.9,1
TIME 0000000e 1444732423.9,1
TIME 0000000e 1444732424.9,1
TIME 0000000e 1444732426.9,1
TIME 0000000e 1444732429.9,1
TIME 0000000e 1444732430.9,1
TIME 0000000e 1444732432.9,1
TIME 0000000e 1444732436.9,1
TIME 0000000e 1444732437.9,1
TIME 0000000e 1444732439.9,1
TIME 0000000e 1444732440.9,1
TIME 0000000e 1444732442.9,1
TIME 0000000e 1444732445.9,1
TIME 0000000e 1444732449.9,1
TIME 0000000e 1444732450.9,1
TIME 0000000e 1444732452.9,1
TIME 0000000e 1444732455.9,1
TIME 0000000e 1444732458.9,1
TIME 0000000e 1444732460.9,1
TIME 0000000e 1444732462.9,1
TIME 0000000e 1444732463.9,1
TIME 0000000e 1444732465.9,1
TIME 0000000e 1444732468.9,1
TIME 0000000e 1444732470.9,1
TIME 0000000e 1444732471.9,1
TIME 0000000e 1444732475.9,1
TIME 0000000e 1444732476.9,1
TIME 0000000e 1444732478.9,1
TIME 0000000e 1444732480.9,1
TIME 0000000e 1444732481.9,1
TIME 0000000e 1444732484.9,1
TIME 0000000e 1444732488.9,1
TIME 0000000e 1444732489.9,1
TIME 0000000e 1444732490.9,1
TIME 0000000e 1444732491.9,1
TIME 0000000e 1444732494.9,1
TIME 0000000e 1444732497.9,1
TIME 0000000e 1444732500.9,1
TIME 0000000e 1444732501.9,1
TIME 0000000e 1444732502.9,1
TIME 0000000e 1444732504.9,1
TIME 0000000e 1444732507.9,1
TIME 0000000e 1444732510.9,1
TIME 0000000e 1444732514.9,1
TIME 0000000e 1444732515.9,1
TIME 0000000e 1444732517.9,1
TIME 0000000e 1444732520.9,1
TIME 0000000e 1444732523.9,1
TIME 0000000e 1444732527.9,1
TIME 0000000e 1444732528.9,1
TIME 0000000e 1444732530.9,1
TIME 0000000e 1444732533.9,1
TIME 0000000e 1444732536.9,1
TIME 0000000e 1444732540.9,1
TIME 0000000e 1444732541.9,1
TIME 0000000e 1444732543.9,1
TIME 0000000e 1444732546.9,1
TIME 0000000e 1444732549.9,1
TIME 0000000e 1444732550.9,1
TIME 0000000e 1444732553.9,1
TIME 0000000e 1444732554.9,1
TIME 0000000e 1444732556.9,1
TIME 0000000e 1444732559.9,1
TIME 0000000e 1444732560.9,1
TIME 0000000e 1444732562.9,1
TIME 0000000e 1444732566.9,1
TIME 0000000e 1444732567.9,1
TIME 0000000e 1444732569.9,1
TIME 0000000e 1444732570.9,1
TIME 0000000e 1444732572.9,1
TIME 0000000e 1444732575.9,1
TIME 0000000e 1444732579.9,1
TIME 0000000e 1444732580.9,1
TIME 0000000e 1444732582.9,1
TIME 0000000e 1444732585.9,1
TIME 0000000e 1444732588.9,1
TIME 0000000e 1444732590.9,1
TIME 0000000e 1444732592.9,1
TIME 0000000e 1444732593.9,1
TIME 0000000e 1444732595.9,1
TIME 0000000e 1444732598.9,1
TIME 0000000e 1444732600.9,1
TIME 0000000e 1444732601.9,1
TIME 0000000e 1444732605.9,1
TIME 0000000e 1444732606.9,1
TIME 0000000e 1444732608.9,1
TIME 0000000e 1444732610.9,1
TIME 0000000e 1444732611.9,1
TIME 0000000e 1444732614.9,1
TIME 0000000e 1444732618.9,1
TIME 0000000e 1444732619.9,1
TIME 0000000e 1444732620.9,1
TIME 0000000e 1444732621.9,1
TIME 0000000e 1444732624.9,1
TIME 0000000e 1444732627.9,1
TIME 0000000e 1444732630.9,1
TIME 0000000e 1444732631.9,1
TIME 0000000e 1444732632.9,1
TIME 0000000e 1444732634.9,1
TIME 0000000e 1444732637.9,1
TIME 0000000e 1444732640.9,1
TIME 0000000e 1444732644.9,1
TIME 0000000e 1444732645.9,1
TIME 0000000e 1444732647.9,1
TIME 0000000e 1444732650.9,1
TIME 0000000e 1444732653.9,1
TIME 0000000e 1444732657.9,1
TIME 0000000e 1444732658.9,1
TIME 0000000e 1444732660.9,1
TIME 0000000e 1444732663.9,1
TIME 0000000e 1444732666.9,1
TIME 0000000e 1444732670.9,1
TIME 0000000e 1444732671.9,1
TIME 0000000e 1444732673.9,1
TIME 0000000e 1444732676.9,1
TIME 0000000e 1444732679.9,1
TIME 0000000e 1444732680.9,1
TIME 0000000e 1444732683.9,1
TIME 0000000e 1444732684.9,1
TIME 0000000e 1444732686.9,1
TIME 0000000e 1444732689.9,1
TIME 0000000e 1444732690.9,1
TIME 0000000e 1444732692.9,1
TIME 0000000e 1444732696.9,1
TIME 0000000e 1444732697.9,1
TIME 0000000e 1444732699.9,1
TIME 0000000e 1444732700.9,1
TIME 0000000e 1444732702.9,1
TIME 0000000e 1444732705.9,1
TIME 0000000e 1444732709.9,1
TIME 0000000e 1444732710.9,1
TIME 0000000e 1444732712.9,1
TIME 0000000e 1444732715.9,1
TIME 0000000e 1444732718.9,1
TIME 0000000e 1444732720.9,1
TIME 0000000e 1444732722.9,1
TIME 0000000e 1444732723.9,1
TIME 0000000e 1444732725.9,1
TIME 0000000e 1444732728.9,1
TIME 0000000e 1444732730.9,1
TIME 0000000e 1444732731.9,1
TIME 0000000e 1444732735.9,1
TIME 0000000e 1444732736.9,1
TIME 0000000e 1444732738.9,1
TIME 0000000e 1444732740.9,1
TIME 0000000e 1444732741.9,1
TIME 0000000e 1444732744.9,1
TIME 0000000e 1444732748.9,1
TIME 0000000e 1444732749.9,1
TIME 0000000e 1444732750.9,1
TIME 0000000e 1444732751.9,1
TIME 0000000e 1444732754.9,1
TIME 0000000e 1444732757.9,1
TIME 0000000e 1444732760.9,1
TIME 0000000e 1444732761.9,1
TIME 0000000e 1444732762.9,1
TIME 0000000e 1444732764.9,1
TIME 0000000e 1444732767.9,1
TIME 0000000e 1444732770.9,1
TIME 0000000e 1444732774.9,1
TIME 0000000e 1444732775.9,1
TIME 0000000e 1444732777.9,1
TIME 0000000e 1444732780.9,1
TIME 0000000e 1444732783.9,1
TIME 0000000e 1444732787.9,1
TIME 0000000e 1444732788.9,1
TIME 0000000e 1444732790.9,1
TIME 0000000e 1444732793.9,1
TIME 0000000e 1444732796.9,1
TIME 0000000e 1444732800.9,1
TIME 0000000e 1444732801.9,1
TIME 0000000e 1444732803.9,1
TIME 0000000e 1444732806.9,1
TIME 0000000e 1444732809.9,1
TIME 0000000e 1444732810.9,1
TIME 0000000e 1444732813.9,1
TIME 0000000e 1444732814.9,1
TIME 0000000e 1444732816.9,1
TIME 0000000e 1444732819.9,1
TIME 0000000e 1444732820.9,1
TIME 0000000e 1444732822.9,1
TIME 0000000e 1444732826.9,1
TIME 0000000e 1444732827.9,1
TIME 0000000e 1444732829.9,1
TIME 0000000e 1444732830.9,1
TIME 0000000e 1444732832.9,1
TIME 0000000e 1444732835.9,1
TIME 0000000e 1444732839.9,1
TIME 0000000e 1444732840.9,1
TIME 0000000e 1444732842.9,1
TIME 0000000e 1444732845.9,1
TIME 0000000e 1444732848.9,1
TIME 0000000e 1444732850.9,1
TIME 0000000e 1444732852.9,1
TIME 0000000e 1444732853.9,1
TIME 0000000e 1444732855.9,1
TIME 0000000e 1444732858.9,1
TIME 0000000e 1444732860.9,1
TIME 0000000e 1444732861.9,1
TIME 0000000e 1444732865.9,1
TIME 0000000e 1444732866.9,1
TIME 0000000e 1444732868.9,1
TIME 0000000e 1444732870.9,1
TIME 0000000e 1444732871.9,1
TIME 0000000e 1444732874.9,1
TIME 0000000e 1444732878.9,1
TIME 0000000e 1444732879.9,1
TIME 0000000e 1444732880.9,1
TIME 0000000e 1444732881.9,1
TIME 0000000e 1444732884.9,1
TIME 0000000e 1444732887.9,1
TIME 0000000e 1444732890.9,1
TIME 0000000e 1444732891.9,1
TIME 0000000e 1444732892.9,1
TIME 0000000e 1444732894.9,1
TIME 0000000e 1444732897.9,1
TIME 0000000e 1444732900.9,1
TIME 0000000e 1444732904.9,1
TIME 0000000e 1444732905.9,1
TIME 0000000e 1444732907.9,1
TIME 0000000e 1444732910.9,1
TIME 0000000e 1444732913.9,1
TIME 0000000e 1444732917.9,1
TIME 0000000e 1444732918.9,1
TIME 0000000e 1444732920.9,1
TIME 0000000e 1444732923.9,1
TIME 0000000e 1444732926.9,1
TIME 0000000e 1444732930.9,1
TIME 0000000e 1444732931.9,1
TIME 0000000e 1444732933.9,1
TIME 0000000e 1444732936.9,1
TIME 0000000e 1444732939.9,1
TIME 0000000e 1444732940.9,1
TIME 0000000e 1444732943.9,1
TIME 0000000e 1444732944.9,1
TIME 0000000e 1444732946.9,1
TIME 0000000e 1444732949.9,1
TIME 0000000e 1444732950.9,1
TIME 0000000e 1444732952.9,1
TIME 0000000e 1444732956.9,1
TIME 0000000e 1444732957.9,1
TIME 0000000e 1444732959.9,1
TIME 0000000e 1444732960.9,1
TIME 0000000e 1444732962.9,1
TIME 0000000e 1444732965.9,1
TIME 0000000e 1444732969.9,1
TIME 0000000e 1444732970.9,1
TIME 0000000e 1444732972.9,1
TIME 0000000e 1444732975.9,1
TIME 0000000e 1444732978.9,1
TIME 0000000e 1444732980.9,1
TIME 0000000e 1444732982.9,1
TIME 0000000e 1444732983.9,1
TIME 0000000e 1444732985.9,1
TIME 0000000e 1444732988.9,1
TIME 0000000e 1444732990.9,1
TIME 0000000e 1444732991.9,1
TIME 0000000e 1444732995.9,1
TIME 0000000e 1444732996.9,1
TIME 0000000e 1444732998.9,1
TIME 0000000e 1444733000.9,1
TIME 0000000e 1444733001.9,1
TIME 0000000e 1444733004.9,1
TIME 0000000e 1444733008.9,1
TIME 0000000e 1444733009.9,1
TIME 0000000e 1444733010.9,1
TIME 0000000e 1444733011.9,1
TIME 0000000e 1444733014.9,1
TIME 0000000e 1444733017.9,1
TIME 0000000e 1444733020.9,1
TIME 0000000e 1444733021.9,1
TIME 0000000e 1444733022.9,1
TIME 0000000e 1444733024.9,1
TIME 0000000e 1444733027.9,1
TIME 0000000e 1444733030.9,1
TIME 0000000e 1444733034.9,1
TIME 0000000e 1444733035.9,1
TIME 0000000e 1444733037.9,1
TIME 0000000e 1444733040.9,1
TIME 0000000e 1444733043.9,1
TIME 0000000e 1444733047.9,1
TIME 0000000e 1444733048.9,1
TIME 0000000e 1444733050.9,1
TIME 0000000e 1444733053.9,1
TIME 0000000e 1444733056.9,1
TIME 0000000e 1444733060.9,1
TIME 0000000e 1444733061.9,1
TIME 0000000e 1444733063.9,1
TIME 0000000e 1444733066.9,1
TIME 0000000e 1444733069.9,1
TIME 0000000e 1444733070.9,1
TIME 0000000e 1444733073.9,1
TIME 0000000e 1444733074.9,1
TIME 0000000e 1444733076.9,1
TIME 0000000e 1444733079.9,1
TIME 0000000e 1444733080.9,1
TIME 0000000e 1444733082.9,1
TIME 0000000e 1444733086.9,1
TIME 0000000e 1444733087.9,1
TIME 0000000e 1444733089.9,1
TIME 0000000e 1444733090.9,1
TIME 0000000e 1444733092.9,1
TIME 0000000e 1444733095.9,1
TIME 0000000e 1444733099.9,1
TIME 0000000e 1444733100.9,1
TIME 0000000e 1444733102.9,1
TIME 0000000e 1444733105.9,1
TIME 0000000e 1444733108.9,1
TIME 0000000e 1444733110.9,1
TIME 0000000e 1444733112.9,1
TIME 0000000e 1444733113.9,1
TIME 0000000e 1444733115.9,1
TIME 0000000e 1444733118.9,1
TIME 0000000e 1444733120.9,1
TIME 0000000e 1444733121.9,1
TIME 0000000e 1444733125.9,1
TIME 0000000e 1444733126.9,1
TIME 0000000e 1444733128.9,1
TIME 0000000e 1444733130.9,1
TIME 0000000e 1444733131.9,1
TIME 0000000e 1444733134.9,1
TIME 0000000e 1444733138.9,1
TIME 0000000e 1444733139.9,1
TIME 0000000e 1444733140.9,1
TIME 0000000e 1444733141.9,1
TIME 0000000e 1444733144.9,1
TIME 0000000e 1444733147.9,1
TIME 0000000e 1444733150.9,1
TIME 0000000e 1444733151.9,1
TIME 0000000e 1444733152.9,1
TIME 0000000e 1444733154.9,1
TIME 0000000e 1444733157.9,1
TIME 0000000e 1444733160.9,1
TIME 0000000e 1444733164.9,1
TIME 0000000e 1444733165.9,1
TIME 0000000e 1444733167.9,1
TIME 0000000e 1444733170.9,1
TIME 0000000e 1444733173.9,1
TIME 0000000e 1444733177.9,1
TIME 0000000e 1444733178.9,1
TIME 0000000e 1444733180.9,1
TIME 0000000e 1444733183.9,1
TIME 0000000e 1444733186.9,1
TIME 0000000e 1444733190.9,1
TIME 0000000e 1444733191.9,1
TIME 0000000e 1444733193.9,1
TIME 0000000e 1444733196.9,1
TIME 0000000e 1444733199.9,1
TIME 0000000e 1444733200.9,1
TIME 0000000e 1444733203.9,1
TIME 0000000e 1444733204.9,1
TIME 0000000e 1444733206.9,1
TIME 0000000e 1444733209.9,1
TIME 0000000e 1444733210.9,1
TIME 0000000e 1444733212.9,1
TIME 0000000e 1444733216.9,1
TIME 0000000e 1444733217.9,1
TIME 0000000e 1444733219.9,1
TIME 0000000e 1444733220.9,1
TIME 0000000e 1444733222.9,1
TIME 0000000e 1444733225.9,1
TIME 0000000e 1444733229.9,1
TIME 0000000e 1444733230.9,1
TIME 0000000e 1444733232.9,1
TIME 0000000e 1444733235.9,1
TIME 0000000e 1444733238.9,1
TIME 0000000e 1444733240.9,1
TIME 0000000e 1444733242.9,1
TIME 0000000e 1444733243.9,1
TIME 0000000e 1444733245.9,1
TIME 0000000e 1444733248.9,1
TIME 0000000e 1444733250.9,1
TIME 0000000e 1444733251.9,1
TIME 0000000e 1444733255.9,1
TIME 0000000e 1444733256.9,1
TIME 0000000e 1444733258.9,1
TIME 0000000e 1444733260.9,1
TIME 0000000e 1444733261.9,1
TIME 0000000e 1444733264.9,1
TIME 0000000e 1444733268.9,1
TIME 0000000e 1444733269.9,1
TIME 0000000e 1444733270.9,1
TIME 0000000e 1444733271.9,1
TIME 0000000e 1444733274.9,1
TIME 0000000e 1444733277.9,1
TIME 0000000e 1444733280.9,1
TIME 0000000e 1444733281.9,1
TIME 0000000e 1444733282.9,1
TIME 0000000e 1444733284.9,1
TIME 0000000e 1444733287.9,1
TIME 0000000e 1444733290.9,1
TIME 0000000e 1444733294.9,1
TIME 0000000e 1444733295.9,1
TIME 0000000e 1444733297.9,1
TIME 0000000e 1444733300.9,1
TIME 0000000e 1444733303.9,1
TIME 0000000e 1444733307.9,1
TIME 0000000e 1444733308.9,1
TIME 0000000e 1444733310.9,1
TIME 0000000e 1444733313.9,1
TIME 0000000e 1444733316.9,1
TIME 0000000e 1444733320.9,1
TIME 0000000e 1444733321.9,1
TIME 0000000e 1444733323.9,1
TIME 0000000e 1444733326.9,1
TIME 0000000e 1444733329.9,1
TIME 0000000e 1444733330.9,1
TIME 0000000e 1444733333.9,1
TIME 0000000e 1444733334.9,1
TIME 0000000e 1444733336.9,1
TIME 0000000e 1444733339.9,1
TIME 0000000e 1444733340.9,1
TIME 0000000e 1444733342.9,1
TIME 0000000e 1444733346.9,1
TIME 0000000e 1444733347.9,1
TIME 0000000e 1444733349.9,1
TIME 0000000e 1444733350.9,1
TIME 0000000e 1444733352.9,1
TIME 0000000e 1444733355.9,1
TIME 0000000e 1444733359.9,1
TIME 0000000e 1444733360.9,1
TIME 0000000e 1444733362.9,1
TIME 0000000e 1444733365.9,1
TIME 0000000e 1444733368.9,1
TIME 0000000e 1444733370.9,1
TIME 0000000e 1444733372.9,1
TIME 0000000e 1444733373.9,1
TIME 0000000e 1444733375.9,1
TIME 0000000e 1444733378.9,1
TIME 0000000e 1444733380.9,1
TIME 0000000e 1444733381.9,1
TIME 0000000e 1444733385.9,1
TIME 0000000e 1444733386.9,1
TIME 0000000e 1444733388.9,1
TIME 0000000e 1444733390.9,1
TIME 0000000e 1444733391.9,1
TIME 0000000e 1444733394.9,1
TIME 0000000e 1444733398.9,1
TIME 0000000e 1444733399.9,1
TIME 0000000e 1444733400.9,1
TIME 0000000e 1444733401.9,1
TIME 0000000e 1444733404.9,1
TIME 0000000e 1444733407.9,1
TIME 0000000e 1444733410.9,1
TIME 0000000e 1444733411.9,1
TIME 0000000e 1444733412.9,1
TIME 0000000e 1444733414.9,1
TIME 0000000e 1444733417.9,1
TIME 0000000e 1444733420.9,1
TIME 0000000e 1444733424.9,1
TIME 0000000e 1444733425.9,1
TIME 0000000e 1444733427.9,1
TIME 0000000e 1444733430.9,1
TIME 0000000e 1444733433.9,1
TIME 0000000e 1444733437.9,1
TIME 0000000e 1444733438.9,1
TIME 0000000e 1444733440.9,1
TIME 0000000e 1444733443.9,1
TIME 0000000e 1444733446.9,1
TIME 0000000e 1444733450.9,1
TIME 0000000e 1444733451.9,1
TIME 0000000e 1444733453.9,1
TIME 0000000e 1444733456.9,1
TIME 0000000e 1444733459.9,1
TIME 0000000e 1444733460.9,1
TIME 0000000e 1444733463.9,1
TIME 0000000e 1444733464.9,1
TIME 0000000e 1444733466.9,1
TIME 0000000e 1444733469.9,1
TIME 0000000e 1444733470.9,1
TIME 0000000e 1444733472.9,1
TIME 0000000e 1444733476.9,1
TIME 0000000e 1444733477.9,1
TIME 0000000e 1444733479.9,1
TIME 0000000e 1444733480.9,1
TIME 0000000e 1444733482.9,1
TIME 0000000e 1444733485.9,1
TIME 0000000e 1444733489.9,1
TIME 0000000e 1444733490.9,1
TIME 0000000e 1444733492.9,1
TIME 0000000e 1444733495.9,1
TIME 0000000e 1444733498.9,1
TIME 0000000e 1444733500.9,1
TIME 0000000e 1444733502.9,1
TIME 0000000e 1444733503.9,1
TIME 0000000e 1444733505.9,1
TIME 0000000e 1444733508.9,1
TIME 0000000e 1444733510.9,1
TIME 0000000e 1444733511.9,1
TIME 0000000e 1444733515.9,1
TIME 0000000e 1444733516.9,1
TIME 0000000e 1444733518.9,1
TIME 0000000e 1444733520.9,1
TIME 0000000e 1444733521.9,1
TIME 0000000e 1444733524.9,1
TIME 0000000e 1444733528.9,1
TIME 0000000e 1444733529.9,1
TIME 0000000e 1444733530.9,1
TIME 0000000e 1444733531.9,1
TIME 0000000e 1444733534.9,1
TIME 0000000e 1444733537.9,1
TIME 0000000e 1444733540.9,1
TIME 0000000e 1444733541.9,1
TIME 0000000e 1444733542.9,1
TIME 0000000e 1444733544.9,1
TIME 0000000e 1444733547.9,1
TIME 0000000e 1444733550.9,1
TIME 0000000e 1444733554.9,1
TIME 0000000e 1444733555.9,1
TIME 0000000e 1444733557.9,1
TIME 0000000e 1444733560.9,1
TIME 0000000e 1444733563.9,1
TIME 0000000e 1444733567.9,1
TIME 0000000e 1444733568.9,1
TIME 0000000e 1444733570.9,1
TIME 0000000e 1444733573.9,1
TIME 0000000e 1444733576.9,1
TIME 0000000e 1444733580.9,1
TIME 0000000e 1444733581.9,1
TIME 0000000e 1444733583.9,1
TIME 0000000e 1444733586.9,1
TIME 0000000e 1444733589.9,1
TIME 0000000e 1444733590.9,1
TIME 0000000e 1444733593.9,1
TIME 0000000e 1444733594.9,1
TIME 0000000e 1444733596.9,1
TIME 0000000e 1444733599.9,1
TIME 0000000e 1444733600.9,1
TIME 0000000e 1444733602.9,1
TIME 0000000e 1444733606.9,1
TIME 0000000e 1444733607.9,1
TIME 0000000e 1444733609.9,1
TIME 0000000e 1444733610.9,1
TIME 0000000e 1444733612.9,1
TIME 0000000e 1444733615.9,1
TIME 0000000e 1444733619.9,1
TIME 0000000e 1444733620.9,1
TIME 0000000e 1444733622.9,1
TIME 0000000e 1444733625.9,1
TIME 0000000e 1444733628.9,1
TIME 0000000e 1444733630.9,1
TIME 0000000e 1444733632.9,1
TIME 0000000e 1444733633.9,1
TIME 0000000e 1444733635.9,1
TIME 0000000e 1444733638.9,1
TIME 0000000e 1444733640.9,1
TIME 0000000e 1444733641.9,1
TIME 0000000e 1444733645.9,1
TIME 0000000e 1444733646.9,1
TIME 0000000e 1444733648.9,1
TIME 0000000e 1444733650.9,1
TIME 0000000e 1444733651.9,1
TIME 0000000e 1444733654.9,1
TIME 0000000e 1444733658.9,1
TIME 0000000e 1444733659.9,1
TIME 0000000e 1444733660.9,1
TIME 0000000e 1444733661.9,1
TIME 0000000e 1444733664.9,1
TIME 0000000e 1444733667.9,1
TIME 0000000e 1444733670.9,1
TIME 0000000e 1444733671.9,1
TIME 0000000e 1444733672.9,1
TIME 0000000e 1444733674.9,1
TIME 0000000e 1444733677.9,1
TIME 0000000e 1444733680.9,1
TIME 0000000e 1444733684.9,1
TIME 0000000e 1444733685.9,1
TIME 0000000e 1444733687.9,1
TIME 0000000e 1444733690.9,1
TIME 0000000e 1444733693.9,1
TIME 0000000e 1444733697.9,1
TIME 0000000e 1444733698.9,1
TIME 0000000e 1444733700.9,1
TIME 0000000e 1444733703.9,1
TIME 0000000e 1444733706.9,1
TIME 0000000c 1444733707,1
TIME 0000000e 1444733710.9,1
TIME 0000000e 1444733711.9,1
TIME 0000000e 1444733713.9,1
TIME 0000000e 1444733716.9,1
TIME 0000000e 1444733719.9,1
TIME 0000000c 1444733720,1
TIME 0000000e 1444733720.9,1
TIME 0000000c 1444733721,1
TIME 0000000e 1444733723.9,1
TIME 0000000e 1444733724.9,1
TIME 0000000e 1444733726.9,1
TIME 0000000e 1444733729.9,1
TIME 0000000e 1444733730.9,1
TIME 0000000e 1444733732.9,1
TIME 0000000e 1444733736.9,1
TIME 0000000e 1444733737.9,1
TIME 0000000c 1444733738,1
TIME 0000000e 1444733739.9,1
TIME 0000000e 1444733740.9,1
TIME 0000000e 1444733742.9,1
TIME 0000000e 1444733745.9,1
TIME 0000000e 1444733749.9,1
TIME 0000000e 1444733750.9,1
TIME 0000000e 1444733752.9,1
TIME 0000000e 1444733755.9,1
TIME 0000000e 1444733758.9,1
TIME 0000000e 1444733760.9,1
TIME 0000000e 1444733762.9,1
TIME 0000000e 1444733763.9,1
TIME 0000000e 1444733765.9,1
TIME 0000000e 1444733768.9,1
TIME 0000000e 1444733770.9,1
TIME 0000000e 1444733771.9,1
TIME 0000000e 1444733775.9,1
TIME 0000000e 1444733776.9,1
TIME 0000000e 1444733778.9,1
TIME 0000000e 1444733780.9,1
TIME 0000000e 1444733781.9,1
TIME 0000000e 1444733784.9,1
TIME 0000000e 1444733788.9,1
TIME 0000000e 1444733789.9,1
TIME 0000000e 1444733790.9,1
TIME 0000000e 1444733791.9,1
TIME 0000000e 1444733794.9,1
TIME 0000000e 1444733797.9,1
TIME 0000000e 1444733800.9,1
TIME 0000000e 1444733801.9,1
TIME 0000000e 1444733802.9,1
TIME 0000000e 1444733804.9,1
TIME 0000000e 1444733807.9,1
TIME 0000000c 1444733808,1
TIME 0000000e 1444733810.9,1
TIME 0000000e 1444733814.9,1
TIME 0000000e 1444733815.9,1
TIME 0000000e 1444733817.9,1
TIME 0000000e 1444733820.9,1
TIME 0000000e 1444733823.9,1
TIME 0000000e 1444733827.9,1
TIME 0000000e 1444733828.9,1
TIME 0000000e 1444733830.9,1
TIME 0000000e 1444733833.9,1
TIME 0000000e 1444733836.9,1
TIME 0000000e 1444733840.9,1
TIME 0000000e 1444733841.9,1
TIME 0000000e 1444733843.9,1
TIME 0000000e 1444733846.9,1
TIME 0000000e 1444733849.9,1
TIME 0000000e 1444733850.9,1
TIME 0000000e 1444733853.9,1
TIME 0000000e 1444733854.9,1
TIME 0000000e 1444733856.9,1
TIME 0000000e 1444733859.9,1
TIME 0000000e 1444733860.9,1
TIME 0000000e 1444733862.9,1
TIME 0000000e 1444733866.9,1
TIME 0000000e 1444733867.9,1
TIME 0000000c 1444733868,1
TIME 0000000e 1444733869.9,1
TIME 0000000e 1444733870.9,1
TIME 0000000e 1444733872.9,1
TIME 0000000e 1444733875.9,1
TIME 0000000e 1444733879.9,1
TIME 0000000e 1444733880.9,1
TIME 0000000e 1444733882.9,1
TIME 0000000e 1444733885.9,1
TIME 0000000e 1444733888.9,1
TIME 0000000e 1444733890.9,1
TIME 0000000e 1444733892.9,1
TIME 0000000e 1444733893.9,1
TIME 0000000e 1444733895.9,1
TIME 0000000e 1444733898.9,1
TIME 0000000e 1444733900.9,1
TIME 0000000e 1444733901.9,1
TIME 0000000e 1444733905.9,1
TIME 0000000e 1444733906.9,1
TIME 0000000e 1444733908.9,1
TIME 0000000e 1444733910.9,1
TIME 0000000e 1444733911.9,1
TIME 0000000e 1444733914.9,1
TIME 0000000e 1444733918.9,1
TIME 0000000e 1444733919.9,1
TIME 0000000e 1444733920.9,1
TIME 0000000e 1444733921.9,1
TIME 0000000e 1444733924.9,1
TIME 0000000e 1444733927.9,1
TIME 0000000e 1444733930.9,1
TIME 0000000e 1444733931.9,1
TIME 0000000e 1444733932.9,1
TIME 0000000e 1444733934.9,1
TIME 0000000e 1444733937.9,1
TIME 0000000e 1444733940.9,1
TIME 0000000e 1444733944.9,1
TIME 0000000e 1444733945.9,1
TIME 0000000e 1444733947.9,1
TIME 0000000c 1444733948,1
TIME 0000000e 1444733950.9,1
TIME 0000000e 1444733953.9,1
TIME 0000000e 1444733957.9,1
TIME 0000000e 1444733958.9,1
TIME 0000000e 1444733960.9,1
TIME 0000000e 1444733963.9,1
TIME 0000000e 1444733966.9,1
TIME 0000000e 1444733970.9,1
TIME 0000000e 1444733971.9,1
TIME 0000000e 1444733973.9,1
TIME 0000000e 1444733976.9,1
TIME 0000000e 1444733979.9,1
TIME 0000000e 1444733980.9,1
TIME 0000000e 1444733983.9,1
TIME 0000000e 1444733984.9,1
TIME 0000000e 1444733986.9,1
TIME 0000000e 1444733989.9,1
TIME 0000000e 1444733990.9,1
TIME 0000000e 1444733992.9,1
TIME 0000000e 1444733996.9,1
TIME 0000000e 1444733997.9,1
TIME 0000000e 1444733999.9,1
TIME 0000000e 1444734000.9,1
TIME 0000000e 1444734002.9,1
TIME 0000000e 1444734005.9,1
TIME 0000000e 1444734009.9,1
TIME 0000000e 1444734010.9,1
TIME 0000000e 1444734012.9,1
TIME 0000000e 1444734015.9,1
TIME 0000000e 1444734018.9,1
TIME 0000000e 1444734020.9,1
TIME 0000000e 1444734022.9,1
TIME 0000000e 1444734023.9,1
TIME 0000000e 1444734025.9,1
TIME 0000000e 1444734028.9,1
TIME 0000000e 1444734030.9,1
TIME 0000000e 1444734031.9,1
TIME 0000000e 1444734035.9,1
TIME 0000000e 1444734036.9,1
TIME 0000000e 1444734038.9,1
TIME 0000000e 1444734040.9,1
TIME 0000000e 1444734041.9,1
TIME 0000000e 1444734044.9,1
TIME 0000000e 1444734048.9,1
TIME 0000000e 1444734049.9,1
TIME 0000000e 1444734050.9,1
TIME 0000000e 1444734051.9,1
TIME 0000000e 1444734054.9,1
TIME 0000000e 1444734057.9,1
TIME 0000000e 1444734060.9,1
TIME 0000000e 1444734061.9,1
TIME 0000000e 1444734062.9,1
TIME 0000000e 1444734064.9,1
TIME 0000000e 1444734067.9,1
TIME 0000000e 1444734070.9,1
TIME 0000000e 1444734074.9,1
TIME 0000000e 1444734075.9,1
TIME 0000000e 1444734077.9,1
TIME 0000000e 1444734080.9,1
TIME 0000000e 1444734083.9,1
TIME 0000000e 1444734087.9,1
TIME 0000000e 1444734088.9,1
TIME 0000000e 1444734090.9,1
TIME 0000000e 1444734093.9,1
TIME 0000000e 1444734096.9,1
TIME 0000000e 1444734100.9,1
TIME 0000000e 1444734101.9,1
TIME 0000000e 1444734103.9,1
TIME 0000000e 1444734106.9,1
TIME 0000000e 1444734109.9,1
TIME 0000000e 1444734110.9,1
TIME 0000000e 1444734113.9,1
TIME 0000000e 1444734114.9,1
TIME 0000000e 1444734116.9,1
TIME 0000000e 1444734119.9,1
TIME 0000000e 1444734120.9,1
TIME 0000000e 1444734122.9,1
TIME 0000000e 1444734126.9,1
TIME 0000000e 1444734127.9,1
TIME 0000000e 1444734129.9,1
TIME 0000000e 1444734130.9,1
TIME 0000000e 1444734132.9,1
TIME 0000000e 1444734135.9,1
TIME 0000000e 1444734139.9,1
TIME 0000000e 1444734140.9,1
TIME 0000000e 1444734142.9,1
TIME 0000000e 1444734145.9,1
TIME 0000000e 1444734148.9,1
TIME 0000000e 1444734150.9,1
TIME 0000000e 1444734152.9,1
TIME 0000000e 1444734153.9,1
TIME 0000000e 1444734155.9,1
TIME 0000000e 1444734158.9,1
TIME 0000000e 1444734160.9,1
TIME 0000000e 1444734161.9,1
TIME 0000000e 1444734165.9,1
TIME 0000000e 1444734166.9,1
TIME 0000000e 1444734168.9,1
TIME 0000000e 1444734170.9,1
TIME 0000000e 1444734171.9,1
TIME 0000000e 1444734174.9,1
TIME 0000000e 1444734178.9,1
TIME 0000000e 1444734179.9,1
TIME 0000000e 1444734180.9,1
TIME 0000000e 1444734181.9,1
TIME 0000000e 1444734184.9,1
TIME 0000000e 1444734187.9,1
TIME 0000000e 1444734190.9,1
TIME 0000000e 1444734191.9,1
TIME 0000000e 1444734192.9,1
TIME 0000000e 1444734194.9,1
TIME 0000000e 1444734197.9,1
TIME 0000000e 1444734200.9,1
TIME 0000000e 1444734204.9,1
TIME 0000000e 1444734205.9,1
TIME 0000000e 1444734207.9,1
TIME 0000000e 1444734210.9,1
TIME 0000000e 1444734213.9,1
TIME 0000000e 1444734217.9,1
TIME 0000000e 1444734218.9,1
TIME 0000000e 1444734220.9,1
TIME 0000000e 1444734223.9,1
TIME 0000000e 1444734226.9,1
TIME 0000000e 1444734230.9,1
TIME 0000000e 1444734231.9,1
TIME 0000000e 1444734233.9,1
TIME 0000000e 1444734236.9,1
TIME 0000000e 1444734239.9,1
TIME 0000000e 1444734240.9,1
TIME 0000000e 1444734243.9,1
TIME 0000000e 1444734244.9,1
TIME 0000000e 1444734246.9,1
TIME 0000000e 1444734249.9,1
TIME 0000000e 1444734250.9,1
TIME 0000000e 1444734252.9,1
TIME 0000000e 1444734256.9,1
TIME 0000000e 1444734257.9,1
TIME 0000000e 1444734259.9,1
TIME 0000000e 1444734260.9,1
TIME 0000000e 1444734262.9,1
TIME 0000000e 1444734265.9,1
TIME 0000000e 1444734269.9,1
TIME 0000000e 1444734270.9,1
TIME 0000000e 1444734272.9,1
TIME 0000000e 1444734275.9,1
TIME 0000000e 1444734278.9,1
TIME 0000000e 1444734280.9,1
TIME 0000000e 1444734282.9,1
TIME 0000000e 1444734283.9,1
TIME 0000000e 1444734285.9,1
TIME 0000000e 1444734288.9,1
TIME 0000000e 1444734290.9,1
TIME 0000000e 1444734291.9,1
TIME 0000000e 1444734295.9,1
TIME 0000000e 1444734296.9,1
TIME 0000000e 1444734298.9,1
TIME 0000000e 1444734300.9,1
TIME 0000000e 1444734301.9,1
TIME 0000000e 1444734304.9,1
TIME 0000000e 1444734308.9,1
TIME 0000000e 1444734309.9,1
TIME 0000000e 1444734310.9,1
TIME 0000000e 1444734311.9,1
TIME 0000000e 1444734314.9,1
TIME 0000000e 1444734317.9,1
TIME 0000000e 1444734320.9,1
TIME 0000000e 1444734321.9,1
TIME 0000000e 1444734322.9,1
TIME 0000000e 1444734324.9,1
TIME 0000000e 1444734327.9,1
TIME 0000000e 1444734330.9,1
TIME 0000000e 1444734334.9,1
TIME 0000000e 1444734335.9,1
TIME 0000000e 1444734337.9,1
TIME 0000000e 1444734340.9,1
TIME 0000000e 1444734343.9,1
TIME 0000000e 1444734347.9,1
TIME 0000000e 1444734348.9,1
TIME 0000000e 1444734350.9,1
TIME 0000000e 1444734353.9,1
TIME 0000000e 1444734356.9,1
TIME 0000000e 1444734360.9,1
TIME 0000000e 1444734361.9,1
TIME 0000000e 1444734363.9,1
TIME 0000000e 1444734366.9,1
TIME 0000000e 1444734369.9,1
TIME 0000000e 1444734370.9,1
TIME 0000000e 1444734373.9,1
TIME 0000000e 1444734374.9,1
TIME 0000000e 1444734376.9,1
TIME 0000000e 1444734379.9,1
TIME 0000000e 1444734380.9,1
TIME 0000000e 1444734382.9,1
TIME 0000000e 1444734386.9,1
TIME 0000000e 1444734387.9,1
TIME 0000000e 1444734389.9,1
TIME 0000000e 1444734390.9,1
TIME 0000000e 1444734392.9,1
TIME 0000000e 1444734395.9,1
TIME 0000000e 1444734399.9,1
TIME 0000000e 1444734400.9,1
TIME 0000000e 1444734402.9,1
TIME 0000000e 1444734405.9,1
TIME 0000000e 1444734408.9,1
TIME 0000000e 1444734410.9,1
TIME 0000000e 1444734412.9,1
TIME 0000000e 1444734413.9,1
TIME 0000000e 1444734415.9,1
TIME 0000000e 1444734418.9,1
TIME 0000000e 1444734420.9,1
TIME 0000000e 1444734421.9,1
TIME 0000000e 1444734425.9,1
TIME 0000000e 1444734426.9,1
TIME 0000000e 1444734428.9,1
TIME 0000000e 1444734430.9,1
TIME 0000000e 1444734431.9,1
TIME 0000000e 1444734434.9,1
TIME 0000000e 1444734438.9,1
TIME 0000000e 1444734439.9,1
TIME 0000000e 1444734440.9,1
TIME 0000000e 1444734441.9,1
TIME 0000000e 1444734444.9,1
TIME 0000000e 1444734447.9,1
TIME 0000000e 1444734450.9,1
TIME 0000000e 1444734451.9,1
TIME 0000000e 1444734452.9,1
TIME 0000000e 1444734454.9,1
TIME 0000000e 1444734457.9,1
TIME 0000000e 1444734460.9,1
TIME 0000000e 1444734464.9,1
TIME 0000000e 1444734465.9,1
TIME 0000000e 1444734467.9,1
TIME 0000000e 1444734470.9,1
TIME 0000000e 1444734473.9,1
TIME 0000000e 1444734477.9,1
TIME 0000000e 1444734478.9,1
TIME 0000000e 1444734480.9,1
TIME 0000000e 1444734483.9,1
TIME 0000000e 1444734486.9,1
TIME 0000000e 1444734490.9,1
TIME 0000000e 1444734491.9,1
TIME 0000000e 1444734493.9,1
TIME 0000000e 1444734496.9,1
TIME 0000000e 1444734499.9,1
TIME 0000000e 1444734500.9,1
TIME 0000000e 1444734503.9,1
TIME 0000000e 1444734504.9,1
TIME 0000000e 1444734506.9,1
TIME 0000000e 1444734509.9,1
TIME 0000000e 1444734510.9,1
TIME 0000000e 1444734512.9,1
TIME 0000000e 1444734516.9,1
TIME 0000000e 1444734517.9,1
TIME 0000000e 1444734519.9,1
TIME 0000000e 1444734520.9,1
TIME 0000000e 1444734522.9,1
TIME 0000000e 1444734525.9,1
TIME 0000000e 1444734529.9,1
TIME 0000000e 1444734530.9,1
TIME 0000000e 1444734532.9,1
TIME 0000000e 1444734535.9,1
TIME 0000000e 1444734538.9,1
TIME 0000000e 1444734540.9,1
TIME 0000000e 1444734542.9,1
TIME 0000000e 1444734543.9,1
TIME 0000000e 1444734545.9,1
TIME 0000000e 1444734548.9,1
TIME 0000000e 1444734550.9,1
TIME 0000000e 1444734551.9,1
TIME 0000000e 1444734555.9,1
TIME 0000000e 1444734556.9,1
TIME 0000000e 1444734558.9,1
TIME 0000000e 1444734560.9,1
TIME 0000000e 1444734561.9,1
TIME 0000000e 1444734564.9,1
TIME 0000000e 1444734568.9,1
TIME 0000000e 1444734569.9,1
TIME 0000000e 1444734570.9,1
TIME 0000000e 1444734571.9,1
TIME 0000000e 1444734574.9,1
TIME 0000000e 1444734577.9,1
TIME 0000000e 1444734580.9,1
TIME 0000000e 1444734581.9,1
TIME 0000000e 1444734582.9,1
TIME 0000000e 1444734584.9,1
TIME 0000000e 1444734587.9,1
TIME 0000000e 1444734590.9,1
TIME 0000000e 1444734594.9,1
TIME 0000000e 1444734595.9,1
TIME 0000000e 1444734597.9,1
TIME 0000000e 1444734600.9,1
TIME 0000000e 1444734603.9,1
TIME 0000000e 1444734607.9,1
TIME 0000000e 1444734608.9,1
TIME 0000000e 1444734610.9,1
TIME 0000000e 1444734613.9,1
TIME 0000000e 1444734616.9,1
TIME 0000000e 1444734620.9,1
TIME 0000000e 1444734621.9,1
TIME 0000000e 1444734623.9,1
TIME 0000000e 1444734626.9,1
TIME 0000000e 1444734629.9,1
TIME 0000000e 1444734630.9,1
TIME 0000000e 1444734633.9,1
TIME 0000000e 1444734634.9,1
TIME 0000000e 1444734636.9,1
TIME 0000000e 1444734639.9,1
TIME 0000000e 1444734640.9,1
TIME 0000000e 1444734642.9,1
TIME 0000000e 1444734646.9,1
TIME 0000000e 1444734647.9,1
TIME 0000000e 1444734649.9,1
TIME 0000000e 1444734650.9,1
TIME 0000000e 1444734652.9,1
TIME 0000000e 1444734655.9,1
TIME 0000000e 1444734659.9,1
TIME 0000000e 1444734660.9,1
TIME 0000000e 1444734662.9,1
TIME 0000000e 1444734665.9,1
TIME 0000000e 1444734668.9,1
TIME 0000000e 1444734670.9,1
TIME 0000000e 1444734672.9,1
TIME 0000000e 1444734673.9,1
TIME 0000000e 1444734675.9,1
TIME 0000000e 1444734678.9,1
TIME 0000000e 1444734680.9,1
TIME 0000000e 1444734681.9,1
TIME 0000000e 1444734685.9,1
TIME 0000000e 1444734686.9,1
TIME 0000000e 1444734688.9,1
TIME 0000000e 1444734690.9,1
TIME 0000000e 1444734691.9,1
TIME 0000000e 1444734694.9,1
TIME 0000000e 1444734698.9,1
TIME 0000000e 1444734699.9,1
TIME 0000000e 1444734700.9,1
TIME 0000000e 1444734701.9,1
TIME 0000000e 1444734704.9,1
TIME 0000000e 1444734707.9,1
TIME 0000000e 1444734710.9,1
TIME 0000000e 1444734711.9,1
TIME 0000000e 1444734712.9,1
TIME 0000000e 1444734714.9,1
TIME 0000000e 1444734717.9,1
TIME 0000000e 1444734720.9,1
TIME 0000000e 1444734724.9,1
TIME 0000000e 1444734725.9,1
TIME 0000000e 1444734727.9,1
TIME 0000000e 1444734730.9,1
TIME 0000000e 1444734733.9,1
TIME 0000000e 1444734737.9,1
TIME 0000000e 1444734738.9,1
TIME 0000000e 1444734740.9,1
TIME 0000000e 1444734743.9,1
TIME 0000000e 1444734746.9,1
TIME 0000000e 1444734750.9,1
TIME 0000000e 1444734751.9,1
TIME 0000000e 1444734753.9,1
TIME 0000000e 1444734756.9,1
TIME 0000000e 1444734759.9,1
TIME 0000000e 1444734760.9,1
TIME 0000000e 1444734763.9,1
TIME 0000000e 1444734764.9,1
TIME 0000000e 1444734766.9,1
TIME 0000000e 1444734769.9,1
TIME 0000000e 1444734770.9,1
TIME 0000000e 1444734772.9,1
TIME 0000000e 1444734776.9,1
TIME 0000000e 1444734777.9,1
TIME 0000000e 1444734779.9,1
TIME 0000000e 1444734780.9,1
TIME 0000000e 1444734782.9,1
TIME 0000000e 1444734785.9,1
TIME 0000000e 1444734789.9,1
TIME 0000000e 1444734790.9,1
TIME 0000000e 1444734792.9,1
TIME 0000000e 1444734795.9,1
TIME 0000000e 1444734798.9,1
TIME 0000000e 1444734800.9,1
TIME 0000000e 1444734802.9,1
TIME 0000000e 1444734803.9,1
TIME 0000000e 1444734805.9,1
TIME 0000000e 1444734808.9,1
TIME 0000000e 1444734810.9,1
TIME 0000000e 1444734811.9,1
TIME 0000000e 1444734815.9,1
TIME 0000000e 1444734816.9,1
TIME 0000000c 1444734817,1
TIME 0000000e 1444734818.9,1
TIME 0000000e 1444734820.9,1
TIME 0000000e 1444734821.9,1
TIME 0000000e 1444734824.9,1
TIME 0000000e 1444734828.9,1
TIME 0000000e 1444734829.9,1
TIME 0000000e 1444734830.9,1
TIME 0000000e 1444734831.9,1
TIME 0000000e 1444734834.9,1
TIME 0000000e 1444734837.9,1
TIME 0000000e 1444734840.9,1
TIME 0000000e 1444734841.9,1
TIME 0000000e 1444734842.9,1
TIME 0000000e 1444734844.9,1
TIME 0000000e 1444734847.9,1
TIME 0000000e 1444734850.9,1
TIME 0000000e 1444734854.9,1
TIME 0000000e 1444734855.9,1
TIME 0000000e 1444734857.9,1
TIME 0000000e 1444734860.9,1
TIME 0000000e 1444734863.9,1
TIME 0000000e 1444734867.9,1
TIME 0000000e 1444734868.9,1
TIME 0000000e 1444734870.9,1
TIME 0000000e 1444734873.9,1
TIME 0000000e 1444734876.9,1
TIME 0000000e 1444734880.9,1
TIME 0000000e 1444734881.9,1
TIME 0000000e 1444734883.9,1
TIME 0000000e 1444734886.9,1
TIME 0000000e 1444734889.9,1
TIME 0000000e 1444734890.9,1
TIME 0000000e 1444734893.9,1
TIME 0000000e 1444734894.9,1
TIME 0000000e 1444734896.9,1
TIME 0000000e 1444734899.9,1
TIME 0000000e 1444734900.9,1
TIME 0000000e 1444734902.9,1
TIME 0000000e 1444734906.9,1
TIME 0000000e 1444734907.9,1
TIME 0000000e 1444734909.9,1
TIME 0000000e 1444734910.9,1
TIME 0000000e 1444734912.9,1
TIME 0000000e 1444734915.9,1
TIME 0000000e 1444734919.9,1
TIME 0000000e 1444734920.9,1
TIME 0000000e 1444734922.9,1
TIME 0000000e 1444734925.9,1
TIME 0000000e 1444734928.9,1
TIME 0000000e 1444734930.9,1
TIME 0000000e 1444734932.9,1
TIME 0000000e 1444734933.9,1
TIME 0000000e 1444734935.9,1
TIME 0000000e 1444734938.9,1
TIME 0000000e 1444734940.9,1
TIME 0000000e 1444734941.9,1
TIME 0000000e 1444734945.9,1
TIME 0000000e 1444734946.9,1
TIME 0000000e 1444734948.9,1
TIME 0000000e 1444734950.9,1
TIME 0000000e 1444734951.9,1
TIME 0000000e 1444734954.9,1
TIME 0000000e 1444734958.9,1
TIME 0000000e 1444734959.9,1
TIME 0000000e 1444734960.9,1
TIME 0000000e 1444734961.9,1
TIME 0000000e 1444734964.9,1
TIME 0000000e 1444734967.9,1
TIME 0000000e 1444734970.9,1
TIME 0000000e 1444734971.9,1
TIME 0000000e 1444734972.9,1
TIME 0000000e 1444734974.9,1
TIME 0000000e 1444734977.9,1
TIME 0000000e 1444734980.9,1
TIME 0000000e 1444734984.9,1
TIME 0000000e 1444734985.9,1
TIME 0000000e 1444734987.9,1
TIME 0000000e 1444734990.9,1
TIME 0000000e 1444734993.9,1
TIME 0000000e 1444734997.9,1
TIME 0000000e 1444734998.9,1
TIME 0000000e 1444735000.9,1
TIME 0000000e 1444735003.9,1
TIME 0000000e 1444735006.9,1
TIME 0000000e 1444735010.9,1
TIME 0000000e 1444735011.9,1
TIME 0000000e 1444735013.9,1
TIME 0000000e 1444735016.9,1
TIME 0000000e 1444735019.9,1
TIME 0000000e 1444735020.9,1
TIME 0000000e 1444735023.9,1
TIME 0000000e 1444735024.9,1
TIME 0000000e 1444735026.9,1
TIME 0000000e 1444735029.9,1
TIME 0000000e 1444735030.9,1
TIME 0000000e 1444735032.9,1
TIME 0000000e 1444735036.9,1
TIME 0000000e 1444735037.9,1
TIME 0000000e 1444735039.9,1
TIME 0000000e 1444735040.9,1
TIME 0000000e 1444735042.9,1
TIME 0000000e 1444735045.9,1
TIME 0000000e 1444735049.9,1
TIME 0000000e 1444735050.9,1
TIME 0000000e 1444735052.9,1
TIME 0000000e 1444735055.9,1
TIME 0000000e 1444735058.9,1
TIME 0000000e 1444735060.9,1
TIME 0000000e 1444735062.9,1
TIME 0000000e 1444735063.9,1
TIME 0000000e 1444735065.9,1
TIME 0000000e 1444735068.9,1
TIME 0000000e 1444735070.9,1
TIME 0000000e 1444735071.9,1
TIME 0000000e 1444735075.9,1
TIME 0000000e 1444735076.9,1
TIME 0000000e 1444735078.9,1
TIME 0000000e 1444735080.9,1
TIME 0000000e 1444735081.9,1
TIME 0000000e 1444735084.9,1
TIME 0000000e 1444735088.9,1
TIME 0000000e 1444735089.9,1
TIME 0000000e 1444735090.9,1
TIME 0000000e 1444735091.9,1
TIME 0000000e 1444735094.9,1
TIME 0000000e 1444735097.9,1
TIME 0000000e 1444735100.9,1
TIME 0000000e 1444735101.9,1
TIME 0000000e 1444735102.9,1
TIME 0000000e 1444735104.9,1
TIME 0000000e 1444735107.9,1
TIME 0000000e 1444735110.9,1
TIME 0000000e 1444735114.9,1
TIME 0000000e 1444735115.9,1
TIME 0000000e 1444735117.9,1
TIME 0000000e 1444735120.9,1
TIME 0000000e 1444735123.9,1
TIME 0000000e 1444735127.9,1
TIME 0000000e 1444735128.9,1
TIME 0000000e 1444735130.9,1
TIME 0000000e 1444735133.9,1
TIME 0000000e 1444735136.9,1
TIME 0000000e 1444735140.9,1
TIME 0000000e 1444735141.9,1
TIME 0000000e 1444735143.9,1
TIME 0000000e 1444735146.9,1
TIME 0000000e 1444735149.9,1
TIME 0000000e 1444735150.9,1
TIME 0000000e 1444735153.9,1
TIME 0000000e 1444735154.9,1
TIME 0000000e 1444735156.9,1
TIME 0000000e 1444735159.9,1
TIME 0000000e 1444735160.9,1
TIME 0000000e 1444735162.9,1
TIME 0000000e 1444735166.9,1
TIME 0000000e 1444735167.9,1
TIME 0000000e 1444735169.9,1
TIME 0000000e 1444735170.9,1
TIME 0000000e 1444735172.9,1
TIME 0000000e 1444735175.9,1
TIME 0000000e 1444735179.9,1
TIME 0000000e 1444735180.9,1
TIME 0000000e 1444735182.9,1
TIME 0000000e 1444735185.9,1
TIME 0000000e 1444735188.9,1
TIME 0000000e 1444735190.9,1
TIME 0000000e 1444735192.9,1
TIME 0000000e 1444735193.9,1
TIME 0000000e 1444735195.9,1
TIME 0000000e 1444735198.9,1
TIME 0000000e 1444735200.9,1
TIME 0000000e 1444735201.9,1
TIME 0000000e 1444735205.9,1
TIME 0000000e 1444735206.9,1
TIME 0000000e 1444735208.9,1
TIME 0000000e 1444735210.9,1
TIME 0000000e 1444735211.9,1
TIME 0000000e 1444735214.9,1
TIME 0000000e 1444735218.9,1
TIME 0000000e 1444735219.9,1
TIME 0000000e 1444735220.9,1
TIME 0000000e 1444735221.9,1
TIME 0000000e 1444735224.9,1
TIME 0000000e 1444735227.9,1
TIME 0000000e 1444735230.9,1
TIME 0000000e 1444735231.9,1
TIME 0000000e 1444735232.9,1
TIME 0000000e 1444735234.9,1
TIME 0000000e 1444735237.9,1
TIME 0000000e 1444735240.9,1
TIME 0000000e 1444735244.9,1
TIME 0000000e 1444735245.9,1
TIME 0000000e 1444735247.9,1
TIME 0000000e 1444735250.9,1
TIME 0000000e 1444735253.9,1
TIME 0000000e 1444735257.9,1
TIME 0000000e 1444735258.9,1
TIME 0000000e 1444735260.9,1
TIME 0000000e 1444735263.9,1
TIME 0000000e 1444735266.9,1
TIME 0000000e 1444735270.9,1
TIME 0000000e 1444735271.9,1
TIME 0000000e 1444735273.9,1
TIME 0000000e 1444735276.9,1
TIME 0000000e 1444735279.9,1
TIME 0000000e 1444735280.9,1
TIME 0000000e 1444735283.9,1
TIME 0000000e 1444735284.9,1
TIME 0000000e 1444735286.9,1
TIME 0000000e 1444735289.9,1
TIME 0000000e 1444735290.9,1
TIME 0000000e 1444735292.9,1
TIME 0000000e 1444735296.9,1
TIME 0000000e 1444735297.9,1
TIME 0000000e 1444735299.9,1
TIME 0000000e 1444735300.9,1
TIME 0000000e 1444735302.9,1
TIME 0000000e 1444735305.9,1
TIME 0000000e 1444735309.9,1
TIME 0000000e 1444735310.9,1
TIME 0000000e 1444735312.9,1
TIME 0000000e 1444735315.9,1
TIME 0000000e 1444735318.9,1
TIME 0000000e 1444735320.9,1
TIME 0000000e 1444735322.9,1
TIME 0000000e 1444735323.9,1
TIME 0000000e 1444735325.9,1
TIME 0000000e 1444735328.9,1
TIME 0000000e 1444735330.9,1
TIME 0000000e 1444735331.9,1
TIME 0000000e 1444735335.9,1
TIME 0000000e 1444735336.9,1
TIME 0000000e 1444735338.9,1
TIME 0000000e 1444735340.9,1
TIME 0000000e 1444735341.9,1
TIME 0000000e 1444735344.9,1
TIME 0000000e 1444735348.9,1
TIME 0000000e 1444735349.9,1
TIME 0000000e 1444735350.9,1
TIME 0000000e 1444735351.9,1
TIME 0000000e 1444735354.9,1
TIME 0000000e 1444735357.9,1
TIME 0000000e 1444735360.9,1
TIME 0000000e 1444735361.9,1
TIME 0000000e 1444735362.9,1
TIME 0000000e 1444735364.9,1
TIME 0000000e 1444735367.9,1
TIME 0000000e 1444735370.9,1
TIME 0000000e 1444735374.9,1
TIME 0000000e 1444735375.9,1
TIME 0000000e 1444735377.9,1
TIME 0000000e 1444735380.9,1
TIME 0000000e 1444735383.9,1
TIME 0000000e 1444735387.9,1
TIME 0000000e 1444735388.9,1
TIME 0000000e 1444735390.9,1
TIME 0000000e 1444735393.9,1
TIME 0000000e 1444735396.9,1
TIME 0000000e 1444735400.9,1
TIME 0000000e 1444735401.9,1
TIME 0000000e 1444735403.9,1
TIME 0000000e 1444735406.9,1
TIME 0000000e 1444735409.9,1
TIME 0000000e 1444735410.9,1
TIME 0000000e 1444735413.9,1
TIME 0000000e 1444735414.9,1
TIME 0000000e 1444735416.9,1
TIME 0000000e 1444735419.9,1
TIME 0000000e 1444735420.9,1
TIME 0000000e 1444735422.9,1
TIME 0000000e 1444735426.9,1
TIME 0000000e 1444735427.9,1
TIME 0000000e 1444735429.9,1
TIME 0000000e 1444735430.9,1
TIME 0000000e 1444735432.9,1
TIME 0000000e 1444735435.9,1
TIME 0000000e 1444735439.9,1
TIME 0000000e 1444735440.9,1
TIME 0000000e 1444735442.9,1
TIME 0000000e 1444735445.9,1
TIME 0000000e 1444735448.9,1
TIME 0000000e 1444735450.9,1
TIME 0000000e 1444735452.9,1
TIME 0000000e 1444735453.9,1
TIME 0000000e 1444735455.9,1
TIME 0000000e 1444735458.9,1
TIME 0000000e 1444735460.9,1
TIME 0000000e 1444735461.9,1
TIME 0000000e 1444735465.9,1
TIME 0000000e 1444735466.9,1
TIME 0000000e 1444735468.9,1
TIME 0000000e 1444735470.9,1
TIME 0000000e 1444735471.9,1
TIME 0000000e 1444735474.9,1
TIME 0000000e 1444735478.9,1
TIME 0000000e 1444735479.9,1
TIME 0000000e 1444735480.9,1
TIME 0000000e 1444735481.9,1
TIME 0000000e 1444735484.9,1
TIME 0000000e 1444735487.9,1
TIME 0000000e 1444735490.9,1
TIME 0000000e 1444735491.9,1
TIME 0000000e 1444735492.9,1
TIME 0000000e 1444735494.9,1
TIME 0000000e 1444735497.9,1
TIME 0000000e 1444735500.9,1
TIME 0000000e 1444735504.9,1
TIME 0000000e 1444735505.9,1
TIME 0000000e 1444735507.9,1
TIME 0000000e 1444735510.9,1
TIME 0000000e 1444735513.9,1
TIME 0000000e 1444735517.9,1
TIME 0000000e 1444735518.9,1
TIME 0000000e 1444735520.9,1
TIME 0000000e 1444735523.9,1
TIME 0000000e 1444735526.9,1
TIME 0000000e 1444735530.9,1
TIME 0000000e 1444735531.9,1
TIME 0000000e 1444735533.9,1
TIME 0000000e 1444735536.9,1
TIME 0000000e 1444735539.9,1
TIME 0000000e 1444735540.9,1
TIME 0000000e 1444735543.9,1
TIME 0000000e 1444735544.9,1
TIME 0000000e 1444735546.9,1
TIME 0000000e 1444735549.9,1
TIME 0000000e 1444735550.9,1
TIME 0000000e 1444735552.9,1
TIME 0000000e 1444735556.9,1
TIME 0000000e 1444735557.9,1
TIME 0000000e 1444735559.9,1
TIME 0000000e 1444735560.9,1
TIME 0000000e 1444735562.9,1
TIME 0000000e 1444735565.9,1
TIME 0000000e 1444735569.9,1
TIME 0000000e 1444735570.9,1
TIME 0000000e 1444735572.9,1
TIME 0000000e 1444735575.9,1
TIME 0000000e 1444735578.9,1
TIME 0000000e 1444735580.9,1
TIME 0000000e 1444735582.9,1
TIME 0000000e 1444735583.9,1
TIME 0000000e 1444735585.9,1
TIME 0000000e 1444735588.9,1
TIME 0000000e 1444735590.9,1
TIME 0000000e 1444735591.9,1
TIME 0000000e 1444735595.9,1
TIME 0000000e 1444735596.9,1
TIME 0000000e 1444735598.9,1
TIME 0000000e 1444735600.9,1
TIME 0000000e 1444735601.9,1
TIME 0000000e 1444735604.9,1
TIME 0000000e 1444735608.9,1
TIME 0000000e 1444735609.9,1
TIME 0000000e 1444735610.9,1
TIME 0000000e 1444735611.9,1
TIME 0000000e 1444735614.9,1
TIME 0000000e 1444735617.9,1
TIME 0000000e 1444735620.9,1
TIME 0000000e 1444735621.9,1
TIME 0000000e 1444735622.9,1
TIME 0000000e 1444735624.9,1
TIME 0000000e 1444735627.9,1
TIME 0000000e 1444735630.9,1
TIME 0000000e 1444735634.9,1
TIME 0000000e 1444735635.9,1
TIME 0000000e 1444735637.9,1
TIME 0000000e 1444735640.9,1
TIME 0000000e 1444735643.9,1
TIME 0000000e 1444735647.9,1
TIME 0000000e 1444735648.9,1
TIME 0000000e 1444735650.9,1
TIME 0000000e 1444735653.9,1
TIME 0000000e 1444735656.9,1
TIME 0000000e 1444735660.9,1
TIME 0000000e 1444735661.9,1
TIME 0000000e 1444735663.9,1
TIME 0000000e 1444735666.9,1
TIME 0000000e 1444735669.9,1
TIME 0000000e 1444735670.9,1
TIME 0000000e 1444735673.9,1
TIME 0000000e 1444735674.9,1
TIME 0000000e 1444735676.9,1
TIME 0000000e 1444735679.9,1
TIME 0000000e 1444735680.9,1
TIME 0000000e 1444735682.9,1
TIME 0000000e 1444735686.9,1
TIME 0000000e 1444735687.9,1
TIME 0000000e 1444735689.9,1
TIME 0000000e 1444735690.9,1
TIME 0000000e 1444735692.9,1
TIME 0000000e 1444735695.9,1
TIME 0000000e 1444735699.9,1
TIME 0000000e 1444735700.9,1
TIME 0000000e 1444735702.9,1
TIME 0000000e 1444735705.9,1
TIME 0000000e 1444735708.9,1
TIME 0000000e 1444735710.9,1
TIME 0000000e 1444735712.9,1
TIME 0000000e 1444735713.9,1
TIME 0000000e 1444735715.9,1
TIME 0000000e 1444735718.9,1
TIME 0000000e 1444735720.9,1
TIME 0000000e 1444735721.9,1
TIME 0000000e 1444735725.9,1
TIME 0000000e 1444735726.9,1
TIME 0000000e 1444735728.9,1
TIME 0000000e 1444735730.9,1
TIME 0000000e 1444735731.9,1
TIME 0000000e 1444735734.9,1
TIME 0000000e 1444735738.9,1
TIME 0000000e 1444735739.9,1
TIME 0000000e 1444735740.9,1
TIME 0000000e 1444735741.9,1
TIME 0000000e 1444735744.9,1
TIME 0000000e 1444735747.9,1
TIME 0000000e 1444735750.9,1
TIME 0000000e 1444735751.9,1
TIME 0000000e 1444735752.9,1
TIME 0000000e 1444735754.9,1
TIME 0000000e 1444735757.9,1
TIME 0000000e 1444735760.9,1
TIME 0000000e 1444735764.9,1
TIME 0000000e 1444735765.9,1
TIME 0000000e 1444735767.9,1
TIME 0000000e 1444735770.9,1
TIME 0000000e 1444735773.9,1
TIME 0000000e 1444735777.9,1
TIME 0000000e 1444735778.9,1
TIME 0000000e 1444735780.9,1
TIME 0000000e 1444735783.9,1
TIME 0000000e 1444735786.9,1
TIME 0000000e 1444735790.9,1
TIME 0000000e 1444735791.9,1
TIME 0000000e 1444735793.9,1
TIME 0000000e 1444735796.9,1
TIME 0000000e 1444735799.9,1
TIME 0000000e 1444735800.9,1
TIME 0000000e 1444735803.9,1
TIME 0000000e 1444735804.9,1
TIME 0000000e 1444735806.9,1
TIME 0000000e 1444735809.9,1
TIME 0000000e 1444735810.9,1
TIME 0000000e 1444735812.9,1
TIME 0000000e 1444735816.9,1
TIME 0000000e 1444735817.9,1
TIME 0000000e 1444735819.9,1
TIME 0000000e 1444735820.9,1
TIME 0000000e 1444735822.9,1
TIME 0000000e 1444735825.9,1
TIME 0000000e 1444735829.9,1
TIME 0000000e 1444735830.9,1
TIME 0000000e 1444735832.9,1
TIME 0000000e 1444735835.9,1
TIME 0000000e 1444735838.9,1
TIME 0000000e 1444735840.9,1
TIME 0000000e 1444735842.9,1
TIME 0000000e 1444735843.9,1
TIME 0000000e 1444735845.9,1
TIME 0000000e 1444735848.9,1
TIME 0000000e 1444735850.9,1
TIME 0000000c 1444735851,1
TIME 0000000e 1444735851.9,1
TIME 0000000e 1444735855.9,1
TIME 0000000e 1444735856.9,1
TIME 0000000e 1444735858.9,1
TIME 0000000e 1444735860.9,1
TIME 0000000e 1444735861.9,1
TIME 0000000e 1444735864.9,1
TIME 0000000e 1444735868.9,1
TIME 0000000e 1444735869.9,1
TIME 0000000e 1444735870.9,1
TIME 0000000e 1444735871.9,1
TIME 0000000e 1444735874.9,1
TIME 0000000e 1444735877.9,1
TIME 0000000e 1444735880.9,1
TIME 0000000e 1444735881.9,1
TIME 0000000e 1444735882.9,1
TIME 0000000e 1444735884.9,1
TIME 0000000e 1444735887.9,1
TIME 0000000e 1444735890.9,1
TIME 0000000e 1444735894.9,1
TIME 0000000e 1444735895.9,1
TIME 0000000e 1444735897.9,1
TIME 0000000e 1444735900.9,1
TIME 0000000e 1444735903.9,1
TIME 0000000e 1444735907.9,1
TIME 0000000e 1444735908.9,1
TIME 0000000e 1444735910.9,1
TIME 0000000e 1444735913.9,1
TIME 0000000e 1444735916.9,1
TIME 0000000e 1444735920.9,1
TIME 0000000e 1444735921.9,1
TIME 0000000e 1444735923.9,1
TIME 0000000e 1444735926.9,1
TIME 0000000e 1444735929.9,1
TIME 0000000e 1444735930.9,1
TIME 0000000e 1444735933.9,1
TIME 0000000e 1444735934.9,1
TIME 0000000e 1444735936.9,1
TIME 0000000e 1444735939.9,1
TIME 0000000e 1444735940.9,1
TIME 0000000e 1444735942.9,1
TIME 0000000e 1444735946.9,1
TIME 0000000e 1444735947.9,1
TIME 0000000e 1444735949.9,1
TIME 0000000e 1444735950.9,1
TIME 0000000e 1444735952.9,1
TIME 0000000e 1444735955.9,1
TIME 0000000e 1444735959.9,1
TIME 0000000e 1444735960.9,1
TIME 0000000e 1444735962.9,1
TIME 0000000e 1444735965.9,1
TIME 0000000e 1444735968.9,1
TIME 0000000e 1444735970.9,1
TIME 0000000e 1444735972.9,1
TIME 0000000e 1444735973.9,1
TIME 0000000e 1444735975.9,1
TIME 0000000e 1444735978.9,1
TIME 0000000e 1444735980.9,1
TIME 0000000e 1444735981.9,1
TIME 0000000e 1444735985.9,1
TIME 0000000e 1444735986.9,1
TIME 0000000e 1444735988.9,1
TIME 0000000e 1444735990.9,1
TIME 0000000e 1444735991.9,1
TIME 0000000e 1444735994.9,1
TIME 0000000e 1444735998.9,1
TIME 0000000e 1444735999.9,1
TIME 0000000e 1444736000.9,1
TIME 0000000e 1444736001.9,1
TIME 0000000e 1444736004.9,1
TIME 0000000e 1444736007.9,1
TIME 0000000e 1444736010.9,1
TIME 0000000e 1444736011.9,1
TIME 0000000e 1444736012.9,1
TIME 0000000e 1444736014.9,1
TIME 0000000e 1444736017.9,1
TIME 0000000e 1444736020.9,1
TIME 0000000e 1444736024.9,1
TIME 0000000e 1444736025.9,1
TIME 0000000e 1444736027.9,1
TIME 0000000e 1444736030.9,1
TIME 0000000e 1444736033.9,1
TIME 0000000e 1444736037.9,1
TIME 0000000e 1444736038.9,1
TIME 0000000e 1444736040.9,1
TIME 0000000e 1444736043.9,1
TIME 0000000e 1444736046.9,1
TIME 0000000e 1444736050.9,1
TIME 0000000e 1444736051.9,1
TIME 0000000e 1444736053.9,1
TIME 0000000e 1444736056.9,1
TIME 0000000e 1444736059.9,1
TIME 0000000e 1444736060.9,1
TIME 0000000e 1444736063.9,1
TIME 0000000e 1444736064.9,1
TIME 0000000e 1444736066.9,1
TIME 0000000e 1444736069.9,1
TIME 0000000e 1444736070.9,1
TIME 0000000e 1444736072.9,1
TIME 0000000e 1444736076.9,1
TIME 0000000e 1444736077.9,1
TIME 0000000e 1444736079.9,1
TIME 0000000e 1444736080.9,1
TIME 0000000e 1444736082.9,1
TIME 0000000e 1444736085.9,1
TIME 0000000e 1444736089.9,1
TIME 0000000e 1444736090.9,1
TIME 0000000e 1444736092.9,1
TIME 0000000e 1444736095.9,1
TIME 0000000e 1444736098.9,1
TIME 0000000e 1444736100.9,1
TIME 0000000e 1444736102.9,1
TIME 0000000e 1444736103.9,1
TIME 0000000e 1444736105.9,1
TIME 0000000e 1444736108.9,1
TIME 0000000e 1444736110.9,1
TIME 0000000e 1444736111.9,1
TIME 0000000e 1444736115.9,1
TIME 0000000e 1444736116.9,1
TIME 0000000e 1444736118.9,1
TIME 0000000e 1444736120.9,1
TIME 0000000e 1444736121.9,1
TIME 0000000e 1444736124.9,1
TIME 0000000e 1444736128.9,1
TIME 0000000e 1444736129.9,1
TIME 0000000e 1444736130.9,1
TIME 0000000e 1444736131.9,1
TIME 0000000e 1444736134.9,1
TIME 0000000e 1444736137.9,1
TIME 0000000e 1444736140.9,1
TIME 0000000e 1444736141.9,1
TIME 0000000e 1444736142.9,1
TIME 0000000e 1444736144.9,1
TIME 0000000e 1444736147.9,1
TIME 0000000e 1444736150.9,1
TIME 0000000e 1444736154.9,1
TIME 0000000e 1444736155.9,1
TIME 0000000e 1444736157.9,1
TIME 0000000e 1444736160.9,1
TIME 0000000e 1444736163.9,1
TIME 0000000e 1444736167.9,1
TIME 0000000e 1444736168.9,1
TIME 0000000e 1444736170.9,1
TIME 0000000e 1444736173.9,1
TIME 0000000e 1444736176.9,1
TIME 0000000e 1444736180.9,1
TIME 0000000e 1444736181.9,1
TIME 0000000e 1444736183.9,1
TIME 0000000e 1444736186.9,1
TIME 0000000e 1444736189.9,1
TIME 0000000e 1444736190.9,1
TIME 0000000e 1444736193.9,1
TIME 0000000e 1444736194.9,1
TIME 0000000e 1444736196.9,1
TIME 0000000e 1444736199.9,1
TIME 0000000e 1444736200.9,1
TIME 0000000e 1444736202.9,1
TIME 0000000e 1444736206.9,1
TIME 0000000e 1444736207.9,1
TIME 0000000e 1444736209.9,1
TIME 0000000e 1444736210.9,1
TIME 0000000e 1444736212.9,1
TIME 0000000e 1444736215.9,1
TIME 0000000e 1444736219.9,1
TIME 0000000e 1444736220.9,1
TIME 0000000e 1444736222.9,1
TIME 0000000e 1444736225.9,1
TIME 0000000e 1444736228.9,1
TIME 0000000e 1444736230.9,1
TIME 0000000e 1444736232.9,1
TIME 0000000e 1444736233.9,1
TIME 0000000e 1444736235.9,1
TIME 0000000e 1444736238.9,1
TIME 0000000e 1444736240.9,1
TIME 0000000e 1444736241.9,1
TIME 0000000e 1444736245.9,1
TIME 0000000e 1444736246.9,1
TIME 0000000e 1444736248.9,1
TIME 0000000e 1444736250.9,1
TIME 0000000e 1444736251.9,1
TIME 0000000e 1444736254.9,1
TIME 0000000e 1444736258.9,1
TIME 0000000e 1444736259.9,1
TIME 0000000e 1444736260.9,1
TIME 0000000e 1444736261.9,1
TIME 0000000e 1444736264.9,1
TIME 0000000e 1444736267.9,1
TIME 0000000e 1444736270.9,1
TIME 0000000e 1444736271.9,1
TIME 0000000e 1444736272.9,1
TIME 0000000e 1444736274.9,1
TIME 0000000e 1444736277.9,1
TIME 0000000e 1444736280.9,1
TIME 0000000e 1444736284.9,1
TIME 0000000e 1444736285.9,1
TIME 0000000e 1444736287.9,1
TIME 0000000e 1444736290.9,1
TIME 0000000e 1444736293.9,1
TIME 0000000e 1444736297.9,1
TIME 0000000e 1444736298.9,1
TIME 0000000e 1444736300.9,1
TIME 0000000e 1444736303.9,1
TIME 0000000e 1444736306.9,1
TIME 0000000e 1444736310.9,1
TIME 0000000e 1444736311.9,1
TIME 0000000e 1444736313.9,1
TIME 0000000e 1444736316.9,1
TIME 0000000e 1444736319.9,1
TIME 0000000e 1444736320.9,1
TIME 0000000e 1444736323.9,1
TIME 0000000e 1444736324.9,1
TIME 0000000e 1444736326.9,1
TIME 0000000e 1444736329.9,1
TIME 0000000e 1444736330.9,1
TIME 0000000e 1444736332.9,1
TIME 0000000e 1444736336.9,1
TIME 0000000e 1444736337.9,1
TIME 0000000e 1444736339.9,1
TIME 0000000e 1444736340.9,1
TIME 0000000e 1444736342.9,1
TIME 0000000e 1444736345.9,1
TIME 0000000e 1444736349.9,1
TIME 0000000e 1444736350.9,1
TIME 0000000e 1444736352.9,1
TIME 0000000e 1444736355.9,1
TIME 0000000e 1444736358.9,1
TIME 0000000e 1444736360.9,1
TIME 0000000e 1444736362.9,1
TIME 0000000e 1444736363.9,1
TIME 0000000e 1444736365.9,1
TIME 0000000e 1444736368.9,1
TIME 0000000e 1444736370.9,1
TIME 0000000e 1444736371.9,1
TIME 0000000e 1444736375.9,1
TIME 0000000e 1444736376.9,1
TIME 0000000e 1444736378.9,1
TIME 0000000e 1444736380.9,1
TIME 0000000e 1444736381.9,1
TIME 0000000e 1444736384.9,1
TIME 0000000e 1444736388.9,1
TIME 0000000e 1444736389.9,1
TIME 0000000e 1444736390.9,1
TIME 0000000e 1444736391.9,1
TIME 0000000e 1444736394.9,1
TIME 0000000e 1444736397.9,1
TIME 0000000e 1444736400.9,1
TIME 0000000e 1444736401.9,1
TIME 0000000e 1444736402.9,1
TIME 0000000e 1444736404.9,1
TIME 0000000e 1444736407.9,1
TIME 0000000e 1444736410.9,1
TIME 0000000e 1444736414.9,1
TIME 0000000e 1444736415.9,1
TIME 0000000e 1444736417.9,1
TIME 0000000e 1444736420.9,1
TIME 0000000e 1444736423.9,1
TIME 0000000e 1444736427.9,1
TIME 0000000e 1444736428.9,1
TIME 0000000e 1444736430.9,1
TIME 0000000e 1444736433.9,1
TIME 0000000e 1444736436.9,1
TIME 0000000e 1444736440.9,1
TIME 0000000e 1444736441.9,1
TIME 0000000e 1444736443.9,1
TIME 0000000e 1444736446.9,1
TIME 0000000e 1444736449.9,1
TIME 0000000e 1444736450.9,1
TIME 0000000e 1444736453.9,1
TIME 0000000e 1444736454.9,1
TIME 0000000e 1444736456.9,1
TIME 0000000e 1444736459.9,1
TIME 0000000e 1444736460.9,1
TIME 0000000e 1444736462.9,1
TIME 0000000e 1444736466.9,1
TIME 0000000e 1444736467.9,1
TIME 0000000e 1444736469.9,1
TIME 0000000e 1444736470.9,1
TIME 0000000e 1444736472.9,1
TIME 0000000e 1444736475.9,1
TIME 0000000e 1444736479.9,1
TIME 0000000e 1444736480.9,1
TIME 0000000e 1444736482.9,1
TIME 0000000e 1444736485.9,1
TIME 0000000e 1444736488.9,1
TIME 0000000e 1444736490.9,1
TIME 0000000e 1444736492.9,1
TIME 0000000e 1444736493.9,1
TIME 0000000e 1444736495.9,1
TIME 0000000e 1444736498.9,1
TIME 0000000e 1444736500.9,1
TIME 0000000e 1444736501.9,1
TIME 0000000e 1444736505.9,1
TIME 0000000e 1444736506.9,1
TIME 0000000e 1444736508.9,1
TIME 0000000e 1444736510.9,1
TIME 0000000e 1444736511.9,1
TIME 0000000e 1444736514.9,1
TIME 0000000e 1444736518.9,1
TIME 0000000e 1444736519.9,1
TIME 0000000e 1444736520.9,1
TIME 0000000e 1444736521.9,1
TIME 0000000e 1444736524.9,1
TIME 0000000e 1444736527.9,1
TIME 0000000e 1444736530.9,1
TIME 0000000e 1444736531.9,1
TIME 0000000e 1444736532.9,1
TIME 0000000e 1444736534.9,1
TIME 0000000e 1444736537.9,1
TIME 0000000e 1444736540.9,1
TIME 0000000e 1444736544.9,1
TIME 0000000e 1444736545.9,1
TIME 0000000e 1444736547.9,1
TIME 0000000e 1444736550.9,1
TIME 0000000e 1444736553.9,1
TIME 0000000e 1444736557.9,1
TIME 0000000e 1444736558.9,1
TIME 0000000e 1444736560.9,1
TIME 0000000e 1444736563.9,1
TIME 0000000e 1444736566.9,1
TIME 0000000e 1444736570.9,1
TIME 0000000e 1444736571.9,1
TIME 0000000e 1444736573.9,1
TIME 0000000e 1444736576.9,1
TIME 0000000e 1444736579.9,1
TIME 0000000e 1444736580.9,1
TIME 0000000e 1444736583.9,1
TIME 0000000e 1444736584.9,1
TIME 0000000e 1444736586.9,1
TIME 0000000e 1444736589.9,1
TIME 0000000e 1444736590.9,1
TIME 0000000e 1444736592.9,1
TIME 0000000e 1444736596.9,1
TIME 0000000e 1444736597.9,1
TIME 0000000e 1444736599.9,1
TIME 0000000e 1444736600.9,1
TIME 0000000e 1444736602.9,1
TIME 0000000e 1444736605.9,1
TIME 0000000e 1444736609.9,1
TIME 0000000e 1444736610.9,1
TIME 0000000e 1444736612.9,1
TIME 0000000e 1444736615.9,1
TIME 0000000e 1444736618.9,1
TIME 0000000e 1444736620.9,1
TIME 0000000e 1444736622.9,1
TIME 0000000e 1444736623.9,1
TIME 0000000e 1444736625.9,1
TIME 0000000e 1444736628.9,1
TIME 0000000e 1444736630.9,1
TIME 0000000e 1444736631.9,1
TIME 0000000e 1444736635.9,1
TIME 0000000e 1444736636.9,1
TIME 0000000e 1444736638.9,1
TIME 0000000e 1444736640.9,1
TIME 0000000e 1444736641.9,1
TIME 0000000e 1444736644.9,1
TIME 0000000e 1444736648.9,1
TIME 0000000e 1444736649.9,1
TIME 0000000e 1444736650.9,1
TIME 0000000e 1444736651.9,1
TIME 0000000e 1444736654.9,1
TIME 0000000e 1444736657.9,1
TIME 0000000e 1444736660.9,1
TIME 0000000e 1444736661.9,1
TIME 0000000e 1444736662.9,1
TIME 0000000e 1444736664.9,1
TIME 0000000e 1444736667.9,1
TIME 0000000e 1444736670.9,1
TIME 0000000e 1444736674.9,1
TIME 0000000e 1444736675.9,1
TIME 0000000e 1444736677.9,1
TIME 0000000e 1444736680.9,1
TIME 0000000e 1444736683.9,1
TIME 0000000e 1444736687.9,1
TIME 0000000e 1444736688.9,1
TIME 0000000e 1444736690.9,1
TIME 0000000e 1444736693.9,1
TIME 0000000e 1444736696.9,1
TIME 0000000e 1444736700.9,1
TIME 0000000e 1444736701.9,1
TIME 0000000e 1444736703.9,1
TIME 0000000e 1444736706.9,1
TIME 0000000e 1444736709.9,1
TIME 0000000e 1444736710.9,1
TIME 0000000e 1444736713.9,1
TIME 0000000e 1444736714.9,1
TIME 0000000e 1444736716.9,1
TIME 0000000e 1444736719.9,1
TIME 0000000e 1444736720.9,1
TIME 0000000e 1444736722.9,1
TIME 0000000e 1444736726.9,1
TIME 0000000e 1444736727.9,1
TIME 0000000e 1444736729.9,1
TIME 0000000e 1444736730.9,1
TIME 0000000e 1444736732.9,1
TIME 0000000e 1444736735.9,1
TIME 0000000e 1444736739.9,1
TIME 0000000e 1444736740.9,1
TIME 0000000e 1444736742.9,1
TIME 0000000e 1444736745.9,1
TIME 0000000e 1444736748.9,1
TIME 0000000e 1444736750.9,1
TIME 0000000e 1444736752.9,1
TIME 0000000e 1444736753.9,1
TIME 0000000e 1444736755.9,1
TIME 0000000e 1444736758.9,1
TIME 0000000e 1444736760.9,1
TIME 0000000e 1444736761.9,1
TIME 0000000e 1444736765.9,1
TIME 0000000e 1444736766.9,1
TIME 0000000e 1444736768.9,1
TIME 0000000e 1444736770.9,1
TIME 0000000e 1444736771.9,1
TIME 0000000e 1444736774.9,1
TIME 0000000e 1444736778.9,1
TIME 0000000e 1444736779.9,1
TIME 0000000e 1444736780.9,1
TIME 0000000e 1444736781.9,1
TIME 0000000e 1444736784.9,1
TIME 0000000e 1444736787.9,1
TIME 0000000e 1444736790.9,1
TIME 0000000e 1444736791.9,1
TIME 0000000e 1444736792.9,1
TIME 0000000e 1444736794.9,1
TIME 0000000e 1444736797.9,1
TIME 0000000e 1444736800.9,1
TIME 0000000e 1444736804.9,1
TIME 0000000e 1444736805.9,1
TIME 0000000e 1444736807.9,1
TIME 0000000e 1444736810.9,1
TIME 0000000e 1444736813.9,1
TIME 0000000e 1444736817.9,1
TIME 0000000e 1444736818.9,1
TIME 0000000e 1444736820.9,1
TIME 0000000e 1444736823.9,1
TIME 0000000e 1444736826.9,1
TIME 0000000e 1444736830.9,1
TIME 0000000e 1444736831.9,1
TIME 0000000e 1444736833.9,1
TIME 0000000e 1444736836.9,1
TIME 0000000e 1444736839.9,1
TIME 0000000e 1444736840.9,1
TIME 0000000e 1444736843.9,1
TIME 0000000e 1444736844.9,1
TIME 0000000e 1444736846.9,1
TIME 0000000e 1444736849.9,1
TIME 0000000e 1444736850.9,1
TIME 0000000e 1444736852.9,1
TIME 0000000e 1444736856.9,1
TIME 0000000e 1444736857.9,1
TIME 0000000e 1444736859.9,1
TIME 0000000e 1444736860.9,1
TIME 0000000e 1444736862.9,1
TIME 0000000e 1444736865.9,1
TIME 0000000e 1444736869.9,1
TIME 0000000e 1444736870.9,1
TIME 0000000e 1444736872.9,1
TIME 0000000e 1444736875.9,1
TIME 0000000e 1444736878.9,1
TIME 0000000e 1444736880.9,1
TIME 0000000e 1444736882.9,1
TIME 0000000e 1444736883.9,1
TIME 0000000e 1444736885.9,1
TIME 0000000e 1444736888.9,1
TIME 0000000e 1444736890.9,1
TIME 0000000e 1444736891.9,1
TIME 0000000e 1444736895.9,1
TIME 0000000e 1444736896.9,1
TIME 0000000e 1444736898.9,1
TIME 0000000e 1444736900.9,1
TIME 0000000e 1444736901.9,1
TIME 0000000e 1444736904.9,1
TIME 0000000e 1444736908.9,1
TIME 0000000e 1444736909.9,1
TIME 0000000e 1444736910.9,1
TIME 0000000e 1444736911.9,1
TIME 0000000e 1444736914.9,1
TIME 0000000e 1444736917.9,1
TIME 0000000e 1444736920.9,1
TIME 0000000c 1444736921,1
TIME 0000000e 1444736921.9,1
TIME 0000000e 1444736922.9,1
TIME 0000000e 1444736924.9,1
TIME 0000000e 1444736927.9,1
TIME 0000000e 1444736930.9,1
TIME 0000000e 1444736934.9,1
TIME 0000000e 1444736935.9,1
TIME 0000000e 1444736937.9,1
TIME 0000000e 1444736940.9,1
TIME 0000000e 1444736943.9,1
TIME 0000000e 1444736947.9,1
TIME 0000000e 1444736948.9,1
TIME 0000000e 1444736950.9,1
TIME 0000000e 1444736953.9,1
TIME 0000000e 1444736956.9,1
TIME 0000000e 1444736960.9,1
TIME 0000000e 1444736961.9,1
TIME 0000000e 1444736963.9,1
TIME 0000000e 1444736966.9,1
TIME 0000000e 1444736969.9,1
TIME 0000000e 1444736970.9,1
TIME 0000000e 1444736973.9,1
TIME 0000000e 1444736974.9,1
TIME 0000000e 1444736976.9,1
TIME 0000000e 1444736979.9,1
TIME 0000000e 1444736980.9,1
TIME 0000000e 1444736982.9,1
TIME 0000000e 1444736986.9,1
TIME 0000000e 1444736987.9,1
TIME 0000000e 1444736989.9,1
TIME 0000000e 1444736990.9,1
TIME 0000000e 1444736992.9,1
TIME 0000000e 1444736995.9,1
TIME 0000000e 1444736999.9,1
TIME 0000000e 1444737000.9,1
TIME 0000000e 1444737002.9,1
TIME 0000000e 1444737005.9,1
TIME 0000000e 1444737008.9,1
TIME 0000000e 1444737010.9,1
TIME 0000000e 1444737012.9,1
TIME 0000000e 1444737013.9,1
TIME 0000000e 1444737015.9,1
TIME 0000000e 1444737018.9,1
TIME 0000000e 1444737020.9,1
TIME 0000000e 1444737021.9,1
TIME 0000000e 1444737025.9,1
TIME 0000000e 1444737026.9,1
TIME 0000000e 1444737028.9,1
TIME 0000000e 1444737030.9,1
TIME 0000000e 1444737031.9,1
TIME 0000000e 1444737034.9,1
TIME 0000000e 1444737038.9,1
TIME 0000000e 1444737039.9,1
TIME 0000000e 1444737040.9,1
TIME 0000000e 1444737041.9,1
TIME 0000000e 1444737044.9,1
TIME 0000000e 1444737047.9,1
TIME 0000000e 1444737050.9,1
TIME 0000000e 1444737051.9,1
TIME 0000000e 1444737052.9,1
TIME 0000000e 1444737054.9,1
TIME 0000000e 1444737057.9,1
TIME 0000000e 1444737060.9,1
TIME 0000000e 1444737064.9,1
TIME 0000000e 1444737065.9,1
TIME 0000000e 1444737067.9,1
TIME 0000000e 1444737070.9,1
TIME 0000000e 1444737073.9,1
TIME 0000000e 1444737077.9,1
TIME 0000000e 1444737078.9,1
TIME 0000000e 1444737080.9,1
TIME 0000000e 1444737083.9,1
TIME 0000000e 1444737086.9,1
TIME 0000000e 1444737090.9,1
TIME 0000000e 1444737091.9,1
TIME 0000000e 1444737093.9,1
TIME 0000000e 1444737096.9,1
TIME 0000000e 1444737099.9,1
TIME 0000000e 1444737100.9,1
TIME 0000000e 1444737103.9,1
TIME 0000000e 1444737104.9,1
TIME 0000000e 1444737106.9,1
TIME 0000000e 1444737109.9,1
TIME 0000000e 1444737110.9,1
TIME 0000000e 1444737112.9,1
TIME 0000000e 1444737116.9,1
TIME 0000000e 1444737117.9,1
TIME 0000000e 1444737119.9,1
TIME 0000000e 1444737120.9,1
TIME 0000000e 1444737122.9,1
TIME 0000000e 1444737125.9,1
TIME 0000000e 1444737129.9,1
TIME 0000000e 1444737130.9,1
TIME 0000000e 1444737132.9,1
TIME 0000000e 1444737135.9,1
TIME 0000000e 1444737138.9,1
TIME 0000000e 1444737140.9,1
TIME 0000000e 1444737142.9,1
TIME 0000000e 1444737143.9,1
TIME 0000000e 1444737145.9,1
TIME 0000000e 1444737148.9,1
TIME 0000000e 1444737150.9,1
TIME 0000000e 1444737151.9,1
TIME 0000000e 1444737155.9,1
TIME 0000000e 1444737156.9,1
TIME 0000000e 1444737158.9,1
TIME 0000000e 1444737160.9,1
TIME 0000000e 1444737161.9,1
TIME 0000000e 1444737164.9,1
TIME 0000000e 1444737168.9,1
TIME 0000000e 1444737169.9,1
TIME 0000000e 1444737170.9,1
TIME 0000000e 1444737171.9,1
TIME 0000000e 1444737174.9,1
TIME 0000000e 1444737177.9,1
TIME 0000000e 1444737180.9,1
TIME 0000000e 1444737181.9,1
TIME 0000000e 1444737182.9,1
TIME 0000000e 1444737184.9,1
TIME 0000000e 1444737187.9,1
TIME 0000000e 1444737190.9,1
TIME 0000000e 1444737194.9,1
TIME 0000000e 1444737195.9,1
TIME 0000000e 1444737197.9,1
TIME 0000000e 1444737200.9,1
TIME 0000000e 1444737203.9,1
TIME 0000000e 1444737207.9,1
TIME 0000000e 1444737208.9,1
TIME 0000000e 1444737210.9,1
TIME 0000000e 1444737213.9,1
TIME 0000000e 1444737216.9,1
TIME 0000000e 1444737220.9,1
TIME 0000000e 1444737221.9,1
TIME 0000000e 1444737223.9,1
TIME 0000000e 1444737226.9,1
TIME 0000000e 1444737229.9,1
TIME 0000000e 1444737230.9,1
TIME 0000000e 1444737233.9,1
TIME 0000000e 1444737234.9,1
TIME 0000000e 1444737236.9,1
TIME 0000000e 1444737239.9,1
TIME 0000000e 1444737240.9,1
TIME 0000000e 1444737242.9,1
TIME 0000000e 1444737246.9,1
TIME 0000000e 1444737247.9,1
TIME 0000000e 1444737249.9,1
TIME 0000000e 1444737250.9,1
TIME 0000000e 1444737252.9,1
TIME 0000000e 1444737255.9,1
TIME 0000000e 1444737259.9,1
TIME 0000000e 1444737260.9,1
TIME 0000000e 1444737262.9,1
TIME 0000000e 1444737265.9,1
TIME 0000000e 1444737268.9,1
TIME 0000000e 1444737270.9,1
TIME 0000000e 1444737272.9,1
TIME 0000000e 1444737273.9,1
TIME 0000000e 1444737275.9,1
TIME 0000000e 1444737278.9,1
TIME 0000000e 1444737280.9,1
TIME 0000000e 1444737281.9,1
TIME 0000000e 1444737285.9,1
TIME 0000000e 1444737286.9,1
TIME 0000000e 1444737288.9,1
TIME 0000000e 1444737290.9,1
TIME 0000000e 1444737291.9,1
TIME 0000000e 1444737294.9,1
TIME 0000000e 1444737298.9,1
TIME 0000000e 1444737299.9,1
TIME 0000000e 1444737300.9,1
TIME 0000000e 1444737301.9,1
TIME 0000000e 1444737304.9,1
TIME 0000000e 1444737307.9,1
TIME 0000000e 1444737310.9,1
TIME 0000000e 1444737311.9,1
TIME 0000000e 1444737312.9,1
TIME 0000000e 1444737314.9,1
TIME 0000000e 1444737317.9,1
TIME 0000000e 1444737320.9,1
TIME 0000000e 1444737324.9,1
TIME 0000000e 1444737325.9,1
TIME 0000000e 1444737327.9,1
TIME 0000000e 1444737330.9,1
TIME 0000000e 1444737333.9,1
TIME 0000000e 1444737337.9,1
TIME 0000000e 1444737338.9,1
TIME 0000000e 1444737340.9,1
TIME 0000000e 1444737343.9,1
TIME 0000000e 1444737346.9,1
TIME 0000000e 1444737350.9,1
TIME 0000000e 1444737351.9,1
TIME 0000000e 1444737353.9,1
TIME 0000000e 1444737356.9,1
TIME 0000000e 1444737359.9,1
TIME 0000000e 1444737360.9,1
TIME 0000000e 1444737363.9,1
TIME 0000000e 1444737364.9,1
TIME 0000000e 1444737366.9,1
TIME 0000000e 1444737369.9,1
TIME 0000000e 1444737370.9,1
TIME 0000000e 1444737372.9,1
TIME 0000000e 1444737376.9,1
TIME 0000000e 1444737377.9,1
TIME 0000000e 1444737379.9,1
TIME 0000000e 1444737380.9,1
TIME 0000000e 1444737382.9,1
TIME 0000000e 1444737385.9,1
TIME 0000000e 1444737389.9,1
TIME 0000000e 1444737390.9,1
TIME 0000000e 1444737392.9,1
TIME 0000000e 1444737395.9,1
TIME 0000000e 1444737398.9,1
TIME 0000000e 1444737400.9,1
TIME 0000000e 1444737402.9,1
TIME 0000000e 1444737403.9,1
TIME 0000000e 1444737405.9,1
TIME 0000000e 1444737408.9,1
TIME 0000000e 1444737410.9,1
TIME 0000000e 1444737411.9,1
TIME 0000000e 1444737415.9,1
TIME 0000000e 1444737416.9,1
TIME 0000000e 1444737418.9,1
TIME 0000000e 1444737420.9,1
TIME 0000000e 1444737421.9,1
TIME 0000000e 1444737424.9,1
TIME 0000000e 1444737428.9,1
TIME 0000000e 1444737429.9,1
TIME 0000000e 1444737430.9,1
TIME 0000000e 1444737431.9,1
TIME 0000000e 1444737434.9,1
TIME 0000000e 1444737437.9,1
TIME 0000000e 1444737440.9,1
TIME 0000000e 1444737441.9,1
TIME 0000000e 1444737442.9,1
TIME 0000000e 1444737444.9,1
TIME 0000000e 1444737447.9,1
TIME 0000000e 1444737450.9,1
TIME 0000000e 1444737454.9,1
TIME 0000000e 1444737455.9,1
TIME 0000000e 1444737457.9,1
TIME 0000000e 1444737460.9,1
TIME 0000000e 1444737463.9,1
TIME 0000000e 1444737467.9,1
TIME 0000000e 1444737468.9,1
TIME 0000000e 1444737470.9,1
TIME 0000000e 1444737473.9,1
TIME 0000000e 1444737476.9,1
TIME 0000000e 1444737480.9,1
TIME 0000000e 1444737481.9,1
TIME 0000000e 1444737483.9,1
TIME 0000000e 1444737486.9,1
TIME 0000000e 1444737489.9,1
TIME 0000000e 1444737490.9,1
TIME 0000000e 1444737493.9,1
TIME 0000000e 1444737494.9,1
TIME 0000000e 1444737496.9,1
TIME 0000000e 1444737499.9,1
TIME 0000000e 1444737500.9,1
TIME 0000000e 1444737502.9,1
TIME 0000000e 1444737506.9,1
TIME 0000000e 1444737507.9,1
TIME 0000000e 1444737509.9,1
TIME 0000000e 1444737510.9,1
TIME 0000000e 1444737512.9,1
TIME 0000000e 1444737515.9,1
TIME 0000000e 1444737519.9,1
TIME 0000000e 1444737520.9,1
TIME 0000000e 1444737522.9,1
TIME 0000000e 1444737525.9,1
TIME 0000000e 1444737528.9,1
TIME 0000000e 1444737530.9,1
TIME 0000000e 1444737532.9,1
TIME 0000000e 1444737533.9,1
TIME 0000000e 1444737535.9,1
TIME 0000000e 1444737538.9,1
TIME 0000000e 1444737540.9,1
TIME 0000000e 1444737541.9,1
TIME 0000000e 1444737545.9,1
TIME 0000000e 1444737546.9,1
TIME 0000000e 1444737548.9,1
TIME 0000000e 1444737550.9,1
TIME 0000000e 1444737551.9,1
TIME 0000000e 1444737554.9,1
TIME 0000000e 1444737558.9,1
TIME 0000000e 1444737559.9,1
TIME 0000000e 1444737560.9,1
TIME 0000000e 1444737561.9,1
TIME 0000000e 1444737564.9,1
TIME 0000000e 1444737567.9,1
TIME 0000000e 1444737570.9,1
TIME 0000000e 1444737571.9,1
TIME 0000000e 1444737572.9,1
TIME 0000000e 1444737574.9,1
TIME 0000000e 1444737577.9,1
TIME 0000000e 1444737580.9,1
TIME 0000000e 1444737584.9,1
TIME 0000000e 1444737585.9,1
TIME 0000000e 1444737587.9,1
TIME 0000000e 1444737590.9,1
TIME 0000000e 1444737593.9,1
TIME 0000000e 1444737597.9,1
TIME 0000000e 1444737598.9,1
TIME 0000000e 1444737600.9,1
TIME 0000000e 1444737603.9,1
TIME 0000000e 1444737606.9,1
TIME 0000000e 1444737610.9,1
TIME 0000000e 1444737611.9,1
TIME 0000000e 1444737613.9,1
TIME 0000000e 1444737616.9,1
TIME 0000000e 1444737619.9,1
TIME 0000000e 1444737620.9,1
TIME 0000000e 1444737623.9,1
TIME 0000000e 1444737624.9,1
TIME 0000000e 1444737626.9,1
TIME 0000000e 1444737629.9,1
TIME 0000000e 1444737630.9,1
TIME 0000000e 1444737632.9,1
TIME 0000000e 1444737636.9,1
TIME 0000000e 1444737637.9,1
TIME 0000000e 1444737639.9,1
TIME 0000000e 1444737640.9,1
TIME 0000000e 1444737642.9,1
TIME 0000000e 1444737645.9,1
TIME 0000000e 1444737649.9,1
TIME 0000000e 1444737650.9,1
TIME 0000000e 1444737652.9,1
TIME 0000000e 1444737655.9,1
TIME 0000000e 1444737658.9,1
TIME 0000000e 1444737660.9,1
TIME 0000000e 1444737662.9,1
TIME 0000000e 1444737663.9,1
TIME 0000000e 1444737665.9,1
TIME 0000000e 1444737668.9,1
TIME 0000000e 1444737670.9,1
TIME 0000000e 1444737671.9,1
TIME 0000000e 1444737675.9,1
TIME 0000000e 1444737676.9,1
TIME 0000000e 1444737678.9,1
TIME 0000000e 1444737680.9,1
TIME 0000000e 1444737681.9,1
TIME 0000000e 1444737684.9,1
TIME 0000000e 1444737688.9,1
TIME 0000000e 1444737689.9,1
TIME 0000000e 1444737690.9,1
TIME 0000000e 1444737691.9,1
TIME 0000000e 1444737694.9,1
TIME 0000000e 1444737697.9,1
TIME 0000000e 1444737700.9,1
TIME 0000000e 1444737701.9,1
TIME 0000000e 1444737702.9,1
TIME 0000000e 1444737704.9,1
TIME 0000000e 1444737707.9,1
TIME 0000000e 1444737710.9,1
TIME 0000000e 1444737714.9,1
TIME 0000000e 1444737715.9,1
TIME 0000000e 1444737717.9,1
TIME 0000000e 1444737720.9,1
TIME 0000000e 1444737723.9,1
TIME 0000000e 1444737727.9,1
TIME 0000000e 1444737728.9,1
TIME 0000000e 1444737730.9,1
TIME 0000000e 1444737733.9,1
TIME 0000000e 1444737736.9,1
TIME 0000000e 1444737740.9,1
TIME 0000000e 1444737741.9,1
TIME 0000000e 1444737743.9,1
TIME 0000000e 1444737746.9,1
TIME 0000000e 1444737749.9,1
TIME 0000000e 1444737750.9,1
TIME 0000000e 1444737753.9,1
TIME 0000000e 1444737754.9,1
TIME 0000000e 1444737756.9,1
TIME 0000000e 1444737759.9,1
TIME 0000000e 1444737760.9,1
TIME 0000000e 1444737762.9,1
TIME 0000000e 1444737766.9,1
TIME 0000000e 1444737767.9,1
TIME 0000000e 1444737769.9,1
TIME 0000000e 1444737770.9,1
TIME 0000000e 1444737772.9,1
TIME 0000000e 1444737775.9,1
TIME 0000000e 1444737779.9,1
TIME 0000000e 1444737780.9,1
TIME 0000000e 1444737782.9,1
TIME 0000000e 1444737785.9,1
TIME 0000000e 1444737788.9,1
TIME 0000000e 1444737790.9,1
TIME 0000000e 1444737792.9,1
TIME 0000000e 1444737793.9,1
TIME 0000000e 1444737795.9,1
TIME 0000000e 1444737798.9,1
TIME 0000000e 1444737800.9,1
TIME 0000000e 1444737801.9,1
TIME 0000000e 1444737805.9,1
TIME 0000000e 1444737806.9,1
TIME 0000000e 1444737808.9,1
TIME 0000000e 1444737810.9,1
TIME 0000000e 1444737811.9,1
TIME 0000000e 1444737814.9,1
TIME 0000000e 1444737818.9,1
TIME 0000000e 1444737819.9,1
TIME 0000000e 1444737820.9,1
TIME 0000000e 1444737821.9,1
TIME 0000000e 1444737824.9,1
TIME 0000000e 1444737827.9,1
TIME 0000000e 1444737830.9,1
TIME 0000000e 1444737831.9,1
TIME 0000000e 1444737832.9,1
TIME 0000000e 1444737834.9,1
TIME 0000000e 1444737837.9,1
TIME 0000000e 1444737840.9,1
TIME 0000000e 1444737844.9,1
TIME 0000000e 1444737845.9,1
TIME 0000000e 1444737847.9,1
TIME 0000000e 1444737850.9,1
TIME 0000000e 1444737853.9,1
TIME 0000000e 1444737857.9,1
TIME 0000000e 1444737858.9,1
TIME 0000000e 1444737860.9,1
TIME 0000000e 1444737863.9,1
TIME 0000000e 1444737866.9,1
TIME 0000000e 1444737870.9,1
TIME 0000000e 1444737871.9,1
TIME 0000000e 1444737873.9,1
TIME 0000000e 1444737876.9,1
TIME 0000000e 1444737879.9,1
TIME 0000000e 1444737880.9,1
TIME 0000000e 1444737883.9,1
TIME 0000000e 1444737884.9,1
TIME 0000000e 1444737886.9,1
TIME 0000000e 1444737889.9,1
TIME 0000000e 1444737890.9,1
TIME 0000000e 1444737892.9,1
TIME 0000000e 1444737896.9,1
TIME 0000000e 1444737897.9,1
TIME 0000000e 1444737899.9,1
TIME 0000000e 1444737900.9,1
TIME 0000000e 1444737902.9,1
TIME 0000000e 1444737905.9,1
TIME 0000000c 1444737906,1
TIME 0000000e 1444737909.9,1
TIME 0000000e 1444737910.9,1
TIME 0000000e 1444737912.9,1
TIME 0000000e 1444737915.9,1
TIME 0000000e 1444737918.9,1
TIME 0000000e 1444737920.9,1
TIME 0000000e 1444737922.9,1
TIME 0000000e 1444737923.9,1
TIME 0000000e 1444737925.9,1
TIME 0000000e 1444737928.9,1
TIME 0000000e 1444737930.9,1
TIME 0000000e 1444737931.9,1
TIME 0000000e 1444737935.9,1
TIME 0000000e 1444737936.9,1
TIME 0000000e 1444737938.9,1
TIME 0000000e 1444737940.9,1
TIME 0000000e 1444737941.9,1
TIME 0000000e 1444737944.9,1
TIME 0000000e 1444737948.9,1
TIME 0000000e 1444737949.9,1
TIME 0000000e 1444737950.9,1
TIME 0000000e 1444737951.9,1
TIME 0000000e 1444737954.9,1
TIME 0000000e 1444737957.9,1
TIME 0000000e 1444737960.9,1
TIME 0000000e 1444737961.9,1
TIME 0000000e 1444737962.9,1
TIME 0000000e 1444737964.9,1
TIME 0000000e 1444737967.9,1
TIME 0000000e 1444737970.9,1
TIME 0000000e 1444737974.9,1
TIME 0000000e 1444737975.9,1
TIME 0000000e 1444737977.9,1
TIME 0000000e 1444737980.9,1
TIME 0000000e 1444737983.9,1
TIME 0000000e 1444737987.9,1
TIME 0000000e 1444737988.9,1
TIME 0000000e 1444737990.9,1
TIME 0000000e 1444737993.9,1
TIME 0000000e 1444737996.9,1
TIME 0000000e 1444738000.9,1
TIME 0000000e 1444738001.9,1
TIME 0000000c 1444738002,1
TIME 0000000e 1444738003.9,1
TIME 0000000c 1444738004,1
TIME 0000000e 1444738006.9,1
TIME 0000000c 1444738007,1
TIME 0000000e 1444738009.9,1
TIME 0000000e 1444738010.9,1
TIME 0000000c 1444738011,1
TIME 0000000e 1444738013.9,1
TIME 0000000c 1444738014,1
TIME 0000000e 1444738014.9,1
TIME 0000000e 1444738016.9,1
TIME 0000000e 1444738019.9,1
TIME 0000000e 1444738020.9,1
TIME 0000000e 1444738022.9,1
TIME 0000000e 1444738026.9,1
TIME 0000000e 1444738027.9,1
TIME 0000000e 1444738029.9,1
TIME 0000000e 1444738030.9,1
TIME 0000000e 1444738032.9,1
TIME 0000000e 1444738035.9,1
TIME 0000000e 1444738039.9,1
TIME 0000000e 1444738040.9,1
TIME 0000000e 1444738042.9,1
TIME 0000000e 1444738045.9,1
TIME 0000000e 1444738048.9,1
TIME 0000000e 1444738050.9,1
TIME 0000000e 1444738052.9,1
TIME 0000000e 1444738053.9,1
TIME 0000000e 1444738055.9,1
TIME 0000000e 1444738058.9,1
TIME 0000000e 1444738060.9,1
TIME 0000000e 1444738061.9,1
TIME 0000000e 1444738065.9,1
TIME 0000000e 1444738066.9,1
TIME 0000000e 1444738068.9,1
TIME 0000000e 1444738070.9,1
TIME 0000000e 1444738071.9,1
TIME 0000000e 1444738074.9,1
TIME 0000000e 1444738078.9,1
TIME 0000000e 1444738079.9,1
TIME 0000000e 1444738080.9,1
TIME 0000000e 1444738081.9,1
TIME 0000000e 1444738084.9,1
TIME 0000000e 1444738087.9,1
TIME 0000000e 1444738090.9,1
TIME 0000000e 1444738091.9,1
TIME 0000000e 1444738092.9,1
TIME 0000000e 1444738094.9,1
TIME 0000000e 1444738097.9,1
TIME 0000000e 1444738100.9,1
TIME 0000000e 1444738104.9,1
TIME 0000000e 1444738105.9,1
TIME 0000000e 1444738107.9,1
TIME 0000000e 1444738110.9,1
TIME 0000000e 1444738113.9,1
TIME 0000000e 1444738117.9,1
TIME 0000000e 1444738118.9,1
TIME 0000000e 1444738120.9,1
TIME 0000000e 1444738123.9,1
TIME 0000000e 1444738126.9,1
TIME 0000000e 1444738130.9,1
TIME 0000000e 1444738131.9,1
TIME 0000000e 1444738133.9,1
TIME 0000000e 1444738136.9,1
TIME 0000000e 1444738139.9,1
TIME 0000000e 1444738140.9,1
TIME 0000000e 1444738143.9,1
TIME 0000000e 1444738144.9,1
TIME 0000000e 1444738146.9,1
TIME 0000000e 1444738149.9,1
TIME 0000000e 1444738150.9,1
TIME 0000000e 1444738152.9,1
TIME 0000000e 1444738156.9,1
TIME 0000000e 1444738157.9,1
TIME 0000000e 1444738159.9,1
TIME 0000000e 1444738160.9,1
TIME 0000000e 1444738162.9,1
TIME 0000000e 1444738165.9,1
TIME 0000000e 1444738169.9,1
TIME 0000000e 1444738170.9,1
TIME 0000000e 1444738172.9,1
TIME 0000000e 1444738175.9,1
TIME 0000000e 1444738178.9,1
TIME 0000000e 1444738180.9,1
TIME 0000000e 1444738182.9,1
TIME 0000000e 1444738183.9,1
TIME 0000000e 1444738185.9,1
TIME 0000000e 1444738188.9,1
TIME 0000000e 1444738190.9,1
TIME 0000000e 1444738191.9,1
TIME 0000000e 1444738195.9,1
TIME 0000000e 1444738196.9,1
TIME 0000000e 1444738198.9,1
TIME 0000000e 1444738200.9,1
TIME 0000000e 1444738201.9,1
TIME 0000000e 1444738204.9,1
TIME 0000000e 1444738208.9,1
TIME 0000000e 1444738209.9,1
TIME 0000000e 1444738210.9,1
TIME 0000000e 1444738211.9,1
TIME 0000000e 1444738214.9,1
TIME 0000000e 1444738217.9,1
TIME 0000000e 1444738220.9,1
TIME 0000000e 1444738221.9,1
TIME 0000000e 1444738222.9,1
TIME 0000000e 1444738224.9,1
TIME 0000000e 1444738227.9,1
TIME 0000000e 1444738230.9,1
TIME 0000000e 1444738234.9,1
TIME 0000000e 1444738235.9,1
TIME 0000000e 1444738237.9,1
TIME 0000000e 1444738240.9,1
TIME 0000000e 1444738243.9,1
TIME 0000000e 1444738247.9,1
TIME 0000000e 1444738248.9,1
TIME 0000000e 1444738250.9,1
TIME 0000000e 1444738253.9,1
TIME 0000000e 1444738256.9,1
TIME 0000000e 1444738260.9,1
TIME 0000000e 1444738261.9,1
TIME 0000000e 1444738263.9,1
TIME 0000000e 1444738266.9,1
TIME 0000000e 1444738269.9,1
TIME 0000000e 1444738270.9,1
TIME 0000000e 1444738273.9,1
TIME 0000000e 1444738274.9,1
TIME 0000000e 1444738276.9,1
TIME 0000000e 1444738279.9,1
TIME 0000000e 1444738280.9,1
TIME 0000000e 1444738282.9,1
TIME 0000000e 1444738286.9,1
TIME 0000000e 1444738287.9,1
TIME 0000000e 1444738289.9,1
TIME 0000000e 1444738290.9,1
TIME 0000000e 1444738292.9,1
TIME 0000000e 1444738295.9,1
TIME 0000000e 1444738299.9,1
TIME 0000000e 1444738300.9,1
TIME 0000000e 1444738302.9,1
TIME 0000000e 1444738305.9,1
TIME 0000000e 1444738308.9,1
TIME 0000000e 1444738310.9,1
TIME 0000000e 1444738312.9,1
TIME 0000000e 1444738313.9,1
TIME 0000000e 1444738315.9,1
TIME 0000000e 1444738318.9,1
TIME 0000000e 1444738320.9,1
TIME 0000000e 1444738321.9,1
TIME 0000000e 1444738325.9,1
TIME 0000000e 1444738326.9,1
TIME 0000000e 1444738328.9,1
TIME 0000000e 1444738330.9,1
TIME 0000000e 1444738331.9,1
TIME 0000000e 1444738334.9,1
TIME 0000000e 1444738338.9,1
TIME 0000000e 1444738339.9,1
TIME 0000000e 1444738340.9,1
TIME 0000000e 1444738341.9,1
TIME 0000000e 1444738344.9,1
TIME 0000000e 1444738347.9,1
TIME 0000000e 1444738350.9,1
TIME 0000000e 1444738351.9,1
TIME 0000000e 1444738352.9,1
TIME 0000000e 1444738354.9,1
TIME 0000000e 1444738357.9,1
TIME 0000000e 1444738360.9,1
TIME 0000000e 1444738364.9,1
TIME 0000000e 1444738365.9,1
TIME 0000000e 1444738367.9,1
TIME 0000000e 1444738370.9,1
TIME 0000000e 1444738373.9,1
TIME 0000000e 1444738377.9,1
TIME 0000000e 1444738378.9,1
TIME 0000000e 1444738380.9,1
TIME 0000000e 1444738383.9,1
TIME 0000000e 1444738386.9,1
TIME 0000000e 1444738390.9,1
TIME 0000000e 1444738391.9,1
TIME 0000000e 1444738393.9,1
TIME 0000000e 1444738396.9,1
TIME 0000000e 1444738399.9,1
TIME 0000000e 1444738400.9,1
TIME 0000000e 1444738403.9,1
TIME 0000000e 1444738404.9,1
TIME 0000000e 1444738406.9,1
TIME 0000000e 1444738409.9,1
TIME 0000000e 1444738410.9,1
TIME 0000000e 1444738412.9,1
TIME 0000000e 1444738416.9,1
TIME 0000000e 1444738417.9,1
TIME 0000000e 1444738419.9,1
TIME 0000000e 1444738420.9,1
TIME 0000000e 1444738422.9,1
TIME 0000000e 1444738425.9,1
TIME 0000000e 1444738429.9,1
TIME 0000000e 1444738430.9,1
TIME 0000000e 1444738432.9,1
TIME 0000000e 1444738435.9,1
TIME 0000000e 1444738438.9,1
TIME 0000000e 1444738440.9,1
TIME 0000000e 1444738442.9,1
TIME 0000000e 1444738443.9,1
TIME 0000000e 1444738445.9,1
TIME 0000000e 1444738448.9,1
TIME 0000000e 1444738450.9,1
TIME 0000000e 1444738451.9,1
TIME 0000000e 1444738455.9,1
TIME 0000000e 1444738456.9,1
TIME 0000000e 1444738458.9,1
TIME 0000000e 1444738460.9,1
TIME 0000000e 1444738461.9,1
TIME 0000000e 1444738464.9,1
TIME 0000000e 1444738468.9,1
TIME 0000000e 1444738469.9,1
TIME 0000000e 1444738470.9,1
TIME 0000000e 1444738471.9,1
TIME 0000000e 1444738474.9,1
TIME 0000000e 1444738477.9,1
TIME 0000000e 1444738480.9,1
TIME 0000000e 1444738481.9,1
TIME 0000000e 1444738482.9,1
TIME 0000000e 1444738484.9,1
TIME 0000000e 1444738487.9,1
TIME 0000000e 1444738490.9,1
TIME 0000000e 1444738494.9,1
TIME 0000000e 1444738495.9,1
TIME 0000000e 1444738497.9,1
TIME 0000000e 1444738500.9,1
TIME 0000000e 1444738503.9,1
TIME 0000000e 1444738507.9,1
TIME 0000000e 1444738508.9,1
TIME 0000000e 1444738510.9,1
TIME 0000000e 1444738513.9,1
TIME 0000000e 1444738516.9,1
TIME 0000000e 1444738520.9,1
TIME 0000000e 1444738521.9,1
TIME 0000000e 1444738523.9,1
TIME 0000000e 1444738526.9,1
TIME 0000000e 1444738529.9,1
TIME 0000000e 1444738530.9,1
TIME 0000000e 1444738533.9,1
TIME 0000000e 1444738534.9,1
TIME 0000000e 1444738536.9,1
TIME 0000000e 1444738539.9,1
TIME 0000000e 1444738540.9,1
TIME 0000000e 1444738542.9,1
TIME 0000000e 1444738546.9,1
TIME 0000000e 1444738547.9,1
TIME 0000000e 1444738549.9,1
TIME 0000000e 1444738550.9,1
TIME 0000000e 1444738552.9,1
TIME 0000000e 1444738555.9,1
TIME 0000000e 1444738559.9,1
TIME 0000000e 1444738560.9,1
TIME 0000000e 1444738562.9,1
TIME 0000000e 1444738565.9,1
TIME 0000000e 1444738568.9,1
TIME 0000000e 1444738570.9,1
TIME 0000000e 1444738572.9,1
TIME 0000000e 1444738573.9,1
TIME 0000000e 1444738575.9,1
TIME 0000000e 1444738578.9,1
TIME 0000000e 1444738580.9,1
TIME 0000000e 1444738581.9,1
TIME 0000000e 1444738585.9,1
TIME 0000000e 1444738586.9,1
TIME 0000000e 1444738588.9,1
TIME 0000000e 1444738590.9,1
TIME 0000000e 1444738591.9,1
TIME 0000000e 1444738594.9,1
TIME 0000000e 1444738598.9,1
TIME 0000000e 1444738599.9,1
TIME 0000000e 1444738600.9,1
TIME 0000000e 1444738601.9,1
TIME 0000000e 1444738604.9,1
TIME 0000000e 1444738607.9,1
TIME 0000000e 1444738610.9,1
TIME 0000000e 1444738611.9,1
TIME 0000000e 1444738612.9,1
TIME 0000000e 1444738614.9,1
TIME 0000000e 1444738617.9,1
TIME 0000000e 1444738620.9,1
TIME 0000000e 1444738624.9,1
TIME 0000000e 1444738625.9,1
TIME 0000000e 1444738627.9,1
TIME 0000000e 1444738630.9,1
TIME 0000000e 1444738633.9,1
TIME 0000000e 1444738637.9,1
TIME 0000000e 1444738638.9,1
TIME 0000000e 1444738640.9,1
TIME 0000000e 1444738643.9,1
TIME 0000000e 1444738646.9,1
TIME 0000000e 1444738650.9,1
TIME 0000000e 1444738651.9,1
TIME 0000000e 1444738653.9,1
TIME 0000000e 1444738656.9,1
TIME 0000000e 1444738659.9,1
TIME 0000000e 1444738660.9,1
TIME 0000000e 1444738663.9,1
TIME 0000000e 1444738664.9,1
TIME 0000000e 1444738666.9,1
TIME 0000000e 1444738669.9,1
TIME 0000000e 1444738670.9,1
TIME 0000000e 1444738672.9,1
TIME 0000000e 1444738676.9,1
TIME 0000000e 1444738677.9,1
TIME 0000000e 1444738679.9,1
TIME 0000000e 1444738680.9,1
TIME 0000000e 1444738682.9,1
TIME 0000000e 1444738685.9,1
TIME 0000000e 1444738689.9,1
TIME 0000000e 1444738690.9,1
TIME 0000000e 1444738692.9,1
TIME 0000000e 1444738695.9,1
TIME 0000000e 1444738698.9,1
TIME 0000000e 1444738700.9,1
TIME 0000000e 1444738702.9,1
TIME 0000000e 1444738703.9,1
TIME 0000000e 1444738705.9,1
TIME 0000000e 1444738708.9,1
TIME 0000000e 1444738710.9,1
TIME 0000000e 1444738711.9,1
TIME 0000000e 1444738715.9,1
TIME 0000000e 1444738716.9,1
TIME 0000000e 1444738718.9,1
TIME 0000000e 1444738720.9,1
TIME 0000000e 1444738721.9,1
TIME 0000000e 1444738724.9,1
TIME 0000000e 1444738728.9,1
TIME 0000000e 1444738729.9,1
TIME 0000000e 1444738730.9,1
TIME 0000000e 1444738731.9,1
TIME 0000000e 1444738734.9,1
TIME 0000000e 1444738737.9,1
TIME 0000000e 1444738740.9,1
TIME 0000000e 1444738741.9,1
TIME 0000000e 1444738742.9,1
TIME 0000000e 1444738744.9,1
TIME 0000000e 1444738747.9,1
TIME 0000000e 1444738750.9,1
TIME 0000000e 1444738754.9,1
TIME 0000000e 1444738755.9,1
TIME 0000000e 1444738757.9,1
TIME 0000000e 1444738760.9,1
TIME 0000000e 1444738763.9,1
TIME 0000000e 1444738767.9,1
TIME 0000000e 1444738768.9,1
TIME 0000000e 1444738770.9,1
TIME 0000000e 1444738773.9,1
TIME 0000000e 1444738776.9,1
TIME 0000000e 1444738780.9,1
TIME 0000000e 1444738781.9,1
TIME 0000000e 1444738783.9,1
TIME 0000000e 1444738786.9,1
TIME 0000000e 1444738789.9,1
TIME 0000000e 1444738790.9,1
TIME 0000000e 1444738793.9,1
TIME 0000000e 1444738794.9,1
TIME 0000000e 1444738796.9,1
TIME 0000000e 1444738799.9,1
TIME 0000000e 1444738800.9,1
TIME 0000000e 1444738802.9,1
TIME 0000000e 1444738806.9,1
TIME 0000000e 1444738807.9,1
TIME 0000000e 1444738809.9,1
TIME 0000000e 1444738810.9,1
TIME 0000000e 1444738812.9,1
TIME 0000000c 1444738813,1
TIME 0000000e 1444738815.9,1
TIME 0000000e 1444738819.9,1
TIME 0000000e 1444738820.9,1
TIME 0000000e 1444738822.9,1
TIME 0000000e 1444738825.9,1
TIME 0000000e 1444738828.9,1
TIME 0000000e 1444738830.9,1
TIME 0000000e 1444738832.9,1
TIME 0000000e 1444738833.9,1
TIME 0000000e 1444738835.9,1
TIME 0000000e 1444738838.9,1
TIME 0000000e 1444738840.9,1
TIME 0000000e 1444738841.9,1
TIME 0000000e 1444738845.9,1
TIME 0000000e 1444738846.9,1
TIME 0000000e 1444738848.9,1
TIME 0000000e 1444738850.9,1
TIME 0000000e 1444738851.9,1
TIME 0000000e 1444738854.9,1
TIME 0000000e 1444738858.9,1
TIME 0000000e 1444738859.9,1
TIME 0000000e 1444738860.9,1
TIME 0000000e 1444738861.9,1
TIME 0000000e 1444738864.9,1
TIME 0000000e 1444738867.9,1
TIME 0000000e 1444738870.9,1
TIME 0000000e 1444738871.9,1
TIME 0000000e 1444738872.9,1
TIME 0000000c 1444738873,1
TIME 0000000e 1444738874.9,1
TIME 0000000e 1444738877.9,1
TIME 0000000e 1444738880.9,1
TIME 0000000e 1444738884.9,1
TIME 0000000e 1444738885.9,1
TIME 0000000e 1444738887.9,1
TIME 0000000e 1444738890.9,1
TIME 0000000e 1444738893.9,1
TIME 0000000e 1444738897.9,1
TIME 0000000e 1444738898.9,1
TIME 0000000e 1444738900.9,1
TIME 0000000e 1444738903.9,1
TIME 0000000e 1444738906.9,1
TIME 0000000e 1444738910.9,1
TIME 0000000e 1444738911.9,1
TIME 0000000e 1444738913.9,1
TIME 0000000e 1444738916.9,1
TIME 0000000e 1444738919.9,1
TIME 0000000e 1444738920.9,1
TIME 0000000e 1444738923.9,1
TIME 0000000e 1444738924.9,1
TIME 0000000e 1444738926.9,1
TIME 0000000e 1444738929.9,1
TIME 0000000e 1444738930.9,1
TIME 0000000e 1444738932.9,1
TIME 0000000e 1444738936.9,1
TIME 0000000e 1444738937.9,1
TIME 0000000e 1444738939.9,1
TIME 0000000e 1444738940.9,1
TIME 0000000e 1444738942.9,1
TIME 0000000e 1444738945.9,1
TIME 0000000e 1444738949.9,1
TIME 0000000e 1444738950.9,1
TIME 0000000e 1444738952.9,1
TIME 0000000e 1444738955.9,1
TIME 0000000e 1444738958.9,1
TIME 0000000e 1444738960.9,1
TIME 0000000e 1444738962.9,1
TIME 0000000e 1444738963.9,1
TIME 0000000e 1444738965.9,1
TIME 0000000e 1444738968.9,1
TIME 0000000e 1444738970.9,1
TIME 0000000e 1444738971.9,1
TIME 0000000e 1444738975.9,1
TIME 0000000e 1444738976.9,1
TIME 0000000e 1444738978.9,1
TIME 0000000e 1444738980.9,1
TIME 0000000e 1444738981.9,1
TIME 0000000e 1444738984.9,1
TIME 0000000e 1444738988.9,1
TIME 0000000e 1444738989.9,1
TIME 0000000e 1444738990.9,1
TIME 0000000e 1444738991.9,1
TIME 0000000e 1444738994.9,1
TIME 0000000e 1444738997.9,1
TIME 0000000e 1444739000.9,1
TIME 0000000e 1444739001.9,1
TIME 0000000e 1444739002.9,1
TIME 0000000e 1444739004.9,1
TIME 0000000e 1444739007.9,1
TIME 0000000e 1444739010.9,1
TIME 0000000c 1444739011,1
TIME 0000000e 1444739014.9,1
TIME 0000000e 1444739015.9,1
TIME 0000000e 1444739017.9,1
TIME 0000000e 1444739020.9,1
TIME 0000000c 1444739021,1
TIME 0000000e 1444739023.9,1
TIME 0000000e 1444739027.9,1
TIME 0000000e 1444739028.9,1
TIME 0000000e 1444739030.9,1
TIME 0000000e 1444739033.9,1
TIME 0000000e 1444739036.9,1
TIME 0000000e 1444739040.9,1
TIME 0000000e 1444739041.9,1
TIME 0000000e 1444739043.9,1
TIME 0000000e 1444739046.9,1
TIME 0000000e 1444739049.9,1
TIME 0000000e 1444739050.9,1
TIME 0000000e 1444739053.9,1
TIME 0000000e 1444739054.9,1
TIME 0000000e 1444739056.9,1
TIME 0000000e 1444739059.9,1
TIME 0000000e 1444739060.9,1
TIME 0000000e 1444739062.9,1
TIME 0000000e 1444739066.9,1
TIME 0000000e 1444739067.9,1
TIME 0000000e 1444739069.9,1
TIME 0000000e 1444739070.9,1
TIME 0000000e 1444739072.9,1
TIME 0000000e 1444739075.9,1
TIME 0000000e 1444739079.9,1
TIME 0000000e 1444739080.9,1
TIME 0000000e 1444739082.9,1
TIME 0000000e 1444739085.9,1
TIME 0000000e 1444739088.9,1
TIME 0000000e 1444739090.9,1
TIME 0000000e 1444739092.9,1
TIME 0000000e 1444739093.9,1
TIME 0000000e 1444739095.9,1
TIME 0000000e 1444739098.9,1
TIME 0000000e 1444739100.9,1
TIME 0000000e 1444739101.9,1
TIME 0000000e 1444739105.9,1
TIME 0000000e 1444739106.9,1
TIME 0000000e 1444739108.9,1
TIME 0000000e 1444739110.9,1
TIME 0000000e 1444739111.9,1
TIME 0000000e 1444739114.9,1
TIME 0000000e 1444739118.9,1
TIME 0000000e 1444739119.9,1
TIME 0000000e 1444739120.9,1
TIME 0000000e 1444739121.9,1
TIME 0000000e 1444739124.9,1
TIME 0000000e 1444739127.9,1
TIME 0000000e 1444739130.9,1
TIME 0000000e 1444739131.9,1
TIME 0000000e 1444739132.9,1
TIME 0000000e 1444739133.3,1
DISC 0000003c 6795184426424404343:6961107663748204919 from 127.0.0.1:58613
DISC 00000027 6205067114090624777:3955614762 from R01
DISC 00000036 6205067114090624777:3482309487 from internal:R:control
DISC 00000027 6205067114090624777:1865318693 from S01
