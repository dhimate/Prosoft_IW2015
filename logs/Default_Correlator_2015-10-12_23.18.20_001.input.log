VERS 00000001 4
HEAD 00000e97 <?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="/resources/transform.xslt"?><header><componentName>correlator</componentName><version>5.3.0.0.247085</version><build>rel/5.3.0.x@247085</build><buildPlatform>amd64-win</buildPlatform><platform>Windows Server 2008 R2 (Service Pack 1)</platform><cputype>AuthenticAMD family 15 model 8 stepping 0 Six-Core AMD Opteron(tm) Processor 2427</cputype><cpus>4</cpus><javaEnabled>true</javaEnabled><replayLogMode>inputLog</replayLogMode><args><arg>C:\SoftwareAG\Apama 5.3\bin\correlator.exe</arg><arg>--logQueueSizePeriod</arg><arg>0</arg><arg>-l</arg><arg>C:\SoftwareAG\ApamaWork_5.3\license\license.txt</arg><arg>--port</arg><arg>15903</arg><arg>--loglevel</arg><arg>INFO</arg><arg>--name</arg><arg>Apama Studio Correlator for Prosoft_IW2015(Prosoft_IW2015:Default Correlator)</arg><arg>-j</arg><arg>--jmsConfig</arg><arg>C:\SoftwareAG\ApamaWork_5.3\studio_workspace\.metadata\.plugins\org.eclipse.core.resources\.projects\Prosoft_IW2015\com.apama.text\JMS_Correlator-Integrated_Adapter</arg><arg>--inputLog</arg><arg>logs/Default_Correlator_${START_TIME}_${ID}.input.log</arg></args><environment><variable>ALLUSERSPROFILE=C:\ProgramData</variable><variable>APAMA_HOME=C:\SoftwareAG\Apama 5.3</variable><variable>APAMA_WORK=C:\SoftwareAG\ApamaWork_5.3</variable><variable>APPDATA=C:\Users\Administrator\AppData\Roaming</variable><variable>CLIENTNAME=PTGHP450-YD</variable><variable>COMMONPROGRAMFILES=C:\Program Files\Common Files</variable><variable>COMMONPROGRAMFILES(X86)=C:\Program Files (x86)\Common Files</variable><variable>COMMONPROGRAMW6432=C:\Program Files\Common Files</variable><variable>COMPUTERNAME=WMSERVER11</variable><variable>COMSPEC=C:\Windows\system32\cmd.exe</variable><variable>FP_NO_HOST_CHECK=NO</variable><variable>HOMEDRIVE=C:</variable><variable>HOMEPATH=\Users\Administrator</variable><variable>LOCALAPPDATA=C:\Users\Administrator\AppData\Local</variable><variable>LOGONSERVER=\\WMSERVER11</variable><variable>NUMBER_OF_PROCESSORS=4</variable><variable>OS=Windows_NT</variable><variable>PATH=C:\SoftwareAG\Apama 5.3\third_party\jre\bin\server;C:\SoftwareAG\Apama 5.3\third_party\jre\bin;C:\SoftwareAG\Apama 5.3\third_party\jre\lib\amd64\server;C:\SoftwareAG\Apama 5.3\third_party\jre\lib\amd64;C:\SoftwareAG\Apama 5.3\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\</variable><variable>PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC</variable><variable>PROCESSOR_ARCHITECTURE=AMD64</variable><variable>PROCESSOR_IDENTIFIER=AMD64 Family 16 Model 8 Stepping 0, AuthenticAMD</variable><variable>PROCESSOR_LEVEL=16</variable><variable>PROCESSOR_REVISION=0800</variable><variable>PROGRAMDATA=C:\ProgramData</variable><variable>PROGRAMFILES=C:\Program Files</variable><variable>PROGRAMFILES(X86)=C:\Program Files (x86)</variable><variable>PROGRAMW6432=C:\Program Files</variable><variable>PROMPT=$P$G</variable><variable>PSMODULEPATH=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\</variable><variable>PUBLIC=C:\Users\Public</variable><variable>SESSIONNAME=RDP-Tcp#0</variable><variable>SYSTEMDRIVE=C:</variable><variable>SYSTEMROOT=C:\Windows</variable><variable>TEMP=C:\Users\ADMINI~1\AppData\Local\Temp\2</variable><variable>TMP=C:\Users\ADMINI~1\AppData\Local\Temp\2</variable><variable>USERDOMAIN=WMSERVER11</variable><variable>USERNAME=Administrator</variable><variable>USERPROFILE=C:\Users\Administrator</variable><variable>WINDIR=C:\Windows</variable><variable>WINDOWS_TRACING_FLAGS=3</variable><variable>WINDOWS_TRACING_LOGFILE=C:\BVTBin\Tests\installpackage\csilogfile.log</variable></environment><version>5.3.0.0.247085</version></header>
RAND 0000000a 1600889141
CONN 00000027 6204981785871021833:3955614762 from R01
CONN 00000036 6204981785871021833:3482309487 from internal:R:control
CONN 00000027 6204981785871021833:1865318693 from S01
CONN 0000003c 6795184426424404343:6875781408118016375 from 127.0.0.1:57369
TIME 0000000e 1444709904.3,1
MONF 00004657 package com.apama.dataview;

/*
 * $Copyright(c) 2007, 2008 Progress Software Corporation (PSC). All rights reserved.$
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */


/* Apama DataViewService API.
 *
 * This service enables MonitorScript or JMon applications to expose a simple 
 * read-only "DataView" interface. DataViews may be viewed using Apama Dashboard 
 * Studio in a similar way to Scenarios.
 *
 * Several implementations of this interface will exist. 
 * Each implementation is in a separate file - inject the one you wish to use.
 *   e.g. DataViewService_Impl_Dict.mon
 *
 * Route vs. Emit
 * The standard implementations of the DataViewService will always ROUTE 
 * any com.apama.dataview.* events, with the expectation that applications
 * using the service are co-located in the same correlator as the service.
 * If your architecture requires the client application to be in a separate 
 * correlator to the DataView service, then two "emitter" monitors are 
 * available.
 * DataViewService_ServiceEmitter.mon  would be injected into the same 
 * correlator as the DataView service after injecting the DataViewService 
 * interface but before injecting the implementation.
 * DataViewService_ApplicationEmitter.mon  would be injected into the same 
 * correlator as the client application after injecting the DataViewService 
 * interface but before injecting the client application.
 * 
 *
 * Notes:
 * 
 * 1) Every event has an initial field called msgId. Clients may choose to put 
 *    some identifier in this field when sending messages to the service. Any 
 *    event routed by the service in response will contain the same identifier.
 *
 * 2) Most events contain a field called "dvName". This string 
 *    uniquely identifies a DataView inside the correlator. 
 *
 * 3) Every event has a final field called extraParams that is a string:string
 *    dictionary. Some implementations may choose to use this field. It provides
 *    a way of future-proofing the interface to a certain extent.
 *
 * $Revision: 221069 $
 */





/* ==========================================================================
 * ==========================================================================
 * Events to send to the DataViewService to manage the DataView schemas
 * ==========================================================================
 * ========================================================================== */


/** Define a new DataView type.
 *
 * Expect either a DataViewDefinition or a DataViewException in response.
 *
 * See also: DataViewDefinition() DataViewException(), DataViewAddItem()
 *
 * Direction: From the customer Monitor to the DataViewService.
 */
event DataViewAddDefinition {
	/** Optional application-defined message identifier used to correlate 
		requests and responses. */
	string msgId;
	/** The name that uniquely identifies this DataView (e.g. DataView_XXX) */
	string dvName;
	/** The display name of the DataView (e.g. "XXX manager") */
	string dvDisplayName;
	/** Optional field containing a description of this DataView 
		(e.g. "This DataView exposes XXX objects"). */
	string dvDescription;
	/** Specifies the names of each field exposed by the DataView. */
	sequence<string> fieldNames;
	/** Specifies the types corresponding to each field in the fieldNames sequence. 
		Supported types are: string, float, integer, boolean. */
	sequence<string> fieldTypes;
	/** Optional set of field names whose values in an Item are to be combined 
		to make a unique key that can be used instead of the dvItemId field of 
		DataViewDeleteItem, DataViewUpdateItem, and DataViewUpdateDelta events.
 	*/
	sequence<string> keyFields;
	/** Optional dictionary of parameters for future extensibility; 
		DataView implementation-specific parameters may also be stored here. */
	dictionary<string, string> extraParams;
}


/* Remove an existing DataView type.
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 * Response: DataViewUnloaded()
 */
event DataViewDeleteDefinition {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // The DataView Name (e.g. conventionally DataView_XXX)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request helper dictionary to facilitate sequence position lookup
 *    by field name.
 *
 * See also: DataViewFieldLookup()
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 * Response: DataViewFieldLookup()
 */
event DataViewGetFieldLookup {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // The DataView Name (e.g. conventionally DataView_XXX)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}



/* ==========================================================================
 * ==========================================================================
 * Events to send to the DataViewService to manage individual DataView Items
 * ==========================================================================
 * ========================================================================== */


/* Request that a new Item is added to a specific DataView.
*
* See also: DataViewItem()
*
* Direction: From the customer Monitor to the DataViewService.
*/
event DataViewAddItem {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	string owner;                            // the owner (user) of the Item.
	float timeStamp;                         // the timestamp of the initial update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	sequence<string> fieldValues;            // complete sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request that a new Item is added to a specific DataView if it does not already exist, 
* or is updated when it does exist. This will ONLY work when keyFields are used.
* Attempts to change the owner of an existing item will be rejected with a DataViewItemException.
*
* See also: DataViewItem()
*
* Direction: From the customer Monitor to the DataViewService.
*/
event DataViewAddOrUpdateItem {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	string owner;                            // the owner (user) of the Item - ONLY used for new items.
	float timeStamp;                         // the timestamp of the initial update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	sequence<string> fieldValues;            // complete sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Contains updated DataView Item fields.
 * Use this to update the fields.
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 */
event DataViewUpdateItem { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView (may be -1 if using keyFields instead)
	float timeStamp;                         // the timestamp of the update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	sequence<string> fieldValues;            // sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Contains updated DataView Item fields.
 * Use this to update the fields.
 *
 * Direction: From the customer Monitor to the DataViewService.
 *
 */
event DataViewUpdateItemDelta { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView (may be -1 if using keyFields instead)
	float timeStamp;                         // the timestamp of the update (seconds since epoch). If the value given is -1.0 then the service will populate it using correlator currentTime.
	dictionary<integer,string> fieldValues;  // values to be updated. Dictionary Key is index into fields sequence, Value is new field value in sequence. 
	                                         // If not using dvItemId, then the dictionary MUST contain the key values (even though they have not changed)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request that a specific Item within a specific DataView is deleted.
 *
 * See also: DataViewItemDeleted()
 *
 * Direction: From the customer Monitor to the DataViewService.
 */
event DataViewDeleteItem {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView (may be -1 if using keyFields instead)
	sequence<string> keyFields;              // [OPTIONAL] sequence of ONLY key field values (if not using the dvItemId)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Request that all Items within a specific DataView are deleted.
 *
 * See also: DataViewAllItemsDeleted()
 *
 * Direction: From the customer Monitor to the DataViewService.
 */
event DataViewDeleteAllItems {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* ==========================================================================
 * ==========================================================================
 * Events to that are callbacks from DatavViewService
 * ==========================================================================
 * ========================================================================== */


/** Confirmation that a specific DataView definition has been added.
 *
 * For information on the meaning of each field, see DataViewAddDefinition()
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewDefinition {
	string msgId;
	string dvName;
	string dvDisplayName;
	string dvDescription;
	sequence<string> fieldNames;
	sequence<string> fieldTypes;
	sequence<string> keyFields;
	dictionary<string, string> extraParams;
}


/* Indicates that a specific DataView definition is being unloaded.
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewDefinitionDeleted { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Notifies all interested clients that a new Item has been added to a specific 
 * DataView. 
 * The event provides the unique itemID, owner (user), and initial values for 
 * all fields.
 *
 * See also: DataViewAddItem()
 *
 * Direction: From the DataViewService to the customer Monitor.
 *
 */
event DataViewItem { 
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView
	string owner;                            // the owner (user) of the Item.
	sequence<string> fieldValues;            // sequence of field values in string form
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Notifies all interested clients that a specific Item within a specific 
 * DataView has been deleted.
 *
 * See also: DataViewDeleteItem()
 *
 * Direction: From the DataViewService to the customer Monitor.
 *
 */
event DataViewItemDeleted {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView
	sequence<string> keyFields;              // sequence of ONLY key field values (for those not using the dvItemId)
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Notifies all interested clients that all Items within a specific 
 * DataView have been deleted.
 *
 * See also: DataViewDeleteAllItems()
 *
 * Direction: From the DataViewService to the customer Monitor.
 *
 */
event DataViewAllItemsDeleted {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* The helper dictionary to facilitate sequence position lookup
 *    by field name.
 *
 * See also: DataViewGetFieldLookup()
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewFieldLookup {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // The DataView Name (e.g. conventionally DataView_XXX)
	dictionary <string, integer> fields;     // A map of fieldName:fieldIndex
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Indicates that an exception occurred within the DataViewService, and indicates 
* the name of the specific DataView.
*
* Direction: From the DataViewService to the customer Monitor.
*/
event DataViewException {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	wildcard string message;                 // The message in the exception. This is designed to be human readable, and may change between implementations/versions, hence the wildcard.
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}

/* Indicates that an exception occurred within the DataViewService, and indicates 
* the name of the specific DataView, and the Id of the specific Item.
*
* Direction: From the DataViewService to the customer Monitor.
*/
event DataViewItemException {
	string msgId;                            // [OPTIONAL] A messageId that applications may choose to use to identify "responses".
	string dvName;                           // the unique name of the DataView
	integer dvItemId;                        // the ID of the Item within the DataView
	wildcard string message;                 // The message in the exception. This is designed to be human readable, and may change between implementations/versions, hence the wildcard.
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


/* Indicates that the DataView service is being unloaded.
 *
 * Direction: From the DataViewService to the customer Monitor.
 */
event DataViewServiceUnloaded { 
	dictionary<string, string> extraParams;  // [OPTIONAL] Some implementations may choose to make use of this field.
}


monitor DataViewService_Interface {
	// MetaData relating to the interface
	dictionary<string,string> interfaceMetaData := {
		"interface.package"     :"com.apama.dataview",
		"interface.name"        :"DataViewService_Interface",
		"interface.fileName"    :"DataViewService_Interface.mon",
		"interface.vendor"      :"Apama",
		"interface.version"     :"5.3.0.0.247085",
		"interface.fullVersion" :"rel/5.3.0.x@247085",
		"interface.language"    :"MonitorScript"
	};

	action onload {
		log "DataViewService interface loaded. MetaData: "+interfaceMetaData.toString() at INFO;
	}
}

 0000003e C:\SoftwareAG\Apama 5.3\monitors\DataViewService_Interface.mon
CONN 0000003c 6795184426424404343:6875781622866446711 from 127.0.0.1:57370
CONN 0000003c 6795184426424404343:6875782335831345527 from 127.0.0.1:57377
TIME 0000000e 1444709904.4,1
MONF 00012519 package com.apama.scenario;

/**
 * This file contains the shared event definitions that are generic across 
 * all Scenarios.  
 *
 * WARNING: 
 *    The event definitions contained in this file form an internal protocol 
 *    and may change between software releases.
 *
 * Notes:
 * 1) The Event definitions contained in this file MUST be considered
 *    as an internal implementation of the communications protocol
 *    between the Apama client API and an Apama server.  As such
 *    these event definitions MUST NOT be considered "stable" and are 
 *    subject to change in any future software release.
 *
 *    The ONLY supported public APIs to the Scenario Service are the 
 *    Java client API (in the com.apama.services.scenario package) and the 
 *    .NET client API (in the Apama.Services.Scenario namespace).  
 *    Customers should not attempt to interface at the event or 
 *    EPL layer. Some events have been changed over time (as 
 *    noted here).
 *
 * 2) Most events now contain an initial field called "scenarioId". This string 
 *    uniquely identifies a scenario inside the correlator, and is used as 
 *    the package name, in several events, and for making up a part of the 
 *    data and control channel names.
 *
 * 3) Events that are intended to be used in a request-response pattern contain
 *    a "messageId" field.  The value of this field must be copied from the 
 *    request event into the response event. The mechanism allows clients to 
 *    match up request-response pairs.
 *
 *
 * $Copyright(c) 2005-2011 Progress Software Corporation (PSC). All rights reserved.$
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 *
 * $Revision: 242755 $
 */

/**
 * Request that a new instance of a specific scenario is created.
 *
 * See also: Created(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Create {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	string owner;                        // the owner (user) of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
}

/**
 * Notifies all interested clients that a new instance of a specific 
 * scenario has been created. 
 * The event provides the owner (user), initial state, and initial values for 
 * all input fields and all output fields.
 *
 * See also: Create()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Created { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * Notifies the interested clients of child scenarios created from
 * a parent scenario.
 *
 * Direction: Internal in the correlator
 *
 * Channel: <none>
 */
event ParentChildRelationship {
	string parentScenarioId;
	integer parentScenarioInstanceId;
	string childScenarioId;
	integer childScenarioInstanceId;
}


/**
 * Request that a specific instance of a specific scenario is edited (the input 
 * field values are changed).
 *
 * See also: Edited(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Edit { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
}


/**
 * Notifies all interested clients that a specific instance of a specific 
 * scenario has been edited (the input field values have changed).
 *
 * See also: Edit()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Edited { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * Request that a specific instance of a specific scenario is deleted.
 *
 * See also: Deleted(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Delete {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Notifies all interested clients that a specific instance of a specific 
 * scenario has been deleted.
 *
 * See also: Delete()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Deleted {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Indicates that a specific instance of a specific scenario has died.
 * This is sent as a result of a scenario instance use of MonitorScript ondie.
 * This occurs for any of deleting a running scenario, a scenario failing, or 
 * entering the end state.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event InstanceDied {
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Contains updated scenario instance output fields.
 * Note that this is the ONLY event type that is sendted on the 
 * "<scenarioId>.Data" channel.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Update { 
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
	float timeStamp;                     // the time of the update (seconds since epoch)
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * A general Acknowledgement event that is the "response" to various "request"
 * events such as Create, Edit, Delete.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Control
 */
event Acknowledge { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the id of the scenario instance
	boolean success;                     // boolean indication of success
	sequence<string> outputFieldValues;  // sequence of the OUTPUT field values in string form, 
	                                     //   or an empty sequence if success = false
}


/**
 * Indicates that a specific instance of a specific scenario has changed 
 * state, where valid states include "ENDED", "FAILED", "RUNNING".
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event StateChange { 
	string scenarioId;                   // the unique name of the scenario.
	integer scenarioInstanceId;          // the ID of the scenario instance.
	string state;                        // the new state.
}


/**
 * Request that each scenario loaded in the correlator send its meta
 * information out on the supplied channel. When all scenarios have
 * sent out this information, a final RequestScenariosDone event will
 * be sent on the same channel.
 *
 * As soon as this event is received, a RequestScenariosAck will be
 * sent on the same channel so client can stop resending the RequestScenarios
 * event.
 *
 * See also: Scenario, RequestScenariosDone, RequestScenariosAck
 *
 * Direction: From the client to the correlator.
 *
 * Response: Scenario() from each loaded scenario.
 */
event RequestScenarios { 
	// renamed for clarity - was Request
	string channel;                      // Name of the private response channel.
}


/**
 * This is a simple marker event that is sent by the correlator to indicate 
 * that it has finished sending all of the Scenario events in response
 * to a RequestScenarios event.
 * 
 * See also: RequestScenarios, Scenario.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: The private channel that was specified in the RequestScenarios event.
 */
event RequestScenariosDone {}

/* This is a simple ack event that is sent by the correlator to indicate the
 * RequestScenarios event is received and the request is being processed
 *
 * See also: RequestScenarios
 *
 * Direction: From the correlator to the client.
 *
 * Channel: The private channel that was specified in the RequestScenarios event.
 */
event RequestScenariosAck {}

/**
 * Request that each instance of the specified scenario send an Instance event 
 * out on the supplied channel. When all instances for the scenario have been 
 * sent out, a final RequestInstancesDone event will be sent on the same channel.
 *
 * See also: Instance, RequestInstancesDone
 *
 * Direction: From the client to the correlator.
 *
 * Response: Instance() from each scenario instance.
 */
event RequestInstancesOnChannel { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
}

/**
 * Request that each instance for the specified user of the specified scenario
 * send an Instance event out on the supplied channel. When all instances for
 * the scenario have been sent out, a final RequestInstancesDone event will be 
 * sent on the same channel.
 *
 * See also: Instance, RequestInstancesDone
 *
 * Direction: From the client to the correlator.
 *
 * Response: Instance() from each scenario instance.
 */
event RequestInstancesOnChannelByUser { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
	string owner;                        // the username to filter by
}


/**
 * This is a simple marker event that is sent by the correlator to indicate 
 * that it has finished sending all of the Instance events in response
 * to a RequestInstancesInternal event.
 * 
 * See also: RequestInstancesInternal, Scenario.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: A unique private channel as specified by the client in a 
 *          RequestScenariosOnChannel event.
 *
 *          Note that previously it would have been on <scenarioId>.Data and 
 *          <scenarioId>.Data.Raw, but that behaviour is now deprecated.
 */
event RequestInstancesDone {
	string scenarioId;                   // Identifier of the scenario for instances were returned. 	
	integer messageId;                   // the unique message ID (for request-response matching)
}


/**
 * Describes the meta-information about a scenario that is loaded in the 
 * correlator.
 * 
 * See also: RequestScenarios, RequestScenariosDone, ScenarioUnloaded
 * 
 * Direction: From correlator to client.
 *
 * Channel:   1) com.apama.scenario to broadcast when loaded.
 *            2) A unique private channel as specified by the client in a 
 *               RequestScenarios event.
 *
 * This event has gained the executionMode field in Apama 4.2
 */
event Scenario {
	string scenarioId;                   // unique identifier for Scenario, e.g. Scenario_statistical$002darbitrage
	string displayName;                  // user-specified name for Scenario, e.g. statistical-arbitrage
	string description;                  // description of the Scenario
	sequence<string> inputNames;         // input parameter names
	sequence<string> inputTypes;         // input parameter types
	sequence<string> inputConstraints;   // input parameter contraints
	sequence<string> inputDefaults;      // input parameter default values
	sequence<string> outputNames;        // output parameter names
	sequence<string> outputTypes;        // output parameter types
	integer executionMode;               // 0 = serial, 1 = parallel, 2 = parallel child. New as of 4.2
	dictionary<string, string> extraParams; // Additional parameters
}



/**
 * Indicates that a specific Scenario definition is being unloaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Control
 */
event ScenarioUnloaded { 
	string scenarioId;                   // the unique name of the scenario
}

/**
 * Provides a dump of the current state of a scenario instance.
 * The event definition is identical to the Created event, and includes the 
 * owner (user), initial state, and current values for all input fields and 
 * all output fields.
 *
 * Instance events are sent in response to RequestInstancesOnChannel event 
 * and the deprecated RequestInstancesInternal event; 
 *
 * See also: RequestInstancesOnChannel, RequestInstancesDone, RequestInstancesInternal
 *
 * Direction: From the correlator to the client.
 *
 * Channel: A unique private channel as specified by the client in a 
 *          RequestScenariosOnChannel event.
 *
 *          Note that previously it would have been on <scenarioId>.Data and 
 *          <scenarioId>.Data.Raw, but that behaviour is now deprecated.
 */
event Instance {
	string scenarioId;                   // the unique name of the scenario. 
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance. 
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form. 
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form. 
}


/**
 * Indicates this shared MonitorScript has been loaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: com.apama.scenario to broadcast when loaded.
 */
event ScenarioServiceLoaded { 
}

/**
 * Indicates this shared MonitorScript is being unloaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: com.apama.scenario to broadcast when unloaded.
 */
event ScenarioServiceUnloaded { 
}


/**
 * Set the period over which updates will be queued and coalesced before being
 * sent out on the data channel. Defaults to zero, which means they won't be
 * queued. If it is negative then we won't send any updates on the data channel.
 * This event is deprecated and the ConfigureUpdates event should be used 
 * instead (see below)
 */
event SetThrottlingPeriod {
	float period;   // The period in seconds. Default zero.
}


/**
 * Configures how updates are sent from scenarios.
 * Each scenario is controlled by two configurations - a global default,
 * and an optional per scenario configuration.  The per scenario
 * configuration takes precedence over the global default.
 * The configuration is made up of a number of entries in 
 * the configuration dictionary. The ConfigureUpdate event 
 * is merged into any previous configuration.
 *
 * Global configuration can be modified by specifying an empty string 
 * for scenarioId, and empty values remove values.
 */
event ConfigureUpdates {
	/** Specifies the scenario the configuratio will apply to, or use 
		empty string "" to specify a global default. 
	*/
	string scenarioId;
	/** 
	 * A set of the configurations modified by this event
	 * the key and meaning is one of:
	 * sendThrottled - boolean - whether to send Updates to the 
	 *                           Throttled (.Data) channel (default=true)
	 * throttlePeriod - float - period with which to send Updates. 
	 *                          0.0 means updates are not throttled - 
	 *                          every update is sent on the Throttled 
	 *                          channel. (default=0.0)
	 * sendRaw - boolean - whether to send Updates on the Raw channel 
	 *                     (.Raw) (default=true)
 	 * sendThrottledUser - boolean - whether to send Updates to the 
	 *                     throttled filtered (.Data:username) channel
	 *                     (default=false)
 	 * sendRawUser - boolean - whether to send Updates to the Raw 
	 *                     channel (.Raw:username) (default=false)
	 * routeUpdate - boolean - whether to route Update (and Edited, Deleted) events.
	 * An empty value removes that entry from the configuration
	 */
	dictionary<string,string> configuration;
}

/**
 * Immediately flushes to receivers any scenario Update events that were 
 * waiting for the next throttling period before being sent. 
 * 
 */
event SendQueuedUpdatesNow {
	
}

/* ==========================================================================
 * The following describes INTERNAL event definitions that should not be sent 
 * into the correlator, nor relied upon.
 * ==========================================================================
 */

/**
 * Request that each instance of the specified scenario send an Instance event 
 * out on the scenario Data or Raw channel. When all instances for the scenario
 * have been sent out, a final RequestInstancesDone event will be sent on the 
 * same channel.
 *
 * See also: Instance, RequestInstancesDone, RequestInstancesOnChannel, RequestInstancesOnChannelByUser
 *
 * Direction: From the ScenarioService to the scenario
 *
 * Response: Instance() from each scenario instance, RequestInstancesDone when finished.
 */
event RequestInstancesInternal { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
	boolean internal;                    // if true, events should be routed/ send-to'd the main context
	string owner;                        // owner filter (optional)
	boolean ownerFilter;                 // whether to filter by owner
}

/**
 * A scenario has finished running, but is still discoverable.
 * (i.e. entered end state or failed - but not deleted).
 * Note that this event contains the state as of the last
 * Update/ Edited event - i.e. if an action modified an output variable 
 * and then caused the scenario to fail, the prior modification
 * would not be reflected in this event.
 *
 * This event contains sufficient information for discovery of the
 * scenario instance later
 * 
 * Direction: from scenarios to the ScenarioService sub-monitor (spawned per scenario)
 */
event ScenarioFinished {
	string scenarioId;                   // Identifier of the scenario which has failed. 
	integer scenarioInstanceId;          // the ID of the scenario instance. 
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form. 
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form. 
}
/**
 * Only used internally to tell all the scenarios to start routing their
 * meta data (Scenario). It is followed by a sweeper FinishedScenarioRecovery
 * event which indicates that all the scenarios have reported in.
 */
event StartScenarioRecovery {}

/**
 * Sweeper event to indicate that scenario recovery is done. Only used internally.
 */
event FinishedScenarioRecovery {}

/**
 * Trigger discovery of a parallel scenario. Sent from a sub-monitor of
 * ScenarioService to RequestInstancesHandler to create a new sub-monitor.
 */
event RequestInstancesParallel {
	RequestInstancesInternal request;          // the original request event
	dictionary<integer, context> instances;    // all scenario instances and their running context
	integer highestInstanceId;                 // the highest scenarioInstanceId listed in instances (or more accurately, the highest when discovery started)
}

/**
 * Discovery protocol of a parallel scenario. Sent from a scenario instance
 * to RequestInstancesHandler.
 */
event RequestInstancesParallelDone {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}

/**
 * Notification of a new scenario instance
 */
event ParallelStarting {
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
	string owner;                        // the owner of the scenario instance
	context runningCtx;                  // the context the scenario is running in
}

/**
 * Get the current configuration for a given scenario and the default configuration
 */
event GetConfiguration {
	string scenarioId;                   // the unique name of the scenario
}

/**
 * The current configuration for a given scenario and the default configuration
 * @see ConfigureUpdates
 */
event Configuration {
	string scenarioId;                        // the unique name of the scenario
	dictionary<string, string> defaults;      // the global defaults
	dictionary<string, string> configuration; // the scenario configuration (takes precedence)
}


/**
 * An operation has completed. Sent from parallel scenarios to the main context.
 */
event OperationCompleted {
	string scenarioId;
	integer scenarioInstanceId;
	integer messageId;
}

/**
 * Notification that a scenario has loaded a ConfigureUpdates event
 */
event ScenarioProcessedUpdates {
	string scenarioId;
}

/**
 * Request all configuration
 */
event GetAllConfiguration {
	integer requestId;
}

/** 
 * Response all configuration
 */
event AllConfiguration {
	integer requestId;
	dictionary<string, string> defaultConfig;
	dictionary<string, dictionary<string, string> > configurations;
}


/**
 * Library of utiltiy actions
 */
event ScenarioServiceLibrary {

	/**
	 * Get the control channel for a scenario Id. This channel
	 * is always enabled (uses an event set scenario ID)
	 */
	action getControlChannel(string scenarioId) returns string
	{
		return scenarioId+".Control";
	}
	/**
	 * Get the data channel for a scenario ID. This channel 
	 * is enabled by the sendThrottled configuration key and 
	 * the throttlePeriod key (Update events may be throttled)
	 */
	action getDataChannel(string scenarioId) returns string
	{
		return scenarioId+".Data";
	}
	/**
	 * Get the raw channel for a scenario ID. This channel
	 * is enabled by the sendRaw configuration key.
	 */
	action getRawChannel(string scenarioId) returns string
	{
		return scenarioId+".Data.Raw";
	}
	/**
	 * Get the data channel for a scenario Id. This channel 
	 * is enabled by the sendThrottledUser configuration key and 
	 * the throttlePeriod key (Update events may be throttled)
	 */
	action getDataUserChannel(string channel, string owner) returns string
	{
		return channel+":"+owner;
	}
	/**
	 * Get the raw channel for a scenario Id. This channel
	 * is enabled by the sendRawUser configuration key.
	 */
	action getRawUserChannel(string channel, string owner) returns string
	{
		return channel+":"+owner;
	}
	
	/**
	 * Merge configuration. Any entries in updates overwrite entries in configuration.
	 * An empty string value removes the value.
	 * @see ConfigureUpdates
	 */
	action mergeConfiguration(dictionary<string, string> updates, dictionary<string, string> configuration) {
		string k;
		for k in updates.keys() {
			configuration[k]:=updates[k];
			if updates[k]="" then {
				configuration.remove(k);
			}
		}
	}
	
	// implementation note: the defaults for sendThrottled, sendRaw, throttlePeriod, etc are in the following actions:
	/**
	 * Get the sendThrottled value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendThrottled(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendThrottled", "true");
		return c = "true";
	}

	/**
	 * Get the sendThrottledUser value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendThrottledUser(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendThrottledUser", "false");
		return c = "true";
	}
	
	/**
	 * Get the sendRaw value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendRaw(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendRaw", "true");
		return c = "true";
	}
	
	/**
	 * Get the sendRawUser value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendRawUser(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendRawUser", "false");
		return c = "true";
	}
	
	/**
	 * Get the throttlePeriod value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getThrottlePeriod(dictionary<string,string> defaults, dictionary<string,string> config) returns float {
		string c:=getConfig(defaults, config, "throttlePeriod", "0.0");
		return float.parse(c);
	}
	
	/**
	 * Get the routeUpdate value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getRouteUpdate(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "routeUpdate", "false");
		return c = "true";
	}
	

	/**
	 * Get the specified key from the configuration dictionaries, reverting to the default 
	 * if none specified.
	 */
	action getConfig(dictionary<string,string> defaults,
	                 dictionary<string,string> config, 
	                 string key, string _default) returns string {
		if config.hasKey(key) then {
			return config[key];
		}
		if defaults.hasKey(key) then {
			return defaults[key];
		}
		return _default;
	}

	action configurationManager(dictionary<string, string> defaultConfig, dictionary<string, dictionary<string, string> > configurations) {
		// the recognised ConfigureUpdates configuration keys, as above:
		dictionary<string,boolean> KNOWN_CONFIG_KEYS := {"sendThrottled":true, "throttlePeriod":false,
		 "sendRaw":true, "sendThrottledUser":true, "sendRawUser":true, "routeUpdate":true};

		dictionary <string,string> EMPTY_DICT:=new dictionary<string,string>;
		ConfigureUpdates cu;
		on all ConfigureUpdates():cu {
			string key;
			for key in cu.configuration.keys() {
				if not KNOWN_CONFIG_KEYS.hasKey(key) then {
					log "Unrecognized configuration property "+key+" in event "+cu.toString() at WARN;
				}
			}
			if cu.scenarioId = "" then {
				mergeConfiguration(cu.configuration, defaultConfig);
				log "Received "+cu.toString()+" : defaults applicable to all scenarios" at INFO;
			} else {
				if not configurations.hasKey(cu.scenarioId) then {
					configurations.add(cu.scenarioId, new dictionary<string,string>);
				}
				mergeConfiguration(cu.configuration, configurations[cu.scenarioId]);
				on ScenarioProcessedUpdates(cu.scenarioId) -> completed ConfigureUpdates(scenarioId=cu.scenarioId) {
					log "Received "+cu.toString()+" : applied to scenario" at INFO;
				}
				on completed ConfigureUpdates(scenarioId=cu.scenarioId) and not ScenarioProcessedUpdates(cu.scenarioId) {
					log "Received "+cu.toString()+" : for scenario that is not yet defined" at INFO;
				}
			}
		}

		GetConfiguration getConfig;
		on all GetConfiguration():getConfig {
			dictionary<string,string> config:=EMPTY_DICT;
			if configurations.hasKey(getConfig.scenarioId) then {
				config:=configurations[getConfig.scenarioId];
			}
			route Configuration(getConfig.scenarioId, defaultConfig, config);
		}	
		GetAllConfiguration gac;
		on all GetAllConfiguration():gac {
			route AllConfiguration(gac.requestId, defaultConfig, configurations);
		}
	}
		
}

event CallbackHelper {
	sequence<action<> > callbacks;
	action callback {
		action<> c;
		for c in callbacks {
			c();
		}
	}
}



/**
 * Base event for tracking configuration for a given scenario
 */
event ScenarioServiceUpdaterBase {
	// these are internal and should not be set by users
	string scenarioId;
	dictionary<string,string> defaultConfig;
	dictionary<string,string> config;
	ScenarioServiceLibrary lib;
	boolean sendThrottled;
	boolean sendRaw;
	boolean sendAny;
	boolean emitAny;
	boolean sendThrottledUser;
	boolean sendRawUser;
	boolean routeUpdate;
	float throttlePeriod;
	float throttleStart;
	sequence<listener> listeners;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario
	 * @param sId the scenarioId
	 */
	action init(string sId, action<> cb_onUpdate) {
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		route GetConfiguration(scenarioId);
		Configuration c;
		listener l:=on Configuration(scenarioId=scenarioId):c {
			config := c.configuration;
			defaultConfig := c.defaults;
			configurationUpdated();
			cb_onUpdate();
		}
		listeners.append(l);
	}

	/**
	 * Listen for further configuration changes.
	 * @param cb_onUpdate callback upon configuration having been updated
	 */	
	action listenToConfigureUpdates(action<> cb_onUpdate) {
		ConfigureUpdates cu;
		listener l:=on all ConfigureUpdates(scenarioId=""):cu or all ConfigureUpdates(scenarioId=scenarioId):cu {
			if(cu.scenarioId != "") then {
				route ScenarioProcessedUpdates(cu.scenarioId);
			}
			onConfigureUpdates(cu);
			cb_onUpdate();
		}
		listeners.append(l);
	}

	/**
	 * Called when new ConfigureUpdates event available
	 * @param sId the scenarioId
	 */
	action onConfigureUpdates(ConfigureUpdates cu) {
		if cu.scenarioId = "" then {
			lib.mergeConfiguration(cu.configuration, defaultConfig);
		} else {
			lib.mergeConfiguration(cu.configuration, config);
		}
		configurationUpdated();
	}
	
	/**
	 * Called when the configuration should be re-parsed.
	 * @param sId the scenarioId
	 */
	action configurationUpdated() {
		sendThrottled:=lib.getSendThrottled(defaultConfig, config);
		sendThrottledUser:=lib.getSendThrottledUser(defaultConfig, config);
		if sendThrottled or sendThrottledUser then {
			throttlePeriod:=lib.getThrottlePeriod(defaultConfig, config);
			if(throttlePeriod < 0.0) then {
				sendThrottled:=false;
				sendThrottledUser:=false;
			}
			throttleStart:=currentTime;
		}
		sendRaw:=lib.getSendRaw(defaultConfig, config);
		sendRawUser:=lib.getSendRawUser(defaultConfig, config);
		routeUpdate:=lib.getRouteUpdate(defaultConfig, config);
		sendAny:= sendRaw or sendThrottled or routeUpdate or sendRawUser or sendThrottledUser;
		emitAny:= sendRaw or sendThrottled or sendRawUser or sendThrottledUser;
	}

	/** 
	 * Get whether this scenario should send on the throttled (Data) channel
	 */
	action isSendThrottled() returns boolean {
		return sendThrottled or sendThrottledUser;
	}

	/** 
	 * Get whether this scenario should send on the raw channel
	 */
	action isSendRaw() returns boolean {
		return sendRaw or sendRawUser;
	}

	action doEmit(string emitted, string owner) {
		if sendRaw then {
			emit emitted to rawChannel;
		}
		if sendThrottled then {
			emit emitted to dataChannel;
		}
		if sendRawUser then {
			emit emitted to lib.getRawUserChannel(rawChannel, owner);
		}
		if sendThrottledUser then {
			emit emitted to lib.getDataUserChannel(dataChannel, owner);
		}
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		listener l;
		for l in listeners {
			l.quit();
		}
	}
}


/**
 * Utility event for tracking configuration for a given scenario.
 * This event is suitable for use by monitors which spawn per instance
 * (e.g. Scenarios)
 * 
 * This event also uses a callback to get the updates (supplied in
 * instanceInit). If the scenario is configured to only send throttled 
 * updates, the callback is only called when the throttling period 
 * determines an update should be sent - thus, the scenario does not
 * need to generate the output sequence<string> except when needed,
 * which can improve performance in such a configuration.
 * 
 * actions starting with an underscore should be considered private 
 * and not called by users of this event.
 */
event ScenarioServiceUpdaterSingleInstance {
	// these are internal and should not be set by users
	string scenarioId;
	integer scenarioInstanceId;
	ScenarioServiceLibrary lib;
	listener throttlingListener;
	ScenarioServiceUpdaterBase base;
	boolean havePending;
	float latestUpdate;
	action<> returns sequence<string> getUpdate;
	Update update;
	boolean needUpdate;
	context mainContext;
	string owner;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario
	 */
	action init(string sId) {
		init_cb(sId, _noopAction);
	}
	
	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario.
	 * cb_init is called when initialisation is complete
	 */
	action init_cb(string sId, action<> cb_init) {
		base.init(sId, cb_init);
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		base.listenToConfigureUpdates(_noopAction);
		mainContext:=context.current();
	}

	action _noopAction() {
	}
	

	/**
	 * Called by monitor after spawn
	 * Will maintain configuration for this scenario, and update listeners appropriately.
	 * @param getUpdateCallback a callback to get the latest outputFieldValues - may be called at any time, must 
         *        always return a consistent set of outputs
	 */
	action instanceInit(integer id, action<> returns sequence<string> getUpdateCallback, string _owner) {
		scenarioInstanceId:=id;
		owner:=_owner;
		getUpdate:=getUpdateCallback;
		update.scenarioId:=scenarioId;
		update.scenarioInstanceId:=scenarioInstanceId;
		base.listenToConfigureUpdates(_configurationUpdated);
		_configurationUpdated();
		listener l:=on all SendQueuedUpdatesNow() {
			_sendThrottledUpdate();
		}
		base.listeners.append(l);
	}

	/** 
	 * Get whether this scenario should route updates
	 */
	action isRouteUpdate() returns boolean {
		return base.routeUpdate;
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		base.destroy();
		throttlingListener.quit();
	}
	  
	/**
	 * called in instances (not factories) when configuration has changed
	 */
	action _configurationUpdated {
		if base.isSendThrottled() then {
			throttlingListener.quit();
			flushPending();
			if(base.throttlePeriod >= 0.0) then {
				if havePending then {
					_setupThrottleListener();
				}
			}
		}
	}

	/**
	 * set up a throttled listener according to throttlePeriod control
	 */
	action _setupThrottleListener {
		if base.throttlePeriod > 0.0 then {
			float offset:=currentTime-base.throttleStart;
			float t:=((offset/base.throttlePeriod).floor()+1).toFloat();
			throttlingListener:=on wait((t*base.throttlePeriod)-offset) {
				_sendThrottledUpdate();
			}
		} else {
			_sendThrottledUpdate();
		}
	}

	/**
	 * actually send an update on the throttled channel
	 */
	action _sendThrottledUpdate {
		if not havePending then {
			return;
		}
		if needUpdate then {
			update.outputFieldValues:=getUpdate();
			update.timeStamp:=latestUpdate;
			needUpdate:=false;
		}
		if base.sendThrottled then {
			send update to dataChannel;
		}
		if base.sendThrottledUser then {
			send update to lib.getDataUserChannel(dataChannel, owner);
		}
		havePending:=false;
	}

	/**
	 * flush any pending update on the throttled channel.
	 */
	action flushPending() {
		if havePending then {
			_sendThrottledUpdate();
			throttlingListener.quit();
		}
	}	

	/**
 	 * Called when a new update is available.
	 */
	action newUpdateAvailable() {
		needUpdate:=true;
		latestUpdate:=currentTime;
 		if base.sendRaw or base.routeUpdate then {
			if needUpdate then {
				update.outputFieldValues:=getUpdate();
				update.timeStamp:=currentTime;
				needUpdate:=false;
			}
			if base.sendRaw then {
				send update to rawChannel;
			}
			if base.sendRawUser then {
				send update to lib.getRawUserChannel(rawChannel, owner);
			}
			if base.routeUpdate then {
				route update;
			}
		}
		if base.isSendThrottled() and not havePending then {
			havePending:=true;
			_setupThrottleListener();
		}
	}
	
	/**
 	 * Called to send a new Acknowledgement event.
	 */
	action emitAcknowledgement(integer messageId) {
		Acknowledge ack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, true, getUpdate());
		if base.routeUpdate then {
			route ack;
		}
		if base.emitAny then {
			send ack to controlChannel;
		}
	}
				
	/**
 	 * Called to send a new Nak event.
	 */
	action emitNack(integer messageId) {
		Acknowledge nack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, false, new sequence<string>);
		if base.routeUpdate then {
			route nack;
		}
		if base.emitAny then {
			send nack to controlChannel;
		}
	}
	
	/**
 	 * Called to send a new Created event.
	 */
	action emitCreated(integer messageId, string owner, string state, sequence<string> inputVariables, sequence<string> outputVariables) {
		if base.sendAny then {
			Created created:=Created(scenarioId, messageId, scenarioInstanceId, owner, state, inputVariables, outputVariables);
			route created;
			if base.emitAny then {
				base.doEmit(created.toString(), owner);
			}
		}
	}
	
	/**
 	 * Called to send a new Edited event.
	 */
	action emitEdited(integer messageId, sequence<string> inputVariables) {
		flushPending();
		if base.sendAny then {
			Edited edited:=Edited(scenarioId, messageId, scenarioInstanceId, inputVariables, getUpdate());
			if base.routeUpdate then {
				route edited;
			}
			if base.emitAny then {
				base.doEmit(edited.toString(), owner);
			}
		}
		emitOpCompleted(messageId);
	}

	/**
 	 * Called to say an operation has completed; implied by emitEdited. Must be called before emitInstanceDied.
	 */
	action emitOpCompleted(integer messageId) {
		if(context.current().getId()!=mainContext.getId()) then {
			send OperationCompleted(scenarioId, scenarioInstanceId, messageId) to mainContext;
		}
	}

	/**
 	 * Called to send a new Deleted event.
	 */
	action emitDeleted(integer messageId) {
		flushPending();
		if base.sendAny then {
			Deleted deleted:=Deleted(scenarioId, messageId, scenarioInstanceId);
			if base.routeUpdate then {
				route deleted;
			}
			if base.emitAny then {
				base.doEmit(deleted.toString(), owner);
			}
		}
		throttlingListener.quit();
		notifyInstanceDied();
	}

	/**
 	 * Called to send an instance Died event (either of failed, ended)
	 */
	action emitInstanceDied() {
		flushPending();
		if base.sendAny then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			if base.emitAny then {
				base.doEmit(iDied.toString(), owner);
			}
			if mainContext.getId()=context.current().getId() then {
				route iDied;
			}
		}
		throttlingListener.quit();
	}

	/**
 	 * Called to notify the scenario service monitor that we have gone away - must be called 
 	 * after emitting any events regarding this instance going away. Implied by emitDeleted.
	 */
	action notifyInstanceDied() {
		if mainContext.getId()!=context.current().getId() then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			
			// give a chance for anyone monitoring this from its own context 
			// to handle the InstanceDied before the main context
			if base.routeUpdate then {
				route InstanceDied(scenarioId, scenarioInstanceId);
			}

			send iDied to mainContext;
		}
	}
	
	/**
 	 * Called to send a new StateChange event.
	 */
	action emitStateChange(string state) {
		flushPending();
		StateChange stchange:=StateChange(scenarioId, scenarioInstanceId, state);
		if mainContext.getId()!=context.current().getId() then {
			send stchange to mainContext;
		} else {
			route stchange;
		}
		if base.emitAny then {
			base.doEmit(stchange.toString(), owner);
		}
	}

	/**
 	 * Called to send an instance in response to a RequestInstancesInternal event
	 */
	action emitInstance(RequestInstancesInternal request, string owner, string state, sequence<string> input, sequence<string> output) {
		Instance instance:=Instance(scenarioId, request.messageId, scenarioInstanceId, owner, state, input, output);
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			} else {
				route instance;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
		if mainContext.getId() != context.current().getId() then {
			send RequestInstancesParallelDone(scenarioId, request.messageId, scenarioInstanceId) to mainContext;
		}
	}

	/**
 	 * Called when the instance has failed.  input and output are the input
 	 * and output variables as at the last Update/ Edited point.
	 */
	action finished(string state, string owner, sequence<string> input, sequence<string> output) {
		ScenarioFinished scenFinished:=ScenarioFinished(scenarioId, scenarioInstanceId, owner, state, input, output);
		if mainContext.getId() != context.current().getId() then {
			send scenFinished to mainContext;
		} else {
			route scenFinished;
		}
	}
	
}


/**
 * Utilitiy event for tracking configuration for a given scenario.
 * This event is suitable for use by monitors which spawn per scenario,
 * but not per instance. (e.g. ScenarioService, DataViewService)
 * 
 * actions starting with an underscore should be considered private 
 * and not called by users of this event.
 * 
 * Note that this updater only honours sendThrottledUser changes at the next throttling period
 * (it does not record the owner if sendThrottledUser is not true)
 */
event ScenarioServiceUpdaterMultipleInstances {
	// these are internal and should not be set by users
	string scenarioId;
	ScenarioServiceLibrary lib;
	listener throttlingListener;
	ScenarioServiceUpdaterBase base;
	boolean currentlySendingThrottledUser;
	dictionary<integer, Update> updates;
	dictionary<integer, string> owners;
	context mainContext;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor for each scenario
	 * Will maintain configuration for this scenario Id
	 */
	action init(string sId, context mainCtx) {
		_init(sId, mainCtx, _configurationUpdated);
	}
	
	/**
	 * Called by monitor for each scenario
	 * Will maintain configuration for this scenario Id
	 */
	action init_cb(string sId, context mainCtx, action<> cb_initComplete) {
		CallbackHelper callbackHelper:=new CallbackHelper;
		callbackHelper.callbacks.append(cb_initComplete);
		callbackHelper.callbacks.append(_configurationUpdated);
		_init(sId, mainCtx, callbackHelper.callback);
	}

	/**
	 * Implementation of init and init_cb
	 */
	action _init(string sId, context mainCtx, action<> cb_initComplete) {
		base.init(sId, cb_initComplete);
		mainContext:=mainCtx;
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		listener l:=on all SendQueuedUpdatesNow() {
			_sendThrottledUpdates();
		}
		base.listeners.append(l);
		base.listenToConfigureUpdates(_configurationUpdated);
	}
	
	/** 
	 * Get whether this scenario should route updates
	 */
	action isRouteUpdate() returns boolean {
		return base.routeUpdate;
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		base.destroy();
		throttlingListener.quit();
	}
	  

	/**
	 * called in instances (not factories) when configuration has changed
	 */
	action _configurationUpdated {
		if base.isSendThrottled() then {
			throttlingListener.quit();
			flushPending();
			if(base.throttlePeriod >= 0.0) then {
				_setupThrottleListener();
			}
		}
	}

	/**
	 * set up a throttled listener according to throttlePeriod control
	 */
	action _setupThrottleListener {
		if base.throttlePeriod > 0.0 then {
			throttlingListener:=on all wait(base.throttlePeriod) {
				_sendThrottledUpdates();
			}
		} else {
			_sendThrottledUpdates();
		}
	}

	/**
	 * actually send an update on the throttled channel
	 */
	action _sendThrottledUpdates {
		integer instance;
		if base.sendThrottled then {
			for instance in updates.keys() {
				send updates[instance] to dataChannel;
			}
		}
		if currentlySendingThrottledUser then {
			for instance in updates.keys() {
				send updates[instance] to lib.getDataUserChannel(dataChannel, owners[instance]);
			}
		}
		owners.clear();
		updates.clear();
		currentlySendingThrottledUser := base.sendThrottledUser;
	}

	/**
	 * flush any pending update on the throttled channel.
	 */
	action flushPending() {
		_sendThrottledUpdates();
	}	

	/**
 	 * Flush pending throttled data for one instance
	 */
	action flushPendingInstance(integer scenarioInstanceId) {
		if updates.hasKey(scenarioInstanceId) then {
			if base.sendThrottled then {
				send updates[scenarioInstanceId] to dataChannel;
			}
			if currentlySendingThrottledUser then {
				send updates[scenarioInstanceId] to lib.getDataUserChannel(dataChannel, owners[scenarioInstanceId]);
			}
			updates.remove(scenarioInstanceId);
			if owners.hasKey(scenarioInstanceId) then {
				owners.remove(scenarioInstanceId);
			}
		}
	}	

	/**
 	 * Called when a new update is available. (This variant allows setting of the time parameter)
	 */
	action emitUpdate_time(integer scenarioInstanceId, float time, sequence<string> output, string owner) {
		if base.sendAny then {
			Update update:=Update(scenarioId, scenarioInstanceId, time, output);
			if base.sendRaw then {
				send update to rawChannel;
			}
			if base.sendRawUser then {
				send update to lib.getRawUserChannel(rawChannel, owner);
			}
			if base.routeUpdate then {
				route update;
			}
			if base.isSendThrottled() then {
				if base.throttlePeriod > 0.0 then {
					updates.add(scenarioInstanceId, update);
					if currentlySendingThrottledUser then {
						owners.add(scenarioInstanceId, owner);
					}
				} else {
					send update to dataChannel;
				}
			}
		}
	}
	
	/**
 	 * Called when a new update is available.
	 */
	action emitUpdate(integer scenarioInstanceId, sequence<string> output, string owner) {
		emitUpdate_time(scenarioInstanceId, currentTime, output, owner);
	}

	/**
 	 * Called to send a new Acknowledgement event.
	 */
	action emitAcknowledgement(integer messageId, integer scenarioInstanceId, sequence<string> output) {
		Acknowledge ack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, true, output);
		if base.routeUpdate then {
			route ack;
		}
		if base.emitAny then {
			send ack to controlChannel;
		}
	}
				
	/**
 	 * Called to send a new Nak event.
	 */
	action emitNack(integer messageId, integer scenarioInstanceId) {
		Acknowledge nack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, false, new sequence<string>);
		if base.routeUpdate then {
			route nack;
		}
		if base.emitAny then {
			send nack to controlChannel;
		}
	}
	
	/**
 	 * Called to send a new Created event.
	 */
	action emitCreated(integer messageId, integer scenarioInstanceId, string owner, string state, sequence<string> inputVariables, sequence<string> outputVariables) {
		if base.sendAny then {
			Created created:=Created(scenarioId, messageId, scenarioInstanceId, owner, state, inputVariables, outputVariables);
			route created;
			if base.emitAny then {
				string sCreated:=created.toString();
				base.doEmit(sCreated, owner);
			}
		}
	}

	/**
 	 * Called to send any received events (except for instance) for this scenario.
	 */
	action emitReceivedEvents() {
		dictionary<integer, string> instanceOwners:=new dictionary<integer, string>;
		{
			Update update;
			listener l:=on all Update(scenarioId = scenarioId):update {
				if base.sendRaw then {
					send update to rawChannel;
				}
				if base.sendRawUser and instanceOwners.hasKey(update.scenarioInstanceId) then {	
					send update to lib.getRawUserChannel(rawChannel, instanceOwners[update.scenarioInstanceId]);
				}
				if base.isSendThrottled() then {
					if base.throttlePeriod > 0.0 then {
						updates.add(update.scenarioInstanceId, update);
						string owner:="*";
						if instanceOwners.hasKey(update.scenarioInstanceId) then {
							owner:=instanceOwners[update.scenarioInstanceId];
						}
						if currentlySendingThrottledUser then {
							owners.add(update.scenarioInstanceId, owner);
						}
					} else {
						send update to dataChannel;
					}
				}
			}
			base.listeners.append(l);
		}
		{
			Created created;
			listener l:=on all Created(scenarioId = scenarioId):created {
				if(created.owner != "*") then {
					instanceOwners.add(created.scenarioInstanceId, created.owner);
				}
				base.doEmit(created.toString(), created.owner);				
			}
			base.listeners.append(l);
		}
		{
			Deleted deleted;
			listener l:=on all Deleted(scenarioId = scenarioId):deleted {
				flushPendingInstance(deleted.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(deleted.scenarioInstanceId) then {
					owner:=instanceOwners[deleted.scenarioInstanceId];
					instanceOwners.remove(deleted.scenarioInstanceId);
				}
				base.doEmit(deleted.toString(), owner);		
			}
			base.listeners.append(l);
		}
		{
			Edited edited;
			listener l:=on all Edited(scenarioId = scenarioId):edited {
				flushPendingInstance(edited.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(edited.scenarioInstanceId) then {
					owner:=instanceOwners[edited.scenarioInstanceId];
				}
				base.doEmit(edited.toString(), owner);		
			}
			base.listeners.append(l);
		}
		{
			InstanceDied instanceDied;
			listener l:=on all InstanceDied(scenarioId = scenarioId):instanceDied {
				flushPendingInstance(instanceDied.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(instanceDied.scenarioInstanceId) then {
					owner:=instanceOwners[instanceDied.scenarioInstanceId];
				}
				base.doEmit(instanceDied.toString(), owner);		
			}
			base.listeners.append(l);
		}
	}
	
	/**
 	 * Called to send a new Edited event.
	 */
	action emitEdited(integer messageId, integer scenarioInstanceId, sequence<string> inputVariables, sequence<string> outputVariables, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			Edited edited:=Edited(scenarioId, messageId, scenarioInstanceId, inputVariables, outputVariables);
			if base.routeUpdate then {
				route edited;
			}
			if base.emitAny then {
				base.doEmit(edited.toString(), owner);
			}
		}
		emitOpCompleted(messageId, scenarioInstanceId);
	}

	/**
 	 * Called to say an operation has completed; implied by emitEdited. Must be called before emitInstanceDied.
	 */
	action emitOpCompleted(integer messageId, integer scenarioInstanceId) {
		if(context.current().getId()!=mainContext.getId()) then {
			send OperationCompleted(scenarioId, scenarioInstanceId, messageId) to mainContext;
		}
	}

	/**
 	 * Called to send a new Deleted event.
	 */
	action emitDeleted(integer messageId, integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			Deleted deleted:=Deleted(scenarioId, messageId, scenarioInstanceId);
			if base.routeUpdate then {
				route deleted;
			}
			if base.emitAny then {
				base.doEmit(deleted.toString(), owner);
			}
		}
		notifyInstanceDied(scenarioInstanceId);
	}

	/**
 	 * Called to notify the scenario service monitor that we have gone away - must be called 
 	 * after emitting any events regarding this instance going away. Implied by emitDeleted.
	 */
	action notifyInstanceDied(integer scenarioInstanceId) {
		if mainContext.getId()!=context.current().getId() then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			send iDied to mainContext;
		}
	}
	

	
	/**
 	 * Called to send an instance Died event (either of failed, ended)
	 */
	action emitInstanceDied(integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			if base.emitAny then {
				base.doEmit(iDied.toString(), owner);
			}
			if mainContext.getId()=context.current().getId() then {
				route iDied;
			}
		}
	}
	
	/**
 	 * Called to send a new StateChange event.
	 */
	action emitStateChange(string state, integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		StateChange stchange:=StateChange(scenarioId, scenarioInstanceId, state);
		if mainContext.getId()!=context.current().getId() then {
			send stchange to mainContext;
		} else {
			route stchange;
		}
		if base.emitAny then {
			base.doEmit(stchange.toString(), owner);
		}
	}

	/**
 	 * Called to send an instance in response to a RequestInstancesInternal event
	 */
	action emitInstance(RequestInstancesInternal request, integer scenarioInstanceId, string owner, string state, sequence<string> input, sequence<string> output) {
		Instance instance:=Instance(scenarioId, request.messageId, scenarioInstanceId, owner, state, input, output);
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			} else {
				route instance;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
		if mainContext.getId() != context.current().getId() then {
				send RequestInstancesParallelDone(scenarioId, request.messageId, scenarioInstanceId) to mainContext;
		}
	}
	/**
 	 * Called to send an instance that has already been seen in the current context
	 */
	action emitReceivedInstance(RequestInstancesInternal request, Instance instance) {
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
	}
	
}


/*
 * Monitor that performs the following tasks:
 *   - routing/emitting ScenarioServiceLoaded when the service is loaded
 *   - routing/emitting ScenarioServiceUnloaded when the service is unloaded
 *   - routing/emitting a nack if a Create request is ignored
 *   - maintains latest configuration
 *   - tracks state of ended/ failed scenarios
 *   - forwards Edit, delete events to scenarios in other contexts
 *
 */
monitor ScenarioService {

	event PendingOperation {
		integer messageId;
		integer type; // 0 = delete, 1 = edit
	}

	listener throttledSenderListener;
	ScenarioServiceLibrary lib;
	RequestScenarios requestScenarios;
	boolean requestingScenarios;
	
	// MetaData relating to the interface
	dictionary<string,string> interfaceMetaData := {
		"interface.package"     :"com.apama.scenario",
		"interface.name"        :"ScenarioService",
		"interface.fileName"    :"ScenarioService.mon",
		"interface.vendor"      :"Apama",
		"interface.version"     :"5.3.0.0.247085",
		"interface.fullVersion" :"rel/5.3.0.x@247085",
		"interface.language"    :"MonitorScript"
	};
	
	// Channel names	
	string scenarioServiceChannel := "com.apama.scenario";
	integer highestInstanceId;


	// the first mThread handles scenario discovery and maps some events to internal events
	action onload {
		// print version
		log "ScenarioService interface loaded. MetaData: "+interfaceMetaData.toString() at INFO;
		
		// generate the ScenarioServiceLoaded event
		route ScenarioServiceLoaded();
		send ScenarioServiceLoaded() to scenarioServiceChannel;

		dictionary <string,string> defaultConfig:=new dictionary<string,string>;
		dictionary <string, dictionary<string,string> > configurations:=new dictionary<string, dictionary<string,string> >;
		lib.configurationManager(defaultConfig, configurations);
		RequestInstancesOnChannel requestInstancesOnChannel;
		on all RequestInstancesOnChannel():requestInstancesOnChannel {
			route RequestInstancesInternal(requestInstancesOnChannel.scenarioId, requestInstancesOnChannel.messageId, requestInstancesOnChannel.channel, false, "", false);
			on RequestInstancesDone(scenarioId=requestInstancesOnChannel.scenarioId, messageId=requestInstancesOnChannel.messageId) {
				send RequestInstancesDone(requestInstancesOnChannel.scenarioId, requestInstancesOnChannel.messageId) to requestInstancesOnChannel.channel;
			}
		}

		RequestInstancesOnChannelByUser requestInstancesOnChannelByUser;
		on all RequestInstancesOnChannelByUser():requestInstancesOnChannelByUser {
			route RequestInstancesInternal(requestInstancesOnChannelByUser.scenarioId, requestInstancesOnChannelByUser.messageId, requestInstancesOnChannelByUser.channel, false, requestInstancesOnChannelByUser.owner, true);
			on RequestInstancesDone(scenarioId=requestInstancesOnChannelByUser.scenarioId, messageId=requestInstancesOnChannelByUser.messageId) {
				send RequestInstancesDone(requestInstancesOnChannelByUser.scenarioId, requestInstancesOnChannelByUser.messageId) to requestInstancesOnChannelByUser.channel;
			}
		}
		Scenario scenario;
		on all Scenario():scenario {
			if requestingScenarios then {
				send scenario to requestScenarios.channel;
			} else {
				spawn trackScenario(scenario);
			}
		}
		
		ScenarioUnloaded scenarioUnloaded;
		on all ScenarioUnloaded(): scenarioUnloaded {
			send scenarioUnloaded to scenarioServiceChannel;
		}

		
		on all RequestScenarios():requestScenarios {
			send RequestScenariosAck() to requestScenarios.channel;
			route StartScenarioRecovery();
			route FinishedScenarioRecovery();
			requestingScenarios:=true;
			on FinishedScenarioRecovery() {
				requestingScenarios:=false;
				send RequestScenariosDone() to requestScenarios.channel;
			}
		}

		dictionary <string,string> EMPTY_DICT:=new dictionary<string,string>;
		// Pick up any requests for operations on invalid scenarioIds
		Create create;
		on all unmatched Create(): create {
			dictionary<string,string> config:=EMPTY_DICT;
			if configurations.hasKey(create.scenarioId) then {
				config:=configurations[create.scenarioId];
			}
			Acknowledge nack := new Acknowledge;
			nack.scenarioId := create.scenarioId;
			nack.messageId := create.messageId;
			nack.success := false;
			log create.scenarioId+": Scenario create ignored - unknown scenarioId." at WARN;
			send nack to lib.getControlChannel(create.scenarioId);
			if lib.getRouteUpdate(defaultConfig, config) then {
				route nack;
			}
		}

		// The old SetThrottlingPeriod is mapped to a ConfigureUpdates event
		SetThrottlingPeriod setThrottlingPeriod;		
		on all SetThrottlingPeriod():setThrottlingPeriod {
			dictionary<string, string> configChanges:=new dictionary<string,string>;
			if setThrottlingPeriod.period >= 0.0 then {
				configChanges["sendThrottled"]:="true";
				configChanges["throttlePeriod"]:=setThrottlingPeriod.period.toString();
			} else {
				configChanges["sendThrottled"]:="false";
			}
			ConfigureUpdates cu:=ConfigureUpdates("", configChanges);
			log "Received deprecated event "+setThrottlingPeriod.toString()+", will re-route as "+cu.toString() at WARN;
			route cu;
		}
	}		
				
	
	action onunload {
		// generate the ScenarioServiceUnloaded event
		ScenarioServiceUnloaded unloaded := new ScenarioServiceUnloaded;
		route unloaded;
		send unloaded to scenarioServiceChannel;
	}
	
	/**
	 * spawned per scenario, and handles any finished scenario instances.
	 * For parallel scenarios, it also tracks which instance runs in 
	 * which context and forwards Edit and Delete events.
	 */
	action trackScenario(Scenario scenario) {
		on ScenarioUnloaded(scenarioId=scenario.scenarioId) {
			die;
		}
		ScenarioServiceUpdaterMultipleInstances updater:=new ScenarioServiceUpdaterMultipleInstances;
		updater.init(scenario.scenarioId, context.current());
		ScenarioFinished finished;
		on all ScenarioFinished(scenarioId=scenario.scenarioId):finished {
			// Finished scenarios can be deleted (which terminates all listeners for this instance), 
			// discovered, and edits are Nacked 
			Delete delete;
			on Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId):delete {
				updater.emitAcknowledgement(delete.messageId, finished.scenarioInstanceId, finished.outputFieldValues);
				updater.emitDeleted(delete.messageId, finished.scenarioInstanceId, finished.owner);
			}
			Edit edit;
			on all Edit(scenarioId=scenario.scenarioId, scenarioInstanceId=finished.scenarioInstanceId):edit and not 
			            Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
				updater.emitNack(edit.messageId, finished.scenarioInstanceId);
				log scenario.displayName+"("+finished.scenarioInstanceId.toString()+ "): Scenario edit ignored - Scenario is in "+finished.state+" state." at WARN;
			}
			RequestInstancesInternal requestInstances;
			if finished.owner = "*" then {
				on all RequestInstancesInternal(scenarioId=scenario.scenarioId):requestInstances and not
						Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
					updater.emitInstance(requestInstances, finished.scenarioInstanceId,
						finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
				}
			} else {
				on all (RequestInstancesInternal(scenarioId=scenario.scenarioId, ownerFilter=false):requestInstances or
					RequestInstancesInternal(scenarioId=scenario.scenarioId, owner=finished.owner, ownerFilter=true):requestInstances) and not
						Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
					updater.emitInstance(requestInstances, finished.scenarioInstanceId,
						finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
				}
			}
		}
		if scenario.executionMode > 0 then {
			// for parallel scenarios, we keep track of instance to context mapping:
			dictionary<integer, context> runningCtxs := new dictionary<integer, context>;
			// and to owner mapping:
			dictionary<integer, string> ownerCtxs := new dictionary<integer, string>;
			// and by user:
			dictionary<string, dictionary<integer, context> > runningCtxsByOwner := new dictionary<string, dictionary<integer, context> >;
			// maps from instanceId to sequence<messageId>
			dictionary<integer, sequence<PendingOperation> > pendingOperations := new dictionary<integer, sequence<PendingOperation> >;
			ParallelStarting starting;
			on all ParallelStarting(scenarioId = scenario.scenarioId):starting {
				runningCtxs.add(starting.scenarioInstanceId, starting.runningCtx);
				ownerCtxs.add(starting.scenarioInstanceId, starting.owner);
				if not runningCtxsByOwner.hasKey(starting.owner) then {
					runningCtxsByOwner.add(starting.owner, new dictionary<integer, context>);
				}
				runningCtxsByOwner[starting.owner].add(starting.scenarioInstanceId, starting.runningCtx);
				highestInstanceId := starting.scenarioInstanceId;
			}
			
			InstanceDied died;
			on all InstanceDied(scenarioId = scenario.scenarioId):died {
				if runningCtxs.hasKey(died.scenarioInstanceId) then {
					runningCtxs.remove(died.scenarioInstanceId);
				}
				if ownerCtxs.hasKey(died.scenarioInstanceId) then {
					string owner:=ownerCtxs[died.scenarioInstanceId];
					ownerCtxs.remove(died.scenarioInstanceId);
					if runningCtxsByOwner.hasKey(owner) then {
						if runningCtxsByOwner[owner].hasKey(died.scenarioInstanceId) then {
							runningCtxsByOwner[owner].remove(died.scenarioInstanceId);
						}
						if runningCtxsByOwner[owner].size()=0 then {
							runningCtxsByOwner.remove(owner);
						}
					}
				}
				if pendingOperations.hasKey(died.scenarioInstanceId) then {
					PendingOperation pending;
					for pending in pendingOperations[died.scenarioInstanceId] {
						if pending.type = 0 then {
							route Delete(scenario.scenarioId, pending.messageId, died.scenarioInstanceId);
						} else {
							if pending.type = 1 then {
								route Edit(scenario.scenarioId, pending.messageId, died.scenarioInstanceId, new sequence<string>);
							} else {
								log "error: unknown pending operation type "+pending.toString() at ERROR;
							}
						}
					}
					pendingOperations.remove(died.scenarioInstanceId);
				}
			}
			
			// and forward edits, deletes:
			Edit edit;
			on all unmatched Edit(scenarioId = scenario.scenarioId):edit {
				if runningCtxs.hasKey(edit.scenarioInstanceId) then {
					send edit to runningCtxs[edit.scenarioInstanceId];
					addPendingOperation(pendingOperations, edit.scenarioInstanceId, edit.messageId, 1);
					on OperationCompleted(scenarioId = scenario.scenarioId, scenarioInstanceId = edit.scenarioInstanceId, messageId = edit.messageId) and not
					   ScenarioFinished(scenarioId = scenario.scenarioId, scenarioInstanceId = edit.scenarioInstanceId){
						removePendingOperation(pendingOperations, edit.scenarioInstanceId, edit.messageId);
					}
				} else {
					log scenario.displayName+"("+edit.scenarioInstanceId.toString()+"): Scenario edit ignored - unknown scenarioInstanceId." at WARN;
					updater.emitNack(edit.messageId, edit.scenarioInstanceId);
				}
			}
			Delete delete;
			on all unmatched Delete(scenarioId = scenario.scenarioId):delete {
				if runningCtxs.hasKey(delete.scenarioInstanceId) then {
					send delete to runningCtxs[delete.scenarioInstanceId];
					addPendingOperation(pendingOperations, delete.scenarioInstanceId, delete.messageId, 0);
					on OperationCompleted(scenarioId = scenario.scenarioId, scenarioInstanceId = delete.scenarioInstanceId, messageId = delete.messageId) and not
					   ScenarioFinished(scenarioId = scenario.scenarioId, scenarioInstanceId = delete.scenarioInstanceId){
						removePendingOperation(pendingOperations, delete.scenarioInstanceId, delete.messageId);
					}
				} else {
					log scenario.displayName+"("+delete.scenarioInstanceId.toString()+"): Scenario delete ignored - unknown scenarioInstanceId." at WARN;
					updater.emitNack(delete.messageId, delete.scenarioInstanceId);
				}
			}
			
			// and request instances is handled by a separate monitor. Note that 
			// Finished scenarios are not in the dictionary, but are handled by the finished
			// listener above.
			RequestInstancesInternal reqInstances;
			on all RequestInstancesInternal(scenarioId=scenario.scenarioId):reqInstances {
				if reqInstances.ownerFilter then {
					if runningCtxsByOwner.hasKey(reqInstances.owner) then {
						dictionary<integer, context> rCtxs:=runningCtxsByOwner[reqInstances.owner];
						if runningCtxsByOwner.hasKey("*") then {
							rCtxs:=rCtxs.clone();
							integer i;
							dictionary<integer, context> wildcards:=runningCtxsByOwner["*"];
							for i in wildcards.keys() {
								rCtxs.add(i, wildcards[i]);
							}
						}
						route RequestInstancesParallel(reqInstances, rCtxs, highestInstanceId);
					} else {
						if runningCtxsByOwner.hasKey("*") then {
							route RequestInstancesParallel(reqInstances, runningCtxsByOwner["*"], highestInstanceId);
						} else {
							route RequestInstancesParallel(reqInstances, new dictionary<integer,context>, highestInstanceId);
						}
					}
				} else {
					route RequestInstancesParallel(reqInstances, runningCtxs, highestInstanceId);
				}
			}
			ConfigureUpdates cu;
			on all ConfigureUpdates(scenarioId=""):cu or all ConfigureUpdates(scenarioId=scenario.scenarioId):cu {
				integer inst;
				for inst in runningCtxs.keys() {
					send cu to runningCtxs[inst];
				}
			}
			on all SendQueuedUpdatesNow() {
				SendQueuedUpdatesNow snow:=SendQueuedUpdatesNow();
				integer inst;
				for inst in runningCtxs.keys() {
					send snow to runningCtxs[inst];
				}
			}
		}
	}
	
	action addPendingOperation(dictionary<integer,  sequence<PendingOperation> > pendingOperations, integer scenarioInstanceId, integer messageId, integer type) {
		if not pendingOperations.hasKey(scenarioInstanceId) then {
			pendingOperations.add(scenarioInstanceId, new sequence<PendingOperation>);
		}
		pendingOperations[scenarioInstanceId].append(PendingOperation(messageId, type));
	}
	
	action removePendingOperation(dictionary<integer, sequence<PendingOperation> > pendingOperations, integer scenarioInstanceId, integer messageId) {
		if not pendingOperations.hasKey(scenarioInstanceId) then {
			return;
		}
		integer idx:=-1, i:=0;
		while(i < pendingOperations[scenarioInstanceId].size()) {
			if pendingOperations[scenarioInstanceId][i].messageId = messageId then {
				idx:=i;
				break;
			}
			i:=i+1;
		}
		if(idx>=0) then {
			pendingOperations[scenarioInstanceId].remove(idx);
		}
		if pendingOperations[scenarioInstanceId].size() = 0 then {
			pendingOperations.remove(scenarioInstanceId);
		}
	}	
}

/*
 * Monitor that handles request instances for parallel scenarios:
 * - on a RequestInstancesOnChannel for a parallel scenario, the ScenarioService 
 *   routes a RequestInstancesParallel which triggers this monitor to spawn.
 * - this waits for a response (be it to say the request instances has been 
 *   handled or that the scenario has finished) before sending the 
 *   RequestInstancesDone event 
 *
 * Note that this monitor assumes scenarioInstancesIds always increase over time.
 */
monitor RequestInstancesHandler {
	RequestInstancesParallel req;
	action onload {
		on all RequestInstancesParallel():req {
			spawn handleRequest();
		}
	}
	
	/**
	 * Forward the request to every context and await responses. We remove 
	 * instances from the dictionary upon receiving an update for them. 
	 */
	action handleRequest() {
		ScenarioServiceUpdaterMultipleInstances updater:=new ScenarioServiceUpdaterMultipleInstances;
		updater.init(req.request.scenarioId, context.current());
		integer k;
		for k in req.instances.keys() {
			send req.request to req.instances[k];
		}
		// if a scenario dies, it will send events in the order ScenarioFinished, InstanceDied:
		ScenarioFinished finished;
		on all ScenarioFinished(scenarioId=req.request.scenarioId, scenarioInstanceId <= req.highestInstanceId):finished {
			// if a scenario dies after it has sent the Instance, do not send another 
			// (the StateChange/ InstanceDied events are sufficient)
			if(req.instances.hasKey(finished.scenarioInstanceId)) then {
				updater.emitInstance(req.request, finished.scenarioInstanceId,
					finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
			}
		}
		// A finished scenario should not be counted
		InstanceDied died;
		on all InstanceDied(scenarioId = req.request.scenarioId, scenarioInstanceId <= req.highestInstanceId):died {
			if(req.instances.hasKey(died.scenarioInstanceId)) then {
				req.instances.remove(died.scenarioInstanceId);
				checkFinished();
			}
		}
		RequestInstancesParallelDone pdone;
		on all RequestInstancesParallelDone(scenarioId = req.request.scenarioId, messageId = req.request.messageId):pdone {
			if(req.instances.hasKey(pdone.scenarioInstanceId)) then {
				req.instances.remove(pdone.scenarioInstanceId);
				checkFinished();
			}
		}
		checkFinished();
	}
	
	/**
	 * Check whether we are finished.
	 * We are finished if we have no instances left in our dictionary, in which 
	 * case we route a RequestInstancesDone (handled by the ScenarioService monitor)
	 * and terminate.
	 */
	action checkFinished() {
		if req.instances.size()=0 then {
			route RequestInstancesDone(req.request.scenarioId, req.request.messageId);
			die;
		}
	}
}

 00000034 C:\SoftwareAG\Apama 5.3\monitors\ScenarioService.mon
TIME 0000000e 1444709904.5,1
TIME 0000000e 1444709904.6,1
MONF 0000ed5b package com.apama.dataview;

/*
 * $Copyright(c) 2007-2011 Progress Software Corporation (PSC). All rights reserved.$
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */


/* This is an implementation of the Apama DataViewService API.
 *
 * You must first inject the "interface" - DataViewService_Interface.mon
 * Several implementations of the interface may exist. 
 * You may also need to inject optional "emitter" (see below).
 * Each implementation is in a separate file - inject the one you wish to use.
 *   e.g. this implementation is DataViewService_Impl_Dict.mon
 * 
 *
 * This service enables MonitorScript or JMon applications to expose a simple 
 * read-only "DataView" interface. DataViews may be viewed using Apama Dashboard 
 * Studio in a similar way to Scenarios.
*
 * Route vs. Send
 * The standard implementations of the DataViewService will always ROUTE 
 * any com.apama.dataview.* events, with the expectation that applications
 * using the service are co-located in the same correlator as the service.
 * If your architecture requires the client application to be in a separate 
 * correlator to the DataView service, then two "emitter" monitors are 
 * available.
 * DataViewService_ServiceEmitter.mon  would be injected into the same 
 * correlator as the DataView service after injecting the DataViewService 
 * interface but before injecting the implementation.
 * DataViewService_ApplicationEmitter.mon  would be injected into the same 
 * correlator as the client application after injecting the DataViewService 
 * interface but before injecting the client application.
 *
 * Notes:
 * 
 * 1) Every event has an initial field called msgId. Clients may choose to put 
 *    some identifier in this field when sending messages to the service. Any 
 *    event routed by the service in response will contain the same identifier.
 *
 * 2) Most events contain a field called "dvName". This string 
 *    uniquely identifies a DataView inside the correlator. 
 *
 * 3) Every event has a final field called extraParams that is a string:string
 *    dictionary. Some implementations may choose to use this field. It provides
 *    a way of future-proofing the interface to a certain extent.
 *
 * $Revision: 242755 $
 */

using com.apama.scenario.Create;
using com.apama.scenario.Delete;
using com.apama.scenario.Edit;
using com.apama.scenario.RequestInstancesDone;
using com.apama.scenario.RequestInstancesInternal;
using com.apama.scenario.Scenario;
using com.apama.scenario.ScenarioServiceUpdaterMultipleInstances;
using com.apama.scenario.ScenarioUnloaded;
using com.apama.scenario.StartScenarioRecovery;

// INTERNAL API CODE

monitor DataViewService_Impl_Dict {

	/** Internal event used to store instances/items in a DataView. */
	event _Item {
		wildcard integer scenarioInstanceId;
		wildcard string owner;
		sequence<string> outputFields;
	}
	

	// MetaData relating to this specific implementation
	dictionary<string,string> implementationMetaData := {
		"implementation.package"       :"com.apama.dataview",
		"implementation.name"          :"DataViewService_Impl_Dict",
		"implementation.fileName"      :"DataViewService_Impl_Dict.mon",
		"implementation.vendor"        :"Apama",
		"implementation.version"       :"5.3.0.0.247085",
		"implementation.fullVersion"   :"rel/5.3.0.x@247085",
		"implementation.language"      :"MonitorScript"
	};

	
	// Variables needed in the parent monitor
	dictionary <string, string> dataViewNamesDictionary;  // scenarioId : dvName
	DataViewAddDefinition dvAddDefinition;

	// Variables required in the per-DataView spawned sub-monitor 
	string dvName;  // this is without the PREFIX (which is defined in the onload)
	string scenarioId; // this is with the PREFIX (which is defined in the onload)
	integer NUM_FIELDS;
	sequence<integer> compoundKeyIndexes; // the indexes of the fields which form the compound unique key of a _Item
	sequence<string> compoundKeyNames;    // the names of the fields which form the compound unique key of a _Item
	dictionary <string, integer> compoundKeyInstanceDictionary; // scenarioInstanceCompoundKey : scenarioInstanceId
	dictionary <integer, _Item> instancesDictionary; // scenarioInstanceId : _Item
	integer scenarioInstanceId := 0;
	
	// Defect 9762.  Space, semi-colon and tab in dvName must be escaped 
	dictionary<string, string> escapeCharMap := {" ":"_",		// space
	                                             ";":"$003b",	// semi-colon
	                                             "	":"$0009",	// tab
	                                             "\t":"$0009"	// tab
	                                            };
	dictionary <string, string> escapedDvNamesDictionary; // unescaped dvname : escaped dvname
	dictionary <string, string> escapedScenarioIdDictionary; // unescaped scenarioId : escaped scenarioId

	ScenarioServiceUpdaterMultipleInstances updater;
	
	
	//===================================================================================
	
	/** A default no-arg constructor for an internal _Item. */
	action createDefaultItem() returns _Item {
		return _Item( -1, "", new sequence<string> );
	}

	/** action to take a string and escape all characters appeared in the escapeCharMap dictionary
	 *
	 * @param s - the string to be escaped
	 * 
	 * @return escaped string.  The original string is returned if there is nothing to be escaped
	**/
	action escapeDvName(string s) returns string {
		integer i;
		string retString := s;
		string unEscapeChar;
		for unEscapeChar in escapeCharMap.keys() {
			retString := _escapeIt(retString, unEscapeChar, escapeCharMap[unEscapeChar]);
		}
		
		return retString;
	}
	
	/** internal recursive method to escape the passed in string s.  s will be scanned for the the 
	    unEscapeChar and if found, replaced that with the escapeChar param.  This process will continue
	    until all characters in s is scanned.
	**/
	action _escapeIt( string s, string unEscapeChar, string escapeChar ) returns string {
		
		if (s.find(unEscapeChar) = -1) then {
			return s;
		}
		
		integer index := s.find(unEscapeChar);

		string rest := s.substring(index+1, s.length());
		string retString := s.substring(0, index) + escapeChar + _escapeIt(rest, unEscapeChar, escapeChar);
		
		return retString;
	}
	
	action getEscapedDvName( string rawDvName ) returns string {
		string s;

		// given the raw dvName, return the cached value
		if (escapedDvNamesDictionary.hasKey(rawDvName)) then {
			return escapedDvNamesDictionary[rawDvName];
		}
		
		// not found, just return original string
		return rawDvName;
	}
	
	action getUnescapedDvName( string escapedDvName ) returns string {
		
		string s;
		for s in escapedDvNamesDictionary.keys() {
			if (escapedDvNamesDictionary[s] = escapedDvName) then {
				return s;
			}
		}
		
		// not found, just return original string
		return escapedDvName;
	}
	
	action getEscapedScenarioId( string rawScenarioId ) returns string {
		string s;

		// given the raw scenarioId, return the cached value
		if (escapedScenarioIdDictionary.hasKey(rawScenarioId)) then {
			return escapedScenarioIdDictionary[rawScenarioId];
		}
		
		// not found, just return original string
		return rawScenarioId;
	}
	
	action getUnescapedScenarioId( string escapedScenarioId ) returns string {
		
		string s;
		for s in escapedScenarioIdDictionary.keys() {
			if (escapedScenarioIdDictionary[s] = escapedScenarioId) then {
				return s;
			}
		}
		
		// not found, just return original string
		return escapedScenarioId;
	}
	
	action convertToScenarioId( string in_dvName ) returns string {
		string PREFIX := "DV_";
		string out_scenarioId;
		
		// for now just prepend the prefix, but in future do more checks and escaping of the name
		out_scenarioId:=PREFIX+in_dvName;
		
		return out_scenarioId;
	}
	
	
	action onload {
		log "DataViewService implementation loaded. MetaData: "+implementationMetaData.toString() at INFO;
		
		log "onload() - entered." at DEBUG;

		// Look for the event to define a new DataView
		on all DataViewAddDefinition():dvAddDefinition {
			string escapedDvName := escapeDvName(dvAddDefinition.dvName);
			
			// name must not be ""
			if (dvAddDefinition.dvName.length()=0) then {
				string msg := "Invalid name for new DataView - length must be greater than zero.";
				log "onload().on_all_DataViewAddDefinition() - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string> );
				return;
			}
			
			//name can not start with MEMST (clashes with memorystore plugin)
			string MEMORY_STORE_PREFIX := "MEMST_";
			if (dvAddDefinition.dvName.find(MEMORY_STORE_PREFIX)=0) then {
				string msg := "Invalid name for new DataView - Must not start with " + MEMORY_STORE_PREFIX;
				log "onload().on_all_DataViewAddDefinition() - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, dvAddDefinition.dvName, msg, new dictionary<string,string> );
				return;
			}
			
			
			// displayName must not be ""
			if (dvAddDefinition.dvDisplayName.length()=0) then {
				string msg := "Invalid displayName for new DataView - length must be greater than zero.";
				log "onload().on_all_DataViewAddDefinition() - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string> );
				return;
			}
			
			// use the escaped dvName here.  Will save to the escapedDvNamesDictionary
			// when validation is passed

			// both dvName and scenarioId are escaped
			dvName:=escapedDvName;
			scenarioId:=convertToScenarioId(dvName);
			string rawScenarioId:=convertToScenarioId(dvAddDefinition.dvName);
			
			// Validate the params we were given...
			
			// Make sure this is not already present as a DataView or Scenario
			if dataViewNamesDictionary.hasKey(scenarioId) then {
				string msg := "DataView name already exists";
				log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
				return;
			}
			
				
			// Make sure we were given more than zero field names and types
			if (0=dvAddDefinition.fieldNames.size() or 0=dvAddDefinition.fieldTypes.size()) then {
				string msg := "There must be 1 or more fields. DataViewAddDefinition event supplied "+dvAddDefinition.fieldNames.size().toString() +" names, and "+dvAddDefinition.fieldTypes.size().toString()+" types.";
				log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
				return;
			}
			
			// Make sure we were not given any duplicate field names or emptystring field names
			dictionary<string,boolean> validNames := new dictionary<string,boolean>;
			string fName;
			for fName in dvAddDefinition.fieldNames {
				// check for name=""
				if (0=fName.length()) then {
					string msg := "One of the supplied field names in a DataViewAddDefinition event is invalid. Field names must have a length greater than zero. The field names supplied were: "+dvAddDefinition.fieldNames.toString();
					log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
					route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
					return;					
				}
				// check for duplicates
				if (validNames.hasKey(fName)) then {
					string msg := "One of the supplied field names in a DataViewAddDefinition event is a duplicate. Duplicate field name: \""+fName+"\". The field names supplied were: "+dvAddDefinition.fieldNames.toString();
					log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
					route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
					return;
				}
				validNames[fName] := true;
			}
			
			// Make sure we were given enough types for the field names
			if (dvAddDefinition.fieldNames.size() != dvAddDefinition.fieldTypes.size()) then {
				string msg := "Each field name must have a corresponding type. DataViewAddDefinition event supplied "+dvAddDefinition.fieldNames.size().toString() +" names, and "+dvAddDefinition.fieldTypes.size().toString()+" types.";
				log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
				route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
				return;
			}
			
			// Make sure the type strings we were given represent valid scenario variable types
			dictionary<string,boolean> validTypes := {"string":true, "float":true, "integer":true, "boolean":true, "enumeration":true};			
			integer i := 0;
			string t;
			for t in dvAddDefinition.fieldTypes {
				if not validTypes.hasKey(t) then {
					string msg := "One of the supplied field types in a DataViewAddDefinition event is invalid. The type supplied at index "+i.toString()+" was: \""+t+"\"";
					log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
					route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
					return;
				}
				i:=i+1;
			}

			compoundKeyIndexes := new sequence<integer>; // ensure it is ALWAYS reset
			compoundKeyNames := new sequence<string>; // ensure it is ALWAYS reset
			// if we've been given some optional key fields, then validate these
			if (dvAddDefinition.keyFields.size() > 0) then {
				string k;
				for k in dvAddDefinition.keyFields {
					integer idx := dvAddDefinition.fieldNames.indexOf(k);
					if (-1 = idx) then {
						string msg := "One of the supplied keyField field names in a DataViewAddDefinition event is invalid. The invalid keyField name supplied was: \""+k+"\". The keyField names supplied were: "+dvAddDefinition.keyFields.toString();
						log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
						route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
						return;						
					}
					if (-1 < compoundKeyIndexes.indexOf(idx)) then {
						string msg := "A duplicate keyField field name was given in a DataViewAddDefinition event. Duplicate keyField name: \""+k+"\". The keyField names supplied were: "+dvAddDefinition.keyFields.toString();
						log "onload().on_all_DataViewAddDefinition() - \""+escapedDvName+"\" - "+msg at WARN;
						route DataViewException(dvAddDefinition.msgId, escapedDvName, msg, new dictionary<string,string>);
						return;												
					}
					compoundKeyIndexes.append(idx); // since it is valid, add the index to the set.
				}
				compoundKeyNames := dvAddDefinition.keyFields;
			}

			// all fields are validated, save the escapedDvName and associate the scenarioId with the escapedName (dvName is escaped already)
			escapedDvNamesDictionary.add(dvAddDefinition.dvName, dvName);
			escapedScenarioIdDictionary.add(rawScenarioId, scenarioId);
			
			dataViewNamesDictionary.add(scenarioId, dvName);
			log "onload().on_all_DataViewAddDefinition() - \""+dvAddDefinition.dvName+"\" - adding new DataView definition with name: \""+dvAddDefinition.dvName+"\", and exposed externally with scenarioId: \""+scenarioId+"\"" at INFO;
			log "onload().on_all_DataViewAddDefinition() - \""+dvAddDefinition.dvName+"\" - spawning initializeScenario()..." at DEBUG;
			spawn initializeScenario;

		}

		// look for requests to unload definitions and tidy up our records.
		// The actual (spawned) DataView *also* looks for this event and kills itself
		DataViewDeleteDefinition dvDeleteDefinition;
		on all DataViewDeleteDefinition():dvDeleteDefinition {
			string rawScenarioId := convertToScenarioId(dvDeleteDefinition.dvName);
			string escapedScenarioId := getEscapedScenarioId(rawScenarioId);
			if dataViewNamesDictionary.hasKey(escapedScenarioId) then {
				log "onload().on_all_DataViewDeleteDefinition() - \""+dvDeleteDefinition.dvName+"\" - removing DataView from dictionary with DataView name: \""+dvDeleteDefinition.dvName+"\", and exposed externally with scenarioId: \""+rawScenarioId+"\"" at INFO;
				dataViewNamesDictionary.remove(escapedScenarioId);
				escapedDvNamesDictionary.remove(dvDeleteDefinition.dvName);  // key is unescapedDvName
				escapedScenarioIdDictionary.remove(rawScenarioId);  // key is unescapedScenarioId
			}
		}

		
		// Look for external (i.e. com.apama.scenario API events) to remove
		// existing scenarios from our list to ensure we're up to date.
		ScenarioUnloaded scenScenarioUnloaded;
		on all ScenarioUnloaded():scenScenarioUnloaded {
			// the following if statement should never now eval to true, as the entry in the dictionary 
			// should always have been previously deleted by the DataViewDeleteDefinition (see above). Done for completeness.
			if dataViewNamesDictionary.hasKey(scenScenarioUnloaded.scenarioId) then {
				string dvName := dataViewNamesDictionary[scenScenarioUnloaded.scenarioId];
				log "onload().on_all_ScenarioUnloaded() - \""+scenScenarioUnloaded.scenarioId+"\" - removing DataView from dictionary with DataView name: \""+dvName+"\", and exposed externally with scenarioId: \""+scenScenarioUnloaded.scenarioId+"\"" at INFO;
				dataViewNamesDictionary.remove(scenScenarioUnloaded.scenarioId);
				escapedDvNamesDictionary.remove(getUnescapedDvName(dvName));  // key is unescapedDvName
				escapedScenarioIdDictionary.remove(getUnescapedScenarioId(scenScenarioUnloaded.scenarioId));  // key is unescapedScenarioId
			}			
		}

		
		// Look for DataViewItem* events for DataView names that do not exist and route exception events
		DataViewAddItem unmatchedAddItem;
		on all unmatched DataViewAddItem():unmatchedAddItem {
			string msg := "Unknown DataView name in a DataViewAddItem event";
			log "unmatched DataViewAddItem() - "+msg at WARN;
			route DataViewException(unmatchedAddItem.msgId, escapeDvName(unmatchedAddItem.dvName), msg, new dictionary<string,string>);
		}
		DataViewAddOrUpdateItem unmatchedAddOrUpdateItem;
		on all unmatched DataViewAddOrUpdateItem():unmatchedAddOrUpdateItem {
			string msg := "Unknown DataView name in a DataViewAddOrUpdateItem event";
			log "unmatched DataViewAddOrUpdateItem() - "+msg at WARN;
			route DataViewException(unmatchedAddOrUpdateItem.msgId, escapeDvName(unmatchedAddOrUpdateItem.dvName), msg, new dictionary<string,string>);
		}
		DataViewUpdateItem unmatchedUpdateItem;
		on all unmatched DataViewUpdateItem():unmatchedUpdateItem {
			string msg := "Unknown DataView name in a DataViewUpdateItem event";
			log "unmatched DataViewUpdateItem() - "+msg at WARN;
			route DataViewItemException(unmatchedUpdateItem.msgId, escapeDvName(unmatchedUpdateItem.dvName), unmatchedUpdateItem.dvItemId, msg, new dictionary<string,string>);
		}
		DataViewUpdateItemDelta unmatchedUpdateItemDelta;
		on all unmatched DataViewUpdateItemDelta():unmatchedUpdateItemDelta {
			string msg := "Unknown DataView name in a DataViewUpdateItemDelta event";
			log "unmatched DataViewUpdateItemDelta() - "+msg at WARN;
			route DataViewItemException(unmatchedUpdateItemDelta.msgId, escapeDvName(unmatchedUpdateItemDelta.dvName), unmatchedUpdateItemDelta.dvItemId, msg, new dictionary<string,string>);
		}
		DataViewDeleteItem unmatchedDeleteItem;
		on all unmatched DataViewDeleteItem():unmatchedDeleteItem {
			string msg := "Unknown DataView name in a DataViewDeleteItem event";
			log "unmatched DataViewDeleteItem() - "+msg at WARN;
			route DataViewItemException(unmatchedDeleteItem.msgId, escapeDvName(unmatchedDeleteItem.dvName), unmatchedDeleteItem.dvItemId, msg, new dictionary<string,string>);
		}
		DataViewDeleteAllItems unmatchedDeleteAllItems;
		on all unmatched DataViewDeleteAllItems():unmatchedDeleteAllItems {
			string msg := "Unknown DataView name in a DataViewDeleteAllItems event";
			log "unmatched DataViewDeleteAllItems() - "+msg at WARN;
			route DataViewException(unmatchedDeleteAllItems.msgId, escapeDvName(unmatchedDeleteAllItems.dvName), msg, new dictionary<string,string>);
		}
		DataViewGetFieldLookup unmatchedLookup;
		on all unmatched DataViewGetFieldLookup():unmatchedLookup {
			string msg := "Unknown DataView name in a DataViewGetFieldLookup event";
			log "unmatched DataViewGetFieldLookup() - "+msg at WARN;
			route DataViewException(unmatchedLookup.msgId, escapeDvName(unmatchedLookup.dvName), msg, new dictionary<string,string>);
		}
		
		log "onload() - complete." at DEBUG;
	}


	//===================================================================================

	
	// This defines the behaviour for each DataView bridge scenario type
	action initializeScenario {
		log "initializeScenario() - \""+dvName+"\" - entered (spawned with this action)." at DEBUG;
		updater.init(scenarioId, context.current());

		string SCENARIO_SERVICE_CHANNEL := "com.apama.scenario";
		Scenario scenario := new Scenario; // store the schema of the DataView

		// Build up the scenario definition event
		scenario.scenarioId := scenarioId;
		scenario.displayName := dvAddDefinition.dvDisplayName;
		scenario.description := dvAddDefinition.dvDescription;
		scenario.inputNames := [];
		scenario.inputTypes := [];
		scenario.inputConstraints := [];
		scenario.inputDefaults := [];
		scenario.outputNames := dvAddDefinition.fieldNames;
		scenario.outputTypes := dvAddDefinition.fieldTypes;
		scenario.executionMode := 0;
		scenario.extraParams := dvAddDefinition.extraParams;
		scenario.extraParams.add("isReadOnly", "true");
		NUM_FIELDS := scenario.outputTypes.size();
	
		// If we have dont have enough constraints then set default constraints for ALL inputs (ignore any we were given)
		// - no - don't need to do that - always ZERO INPUTS
		
		// If we have dont have enough default initial inputs set basic defaults for ALL inputs (ignore any we were given)
		// - no - don't need to do that - always ZERO INPUTS

		
		// Notify any client listeners when scenario loads
		route scenario;
		send scenario to SCENARIO_SERVICE_CHANNEL;
		route DataViewDefinition(dvAddDefinition.msgId, dvName, dvAddDefinition.dvDisplayName, dvAddDefinition.dvDescription, dvAddDefinition.fieldNames, dvAddDefinition.fieldTypes, dvAddDefinition.keyFields, new dictionary<string,string>);

		// Build the helper dictionaries
		initialiseFieldLookup(scenario, dvName);
		
		// Look for the request to delete this bridge type
		DataViewDeleteDefinition delDef;
		on DataViewDeleteDefinition(dvName = getUnescapedDvName(dvName)):delDef {
			//Remove this bridge type
			// the "on unload" listener will generate the response.
			log "initializeScenario().on_DataViewDeleteDefinition() - \""+dvName+"\" - routing DataViewDefinitionDeleted/ScenarioUnloaded events..." at INFO;
			route DataViewDefinitionDeleted(delDef.msgId, dvName, new dictionary<string,string>);
			route ScenarioUnloaded(scenarioId);
			log "initializeScenario().on_DataViewDeleteDefinition() - \""+dvName+"\" - Killing the mthread for this DataView." at INFO;
			die;
		}

		// RequestInstances handling (dumps current state of all instances by sending Instance events)
		RequestInstancesInternal scenRequestInstances;
		on all RequestInstancesInternal(scenarioId = scenarioId): scenRequestInstances {
			log "initializeScenario().on_all_RequestInstances() - \""+scenarioId+"\" - received request for instances. Initiating recovery on for request messageId: "+scenRequestInstances.messageId.toString() at DEBUG;
			
			integer k;
			_Item item;
			for k in instancesDictionary.keys() {
				item := instancesDictionary[k];

				log "dvItemMThread().on_all_RequestInstances() - \""+scenarioId+":"+k.toString()+"\" - routing an Instance event for this DataView Item..." at DEBUG;

				if(scenRequestInstances.ownerFilter = false or 
				   scenRequestInstances.owner = item.owner or 
				   item.owner = "*") then {
					updater.emitInstance(scenRequestInstances, item.scenarioInstanceId, item.owner, "RUNNING", new sequence<string>, item.outputFields);
				}
			}
			route RequestInstancesDone(scenarioId, scenRequestInstances.messageId);
		}
		
		// Look for the scenario recovery event and send out the definition of this Scenario/DataView. (remember we have spawned per Scenario)
		on all StartScenarioRecovery() {
			route scenario;
		}

		
		
		
		// ========= Listeners for Create/Delete/Edit/Update ==================
		
		
		// ####################################################################
		// ####################################################################	
		// CREATE
		// First if an instance is created via the scenario API (e.g. a dashboard)...
		Create scenCreate;
		on all Create(scenarioId = scenarioId): scenCreate {
			log "initializeScenario().on_all_Create() - \""+scenarioId+"\" - Scenario instance create ignored - DataViewService does not handle incoming CREATE events from the ScenarioService." at WARN;
			emitNack(scenCreate.messageId, -1);
			return;
		}
		// ... secondly if it is created from the MonitorScript side of things
		DataViewAddItem dvAddItem;
		on all DataViewAddItem(dvName = getUnescapedDvName(dvName)): dvAddItem {
			log "initializeScenario().on_all_DataViewAddItem() - \""+dvName+"\" - " at DEBUG;
			addDataViewItem(dvAddItem);
		}
		
		
		// #########################################################
		// #########################################################
		// DELETE
		// From Scenario API - Ignore/Nack
		Delete scenDelete;
		on all Delete(scenarioId=scenarioId):scenDelete {
			log "initializeScenario().on_all_Delete() - \""+scenarioId+":"+scenDelete.scenarioInstanceId.toString()+"\" - Scenario instance delete ignored - DataViewService does not handle incoming DELETE events from the ScenarioService." at WARN;
			emitNack(scenDelete.messageId, scenDelete.scenarioInstanceId);
			return;
		}
		// From DataViewService API
		DataViewDeleteItem dvDeleteItem;
		on all DataViewDeleteItem(dvName=getUnescapedDvName(dvName)):dvDeleteItem {
			log "initializeScenario().on_all_DataViewDeleteItem() - \""+dvName+":"+dvDeleteItem.dvItemId.toString()+"\" - " at DEBUG;
			deleteDataViewItem(dvDeleteItem);
		}
		// From DataViewService API
		DataViewDeleteAllItems dvDeleteAllItems;
		on all DataViewDeleteAllItems(dvName=getUnescapedDvName(dvName)):dvDeleteAllItems {
			log "initializeScenario().on_all_DataViewDeleteAllItems() - \""+dvName+"\" - " at DEBUG;
			deleteAllDataViewItems(dvDeleteAllItems);
		}
		
		
		// #########################################################
		// #########################################################
		// EDIT
		// From Scenario API - Ignore/Nack
		Edit scenEdit;
		on all Edit(scenarioId = scenarioId):scenEdit {
			log "initializeScenario().on_all_Edit() - \""+scenarioId+":"+scenEdit.scenarioInstanceId.toString()+"\" - Scenario instance edit ignored - DataViewService does not handle incoming EDIT events from the ScenarioService." at WARN;
			emitNack(scenEdit.messageId, scenEdit.scenarioInstanceId);
			return;
		}		

		
		// #########################################################
		// #########################################################
		// ADD OR UPDATE (full)
		// Forward the AddOrUpdates from the Monitor via this DataViewService to the Scenario API
		DataViewAddOrUpdateItem dvAddOrUpdateItem;
		on all DataViewAddOrUpdateItem(dvName = getUnescapedDvName(dvName)):dvAddOrUpdateItem {
			addOrUpdateDataViewItem(dvAddOrUpdateItem);
		}

		// #########################################################
		// #########################################################
		// UPDATE (full)
		// Forward the Updates from the Monitor via this DataViewService to the Scenario API
		DataViewUpdateItem dvUpdateItem;
		on all DataViewUpdateItem(dvName = getUnescapedDvName(dvName)):dvUpdateItem {
			updateFullDataViewItem(dvUpdateItem);
		}

		// #########################################################
		// #########################################################
		// UPDATE (delta) - an update containing only deltas
		// Forward the Updates from the Monitor via this DataViewService to the Scenario API
		DataViewUpdateItemDelta dvUpdateItemDelta;
		on all DataViewUpdateItemDelta(dvName = getUnescapedDvName(dvName)):dvUpdateItemDelta {
			updateDeltaDataViewItem(dvUpdateItemDelta);
		}
		
		// ####################################################################
		// ####################################################################
		log "initializeScenario() - \""+dvName+"\" - complete." at DEBUG;
	}
	
	
	//===================================================================================

	
	// Management Actions

	/** Build the fieldname-index lookup dictionary, and add a the DataViewGetFieldLookup listener. */
	action initialiseFieldLookup(Scenario theScenario, string dataViewName) {
		log "initialiseFieldLookup() - building the dictionary, and adding a the DataViewGetFieldLookup listener" at DEBUG;
		string s;
		integer count := 0;
		dictionary <string, integer> fieldLookupDictionary := new dictionary<string, integer>; // fieldName : index in sequence
		for s in theScenario.outputNames {
			fieldLookupDictionary.add(s, count);
			count := count + 1;
		}		


		// Look for requests for the helper lookup dictionaries and reply
		DataViewGetFieldLookup lookupReq;
		on all DataViewGetFieldLookup(dvName = getUnescapedDvName(dataViewName)):lookupReq {
			log "initialiseFieldLookup().on_all_DataViewGetFieldLookup() - \""+dataViewName+"\" - routing DataViewFieldLookup event..." at DEBUG;
			route DataViewFieldLookup(lookupReq.msgId, dataViewName, fieldLookupDictionary, new dictionary<string,string>);
		}		
	}
	

	action generateInstanceDied(_Item item) {
		// this should only ever be called once, from deleteDataViewItem() or deleteAllDataViewItems(), so we no longer need a flag to says its been called.
		log "generateInstanceDied() - \""+scenarioId+":"+item.scenarioInstanceId.toString()+"\" - routing Died events." at DEBUG;
		updater.emitInstanceDied(item.scenarioInstanceId, item.owner);
	}
	
	
	//===================================================================================

	
	// Management Actions
	action onunload {
		route DataViewServiceUnloaded( new dictionary<string,string> );
		log "DataViewService implementation unloaded." at INFO;
	}
	
	
	//===================================================================================

	/* Build the compound key from a COMPLETE sequence of values (i.e. not just the keyFields).
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromSeq(sequence<string> fieldValues) returns string {
		string key := "#";
		integer keyIndex;
		integer i:=0;
		if not (fieldValues.size() = NUM_FIELDS) then {
			log "buildCompoundKeyfromSeq() - the given sequence of fields is the wrong size. Required: "+NUM_FIELDS.toString()+", Found: "+fieldValues.size().toString() at WARN;
			return "";
		}
		for keyIndex in compoundKeyIndexes {
			if (fieldValues.size() <= keyIndex) then {
				log "buildCompoundKeyfromSeq() - the given sequence of fields does not contain a required keyField: "+compoundKeyNames[i]+", index: "+keyIndex.toString() at WARN;
				return "";
			}
			key := key + fieldValues[keyIndex]; 
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}

	/* Build the compound key from a sequence of keyField values ONLY (i.e. just the keyFields).
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromKeySeq(sequence<string> keyFieldValues) returns string {
		string key := "#";
		string keyValue;
		integer i:=0;
		if not (keyFieldValues.size() = compoundKeyIndexes.size()) then {
			log "buildCompoundKeyfromKeySeq() - the given sequence of keyFields is the wrong size. Required: "+compoundKeyIndexes.size().toString()+", Found: "+keyFieldValues.size().toString() at WARN;
			return "";
		}
		for keyValue in keyFieldValues {
			key := key + keyValue; 
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}

	/* Build the compound key from a dictionary of fieldNAME<->fieldvalue. 
	 * The dictionary does not need to contain a complete set of fields, but must contain at least the keyFields.
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromDict(dictionary<string,string> fields) returns string {
		string key := "#"; // all keys will have this prefix
		string keyName;
		integer i:=0;
		for keyName in compoundKeyNames {
			if not (fields.hasKey(keyName)) then {
				log "buildCompoundKeyfromDict() - the given dictionary does not contain a required keyField: "+keyName at WARN;
				return "";
			}
			key := key + fields[keyName];
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}

	/* Build the compound key from a dictionary of fieldINDEX<->fieldvalue. 
	 * The dictionary does not need to contain a complete set of fields, but must contain at least the keyFields.
	 * The key will ALWAYS be > "".  "" indicates an error.
	 * For a single-field (non-compound) key, whose value is "", just return the prefix.
	*/
	action buildCompoundKeyFromIndexDict(dictionary<integer,string> fields) returns string {
		string key := "#"; // all keys will have this prefix
		integer keyIndex;
		integer i:=0;
		for keyIndex in compoundKeyIndexes {
			if not (fields.hasKey(keyIndex)) then {
				log "buildCompoundKeyfromIndexDict() - the given dictionary does not contain a required keyField: "+compoundKeyNames[i]+", index: "+keyIndex.toString() at WARN;
				return "";
			}
			key := key + fields[keyIndex];
			i:=i+1;
			if (compoundKeyIndexes.size() > i) then {
				key := key +":";
			}
		}
		return key;
	}
	
	
	/** Add a new DataViewItem to the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewAddItem.
	 * 
	 * @exception Routes a DataViewException event if the new Item cannot be added.
	 */
	action addDataViewItem(DataViewAddItem dvAddItem) {
		log "addDataViewItem() - \""+dvName+"\" - entered." at DEBUG;
		
		if (dvAddItem.fieldValues.size() != NUM_FIELDS) then {
			string msg := "DataView addItem ignored - " + NUM_FIELDS.toString() + " output field(s) required but " + dvAddItem.fieldValues.size().toString() + " provided.";
			
			// dvName is escaped already
			log "addDataViewItem() - \""+dvName+"\" - " + msg at WARN;
			route DataViewException(dvAddItem.msgId, dvName, msg, new dictionary<string,string>);
			return;
		}

		_Item newItem := createDefaultItem();
		newItem.owner := dvAddItem.owner;
		newItem.outputFields := dvAddItem.fieldValues;
		
		// are we using the automatic compound key feature? If so we must generate the key and store it in a dictionary
		if (compoundKeyIndexes.size()>0) then {
			// build the key
			string compoundKey := buildCompoundKeyFromSeq(newItem.outputFields);
			
			// dvName is escaped already
			log "addDataViewItem() - \""+dvName+"\" - compoundKey is: "+compoundKey at DEBUG;
			
			// do we already have an item with that key?
			if (compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// reject the new item - duplicate key
				string msg := "DataView addItem ignored - the DataView uses the keyFields feature and the new item clashes with an existing item.  The supplied values were: "+dvAddItem.fieldValues.toString();
				log "addDataViewItem() - \""+dvName+"\" - " + msg at WARN;
				route DataViewException(dvAddItem.msgId, dvName, msg, new dictionary<string,string>);
				return;
			}
			
			// add the new key to the dictionary to map it to the scenarioInstanceId(=dvItemId)
			compoundKeyInstanceDictionary.add(compoundKey, scenarioInstanceId);
		}
		
		//copy then increment the main instanceId counter
		newItem.scenarioInstanceId := scenarioInstanceId;
		scenarioInstanceId := scenarioInstanceId + 1;

		// store the newly created Item
		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - storing Item..." at INFO;
		instancesDictionary.add(newItem.scenarioInstanceId, newItem);
	
		// Send Created/Added events to both the Scenario and DataViewService APIs
		// This ensures that the Application MonitorScript and the Components such as Dashboards see the new instance
		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing Created/Added events..." at DEBUG;
		updater.emitCreated(-1, newItem.scenarioInstanceId, newItem.owner, "RUNNING", new sequence<string>, newItem.outputFields);
		
		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing initial Update event for this Item..." at DEBUG;
		float timeStamp := dvAddItem.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(newItem.scenarioInstanceId, timeStamp, newItem.outputFields, newItem.owner);
		
		route DataViewItem(dvAddItem.msgId, dvName, newItem.scenarioInstanceId, newItem.owner, newItem.outputFields, new dictionary<string,string>);

		log "addDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - complete." at DEBUG;
	}
	
	
	/* Add a new DataViewItem to the current (spawned) DataView if it does not already exist, 
	 * or update it when it does exist. This will ONLY work when keyFields are used.
	 * Attempts to change the owner of an existing item will be rejected with a DataViewItemException.
	 *
	 * This action is called as a result of matching a DataViewAddOrUpdateItem.
	 * 
	 * @exception Routes a DataViewException event if the new Item cannot be added.
	 * @exception Routes a DataViewItemException event if the new Item attempts to change the owner of an existing item.
	 */
	action addOrUpdateDataViewItem(DataViewAddOrUpdateItem dvAddOrUpdateItem) {
		log "addOrUpdateDataViewItem() - \""+dvName+"\" - entered." at DEBUG;
		
		if (0=compoundKeyIndexes.size()) then { 
			// this DataView does not use keyFields - error - The DataViewAddOrUpdateItem event is only valid for DataViews which use keyFields
			string msg := "DataViewAddOrUpdateItem event is only valid for DataViews which use keyFields";
			log "addOrUpdateDataViewItem() - \""+dvName+"\" - routing DataViewException event - "+msg at WARN;
			route DataViewException(dvAddOrUpdateItem.msgId, dvName, msg, new dictionary<string,string>);
			return;
		}

		if (dvAddOrUpdateItem.fieldValues.size() != NUM_FIELDS) then {
			string msg := "DataView addOrUpdateItem ignored - " + NUM_FIELDS.toString() + " output field(s) required but " + dvAddOrUpdateItem.fieldValues.size().toString() + " provided.";
			log "addOrUpdateDataViewItem() - \""+dvName+"\" - " + msg at WARN;
			route DataViewException(dvAddOrUpdateItem.msgId, dvName, msg, new dictionary<string,string>);
			return;
		}

		_Item newItem := createDefaultItem();
		newItem.owner := dvAddOrUpdateItem.owner;
		newItem.outputFields := dvAddOrUpdateItem.fieldValues;
		
		// build the key
	
		string compoundKey := buildCompoundKeyFromSeq(newItem.outputFields);
		log "addOrUpdateDataViewItem() - \""+dvName+"\" - compoundKey is: "+compoundKey at DEBUG;
		
		// do we already have an item with that key?
		boolean alreadyExists := compoundKeyInstanceDictionary.hasKey(compoundKey);
		if (alreadyExists) then {
			// Yes we found the key - so we're going to get the existing item and update it (after a couple of checks)
			integer itemId := compoundKeyInstanceDictionary[compoundKey];
			newItem.scenarioInstanceId := itemId; // copy the ID for use when we send out the update
			log "addOrUpdateDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
			
			// Get the existing item
			_Item item := instancesDictionary[itemId];
			
			// Check the owner is not changed
			if (item.owner != newItem.owner) then {
				// reject the new item - attempted to change OWNER
				string msg := "DataView addOrUpdateItem ignored - detected attempt to change the owner of an existing item.  Current owner: \""+item.owner+"\", attempted owner: \""+newItem.owner+"\"";
				log "addOrUpdateDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - " + msg at WARN;
				route DataViewItemException(dvAddOrUpdateItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			
			// Now we can make the change to the actual stored values
			item.outputFields := newItem.outputFields;
		}
		else {
			// No didn't find the key, so it must be new - add the new key to the dictionary to map it to the scenarioInstanceId(=dvItemId)
			compoundKeyInstanceDictionary.add(compoundKey, scenarioInstanceId);
			
			//copy then increment the main instanceId counter
			newItem.scenarioInstanceId := scenarioInstanceId;
			scenarioInstanceId := scenarioInstanceId + 1;

			// store the newly created Item
			log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - storing Item..." at INFO;
			instancesDictionary.add(newItem.scenarioInstanceId, newItem);
		
			// Send Created/Added events to both the Scenario and DataViewService APIs
			// This ensures that the Application MonitorScript and the Components such as Dashboards see the new instance
			log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing Created/Added events..." at DEBUG;
			updater.emitCreated(-1, newItem.scenarioInstanceId, newItem.owner, "RUNNING", new sequence<string>, newItem.outputFields);
		}

		// In either case (add or update), we now need to route the Update event
		log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - routing an Update event with the following field values:"+newItem.outputFields.toString() at DEBUG;
		float timeStamp := dvAddOrUpdateItem.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(newItem.scenarioInstanceId, timeStamp, newItem.outputFields, newItem.owner);
		
		if (not alreadyExists) then {
		
			route DataViewItem(dvAddOrUpdateItem.msgId, dvName, newItem.scenarioInstanceId, newItem.owner, newItem.outputFields, new dictionary<string,string>);
		}

		// All done
		log "addOrUpdateDataViewItem() - \""+dvName+":"+newItem.scenarioInstanceId.toString()+"\" - complete." at DEBUG;
	}


	/** Delete an existing DataViewItem from the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewDeleteItem.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be deleted (not found, etc).
	 */
	action deleteDataViewItem(DataViewDeleteItem dvDeleteItem) {
		integer itemId := dvDeleteItem.dvItemId;
		string compoundKey;
		if (0<=itemId) then { // an itemId was supplied
			if (not instancesDictionary.hasKey(itemId)) then {
				string msg := "Unknown dvItemId: "+itemId.toString();
				log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
		}
		else { // no itemId supplied
			if (0=compoundKeyIndexes.size()) then { 
				// this DataView does not use keyFields - error - must supply a dvItemId
				string msg := "A valid dvItemId must be supplied (this DataView does not use keyFields)";
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			if (dvDeleteItem.keyFields.size() != compoundKeyIndexes.size()) then {
				// invalid number of keys supplied
				string msg := "Incorrect number of key fields supplied. Found "+dvDeleteItem.keyFields.size().toString()+", require "+compoundKeyIndexes.size().toString();
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}

			// build the key
			compoundKey := buildCompoundKeyFromKeySeq(dvDeleteItem.keyFields);
			if (0=compoundKey.length()) then {
				// we get an error back from buildCompoundKey - most likely the key fields were not supplied
				string msg := "Invalid set of key fields supplied: "+dvDeleteItem.keyFields.toString();
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;								
			}
			
			
			// all valid - get the itemId from the dictionary
			if (not compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// we built a valid key, but no dvItem is currently known with that key
				string msg := "No DataViewItem could be found for the keyFields supplied: "+dvDeleteItem.keyFields.toString();
				log "deleteDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvDeleteItem.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			itemId := compoundKeyInstanceDictionary[compoundKey];
			log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
			
			// remove that compound key
			compoundKeyInstanceDictionary.remove(compoundKey);
		}
		_Item item := instancesDictionary[itemId];

		// Tell everyone about Deletion
		generateInstanceDied(item);
		log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing Deleted events..." at DEBUG;
		updater.emitDeleted(-1, itemId, item.owner);
		if (dvDeleteItem.keyFields.size() != compoundKeyIndexes.size()) then {
			// deleted using dvItemId, but this DataView is using keyFields, so we need to build the key to pass out in the Deleted event
			integer i := 0;
			while i < compoundKeyIndexes.size() {
				dvDeleteItem.keyFields.append( item.outputFields[compoundKeyIndexes[i]] );
				i := i + 1;
			}
		}
		route DataViewItemDeleted(dvDeleteItem.msgId, dvName, itemId, dvDeleteItem.keyFields, new dictionary<string,string>);
		log "deleteDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - removing Item..." at INFO;
		instancesDictionary.remove(itemId);
		
		//log "deleteDataViewItem() - instancesDictionary content after removal: "+instancesDictionary.toString() at DEBUG;
	}


	
	/** Delete all existing DataViewItems from the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewDeleteAllItems.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be deleted (not found, etc).
	 */
	action deleteAllDataViewItems(DataViewDeleteAllItems dvDeleteAllItems) {
		
		// Iterate all the items an delete each one
		integer itemId;
		_Item item;
		for itemId in instancesDictionary.keys() {
			item := instancesDictionary[itemId];
			// Tell everyone about Deletion
			generateInstanceDied(item);
			log "deleteAllDataViewItems() - \""+dvName+":"+itemId.toString()+"\" - routing Deleted events..." at DEBUG;
			updater.emitDeleted(-1, itemId, item.owner);
		}
		
		// Clear the dictionaries
		log "deleteAllDataViewItems() - \""+dvName+"\" - removing ALL Items..." at INFO;
		compoundKeyInstanceDictionary.clear();
		instancesDictionary.clear();

		route DataViewAllItemsDeleted(dvDeleteAllItems.msgId, dvName, new dictionary<string,string>);
		
		//log "deleteAllDataViewItems() - instancesDictionary content after removal: "+instancesDictionary.toString() at DEBUG;
	}


	/** Update ALL the field values of an existing DataViewItem in the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewUpdateItem.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be updated (not found, keyField clash, etc).
	 */
	action updateFullDataViewItem(DataViewUpdateItem dvupdate) {
		integer itemId := dvupdate.dvItemId;
		
		// first check the number of fields (this is required before some of the other checks)
		if (dvupdate.fieldValues.size()!= NUM_FIELDS) then {
			string msg := "DataView updateItem ignored - " + NUM_FIELDS.toString() + " output field(s) required but " + dvupdate.fieldValues.size().toString() + " provided.";
			log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - " + msg at WARN;
			route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
			return;
		}

		string compoundKey := "";
		if (0>itemId) then { // no itemId supplied
			if (0=compoundKeyIndexes.size()) then { 
				// this DataView does not use keyFields - error - must supply a dvItemId
				string msg := "A valid dvItemId must be supplied (this DataView does not use keyFields)";
				log "updateFullDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			// build the key
			compoundKey := buildCompoundKeyFromSeq(dvupdate.fieldValues);
			log "updateFullDataViewItem() - \""+dvName+"\" - compoundKey: "+compoundKey at DEBUG;
			if (0=compoundKey.length()) then {
				// we get an error back from buildCompoundKey - most likely the key fields were not supplied?
				string msg := "Unable to construct compound key from field values: "+dvupdate.fieldValues.toString();
				log "updateFullDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;								
			}
			
			// all valid - get the itemId from the dictionary
			if (not compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// we built a valid key, but no dvItem is currently known with that key
				string msg := "No DataViewItem could be found using the keyFields from the field values supplied: "+dvupdate.fieldValues.toString();
				log "updateFullDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			itemId := compoundKeyInstanceDictionary[compoundKey];
			log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
		}
		
		// check if we have an Item with the (supplied or calculated) itemId
		if (not instancesDictionary.hasKey(itemId)) then {
			string msg := "Unknown dvItemId: "+itemId.toString();
			log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
			route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);
			return;
		}
				
		_Item item := instancesDictionary[itemId];
		
		// IMPORTANT
		// check we have not altered a keyField value if this DataView is configured for their use!!
		if (0<compoundKeyIndexes.size()) then {
			string existingCompoundKey := buildCompoundKeyFromSeq(item.outputFields);
			if (0=compoundKey.length()) then {
				compoundKey := buildCompoundKeyFromSeq(dvupdate.fieldValues);
			}
			if not (compoundKey=existingCompoundKey) then {
				string msg := "DataView updateItem ignored - It is not permitted to change the value of a keyField. The supplied values were: "+dvupdate.fieldValues.toString();
				log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvupdate.msgId, dvName, itemId, msg, new dictionary<string,string>);

				log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - existing compoundKey: \""+existingCompoundKey+"\", new compoundKey: \""+compoundKey+"\"" at DEBUG;
				
				return;				
			}
		}

		// Now we can make the change to the actual stored values
		integer i:=0;
		while(i<NUM_FIELDS) {
			item.outputFields[i] := dvupdate.fieldValues[i].clone();
			i:=i+1;
		}

		log "updateFullDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing an Update event with the following field values:"+item.outputFields.toString() at DEBUG;
		float timeStamp := dvupdate.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(item.scenarioInstanceId, timeStamp, item.outputFields, item.owner);
	}
	
	
	/** Update a SUBSET of the field values of an existing DataViewItem in the current (spawned) DataView.
	 * This action is called as a result of matching a DataViewUpdateItemDelta.
	 * 
	 * @exception Routes a DataViewItemException event if the Item cannot be updated (not found, keyField clash, etc).
	 */
	action updateDeltaDataViewItem(DataViewUpdateItemDelta dvdelta) {

		integer numberOfUpdatedFields := dvdelta.fieldValues.size() - compoundKeyIndexes.size();
		if (numberOfUpdatedFields=0) or (dvdelta.fieldValues.size()=0) then {
			// empty delta
			log "updateDeltaDataViewItem() - \""+dvName+":"+dvdelta.dvItemId.toString()+"\" - empty delta - ignored. Delta field values: "+dvdelta.fieldValues.toString() at DEBUG;
			//route DataViewItemException(dvName, dvdelta.dvItemId, "Empty delta - ignored. Delta field values: "+dvdelta.fieldValues.toString(), new dictionary<string,string>);
			return;
		}
		
		integer itemId := dvdelta.dvItemId;
		string compoundKey := "";
		
		if (0>itemId) then { // no itemId supplied
			if (0=compoundKeyIndexes.size()) then { 
				// this DataView does not use keyFields - error - must supply a dvItemId
				string msg := "A valid dvItemId must be supplied (this DataView does not use keyFields)";
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			if (numberOfUpdatedFields<0) then {
				// not enough dictionary items provided - must be at least the number of keyFields+1
				string msg := "Not enough delta field values provided. Must be at least number of keyFields +1 (="+ (compoundKeyIndexes.size()+1).toString() +"). Supplied delta field values: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;				
			}
			// build the key
			compoundKey := buildCompoundKeyFromIndexDict(dvdelta.fieldValues);
			log "updateDeltaDataViewItem() - \""+dvName+"\" - compoundKey: "+compoundKey at DEBUG;
			
			if (0=compoundKey.length()) then {
				// we get an error back from buildCompoundKey - most likely the key fields were not supplied?
				string msg := "Unable to construct compound key from delta field values: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;								
			}
			
			// all valid - get the itemId from the dictionary
			if (not compoundKeyInstanceDictionary.hasKey(compoundKey)) then {
				// we built a valid key, but no dvItem is currently known with that key
				string msg := "No DataViewItem could be found for the keyFields supplied: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			itemId := compoundKeyInstanceDictionary[compoundKey];
			log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - found dvItemId for keyFields" at DEBUG;
		}

		// check if we have an Item with the (supplied or calculated) itemId
		if (not instancesDictionary.hasKey(itemId)) then {
			string msg := "Unknown dvItemId: "+itemId.toString();
			log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
			route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
			return;
		}
		
		//log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - content of delta: "+dvdelta.fieldValues.toString() at DEBUG;
		_Item item := instancesDictionary[itemId];
		integer k;
		sequence<string> tmpFields := item.outputFields.clone(); // take a copy of the current values
		for k in dvdelta.fieldValues.keys() {
			if (k<0 or k>=NUM_FIELDS) then {
				string msg := "DataView updateItemDelta ignored - Invalid field index provided ("+k.toString()+") in the delta field values: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+"\" - " + msg at WARN;					
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);
				return;
			}
			// no need to check for duplicate indexs, as we're getting them out of a dictionary - by definition there can't be duplicate keys!

			tmpFields[k] := dvdelta.fieldValues[k]; // overwrite a specific value with a new value
		}
		
		// IMPORTANT
		// check we have not altered a keyField value if this DataView is configured for their use!!
		if (0<compoundKeyIndexes.size()) then {
			string existingCompoundKey := buildCompoundKeyFromSeq(item.outputFields);
			if (0=compoundKey.length()) then {
				compoundKey := buildCompoundKeyFromSeq(tmpFields);
			}
			if not (compoundKey=existingCompoundKey) then {
				string msg := "DataView updateItemDelta ignored - It is not permitted to change the value of a keyField. The supplied values were: "+dvdelta.fieldValues.toString();
				log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing DataViewItemException event - "+msg at WARN;
				route DataViewItemException(dvdelta.msgId, dvName, itemId, msg, new dictionary<string,string>);

				log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - existing compoundKey: \""+existingCompoundKey+"\", new compoundKey: \""+compoundKey+"\"" at DEBUG;

				return;				
			}
		}

		// Now we can make the change to the actual stored values
		item.outputFields := tmpFields; // replace with the new updated set
		
		log "updateDeltaDataViewItem() - \""+dvName+":"+itemId.toString()+"\" - routing an Update event with the following field values: "+item.outputFields.toString() at DEBUG;
		float timeStamp := dvdelta.timeStamp;
		if (-1.0=timeStamp) then {
			timeStamp:=currentTime;
		}
		updater.emitUpdate_time(item.scenarioInstanceId, timeStamp, item.outputFields, item.owner);
	}

	
	//===================================================================================

	
	
	// The ACKs and NACKs for the Scenario API and the Scenario Bridge API.	
	action emitAcknowledgement(integer messageId, _Item item) {
		updater.emitAcknowledgement(messageId, item.scenarioInstanceId, item.outputFields);
	}

	action emitNack(integer messageId, integer scenarioInstanceId) {
		updater.emitNack(messageId, scenarioInstanceId);
	}

}
 0000003e C:\SoftwareAG\Apama 5.3\monitors\DataViewService_Impl_Dict.mon
TIME 0000000e 1444709904.7,1
MONF 0000c703 /*
 * $Copyright (c) 2012 Progress Software Corporation and/or its subsidiaries and affiliates. All rights reserved.$ 
 * $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
 *
 * Event definitions for the Correlator-integrated Apama JMS adapter. 
 *
 * $Revision: 241128 $
 *
 */
package com.apama.correlator.jms;


// *****************************************************************************
// 
// Private event definitions - for internal use only. 
//

/** @private*/ event __AddSender
{
	string connectionId;
	string senderId;
	string senderReliability;
	dictionary<string,string> extraAddParams;
}

/** @private*/ event __RemoveSender
{
	string senderId;
}

/** @private*/ event __AddReceiver
{
	string connectionId;
	string receiverId;
	string destination;
	string receiverReliability;
	string durableTopicSubscriptionName;
	string messageSelector;
	boolean noLocal;
	dictionary<string,string> extraAddParams;
}

/** @private*/ event __RemoveReceiver
{
	string receiverId;
}

/** @private*/ event __JMSReceiverFlowControlWindowUpdate
{
	string receiverId;
	integer __processInstanceToken;
	integer __flowControlMarker;
	integer __flowControlWindow;
}

/** @private*/ event __ReceiverAcknowledgeAndResume
{
	string receiverId;
}

/** @private*/ event __JMSSenderFlush
{
	integer requestId;
	string channelName;
}

// *****************************************************************************
// 
// Public event API for dynamically adding/removing JMS senders and receivers
//
// To be notified about the successful addition or removal of senders and 
// receivers, applications should listen for the separate Sender/ReceiverStatus 
// events, looking for the OK or REMOVED status. 
//

/** An enumeration containing constants for the currently supported sender 
	reliability values.
*/
event JMSSenderReliability
{
	/** Best effort non-reliable messaging; events may be lost or duplicated 
		if a component fails. */
	constant string BEST_EFFORT := "BEST_EFFORT";
	/** Reliable messaging without duplicate detection. 
	
		Events may be  duplicated or reordered if a component fails, but will 
		not be lost. */
	constant string AT_LEAST_ONCE := "AT_LEAST_ONCE";
	/** Reliable messaging with duplicate detection identifiers. 
	
		Events may be reordered if a component fails, but will not be lost, 
		and will not be duplicated if the unique message ids are mapped into 
		the message and the receiving JMS client uses an appropriate duplicate 
		detection window. */
	constant string EXACTLY_ONCE := "EXACTLY_ONCE";
}

/** An enumeration containing constants for the message delivery modes for sender.
*/
event JMSMessageDeliveryMode
{
	/** Use PERSISTENT message delivery mode for sending messages to the broker.
	
		Reliable senders always use PERSISTENT message delivery mode.
	*/
	constant string PERSISTENT := "PERSISTENT";
	
	/** Use NON_PERSISTENT message delivery mode for sending messages to the broker.
	
		This is the default for BEST_EFFORT senders.
	*/
	constant string NON_PERSISTENT := "NON_PERSISTENT";
}

/** An event object representing an existing JMS sender. 
 *
 * A JMS sender has an associated channel to which Apama events can be "sent", 
 * which will then be mapped to JMS messages using the requested message 
 * reliability setting and delivered to a destination on the JMS message bus. 
 */
event JMSSender
{
	// Public
	
	/** Returns the unique identifier of this sender. */
	action getSenderId() returns string { return __senderId; }
	
	/** Returns the Correlator channel to use for events that should 
	 * be delivered to JMS using this sender. 
	 *
	 * Note that if this senderId does not exist or has been removed then 
	 * events sent to this channel will be lost without a warning. 
	 */
	action getChannel() returns string { return __channel; }
	
	/** Requests removal of this JMS sender. The removal will be performed 
	 * asynchronously, and completes after all events already sent by this 
	 * context have been passed to JMS, and the associated JMS producer and 
	 * session have been closed. 
	 *
	 * EPL applications may listen for the REMOVED JMSSenderStatus event to 
	 * detect when the removal has completed. 
	 *
	 * If the connection is currently down there could be an unbounded delay 
	 * in completing the removal of the sender. The application should not 
	 * send any more events to the sender channel once this action has been 
	 * called. 
	 *
	 * It is an error to attempt to remove a JMS sender that does not exist, or 
	 * to attempt to remove a static JMS sender. Such errors will result in 
	 * the termination of the current EPL monitor instance. 
	 * 
	 * @see JMSSenderStatus#REMOVED
	 */
	action remove()
	{
		__plugin.processControlEvent(__RemoveSender(__senderId).toString());
	}

	/** Returns the number of events that have been send to this sender's 
	 * channel from the application, but are still queued waiting to be sent to 
	 * JMS.
	 *
	 * This allows an EPL application to throttle or reduce the rate at which 
	 * it sends events based on the size of the backlog building up in the 
	 * Correlator's queues, to ensure that the Correlator does not run out of 
	 * memory due to a temporary peak in throughput rate or loss of the JMS 
	 * connection. 
	 *
	 * Calling this action is a slightly expensive operation, so it is best to 
	 * get the number of outstanding events once, then loop sending a batch of 
	 * events. Therefore do not call getOutstandingEvents inside a loop that is 
	 * continually sending events to JMS. 
	 *
	 * You must not call this method after calling remove().
	 */
	action getOutstandingEvents() returns integer
	{
		return __plugin.getOutstandingMessages(__senderId);
	}
	
	/** Requests a notification event after flushing all messages 
	 * already sent to the sender's channel by the current context. 
	 *
	 * A JMSSenderFlushed event will be sent to this context when all the 
	 * messages already sent to the sender channel have been processed 
	 * and passed to the JMS broker (or dropped, in the case of 
	 * non-recoverable mapping errors). 
	 *
	 * This feature is only applicable to BEST_EFFORT senders, as for 
	 * AT_LEAST_ONCE/EXACTLY_ONCE senders reliability is already taken care of 
	 * by the integration with Correlator state persistence. It is an error 
	 * to call this action from a persistent monitor. 
	 * 
	 * Applications may have multiple flush requests in flight at any one time. 
	 * Performance will be improved by sending multiple messages (e.g. 1000) 
	 * between each flush request.
	 *
	 * @returns The unique request id for flush request, which will be included 
	 * in the resulting JMSSenderFlushed event.
	 *
	 * @see JMSSenderFlushed Notification event sent in response to 
	 */
	action requestFlush() returns integer
	{
		__plugin.checkNonPersistentMonitor("requestFlush");
		integer requestId := integer.getUnique();
		string privateChannel := "com.apama.jms.backchannel." + context.current().getId().toString();
		monitor.subscribe(privateChannel);
		send __JMSSenderFlush(requestId, privateChannel) to self.getChannel();
		return requestId;
	}
	
	// Private
	
	/** @private*/ string __senderId;
	/** @private*/ string __channel;
	/** @private*/ import "JMSPlugin" as __plugin;

}

/** An event object representing the configuration of a new JMS sender, for 
 * dynamically adding JMS senders at runtime. 
 *
 * Call JMSConnection.createSenderConfiguration() to create an instance, and 
 * then use the setter actions to specify each required configuration option. 
 * Each setter method returns this configuration instance to make it possible 
 * to chain calls and specify all required options in a single statement. 
 *
 * @see JMSConnection#createSenderConfiguration() Creates a new 
 *	JMSSenderConfiguration event object. 
 * @see JMSConnection#addSenderWithConfiguration() Uses a JMSSenderConfiguration 
 *	to add a new JMS sender. 
 */
event JMSSenderConfiguration
{
	/** The unique identifier of this sender. */
	action getSenderId() returns string
	{ return __senderId; }

	/** The identifier of the connection this sender belongs to. */
	action getConnectionId() returns string
	{ return __connectionId; }
	
	/** Specifies the reliability mode to use for messages from this sender. 
	 * @param value Must be one of the enumeration constants from the 
	 * JMSSenderReliability event, or "" to indicate that the connection's 
	 * defaultSenderReliability should be used. 
	 * @see JMSSenderReliability
	 */
	action setSenderReliability(string value) returns JMSSenderConfiguration
	{ __senderReliability := value; return self; }
	/** Specifies the reliability mode to use for messages from this sender. */
	action getSenderReliability() returns string
	{ return __senderReliability; }
	
	/** Specifies the message delivery mode to use for messages from this sender.
	 *
	 * This can be used only for non-reliable BEST_EFFORT senders.
	 * It is ignored for reliable senders which always use PERSISTENT message 
	 * delivery mode.
	 *
	 * @param value Must be one of the enumeration constants from the 
	 * JMSMessageDeliveryMode event, or "" to indicate that the default mode will be used
	 * @see JMSMessageDeliveryMode
	 */
	action setMessageDeliveryMode(string value) returns JMSSenderConfiguration
	{ __messageDeliveryMode := value; return self; }
	/** Specifies the message delivery mode to use for messages from this sender. */
	action getMessageDeliveryMode() returns string
	{ return __messageDeliveryMode; }
	
	// Private fields
	
	/** @private*/ string __connectionId;
	/** @private*/ string __senderId;
	/** @private*/ string __senderReliability;
	/** @private*/ string __messageDeliveryMode;
	
	/** Initializes this object with required parameters 
	 * @private*/ 
	action __init(string connectionId, string senderId) 
	{
		self.__connectionId := connectionId;
		self.__senderId := senderId;
	}
	
	/** @private*/ 
	action __getAddSender() returns __AddSender
	{
		return __AddSender(
			getConnectionId(), 
			getSenderId(), 
			getSenderReliability(),
			{"MessageDeliveryMode":getMessageDeliveryMode()}
			);
	}
}

/** A notification event sent to an EPL application in response to a sender 
 * flush request.
 * 
 * The application context will receive this event after all the messages 
 * already sent by the application at the time of the flush request have been 
 * processed and passed to the JMS broker (or dropped, in the case of 
 * non-recoverable mapping errors). 
 *
 * This event will be sent to the context that requested message flushing.
 *
 * @see JMSSender#requestFlush()
 */
event JMSSenderFlushed
{
	/** The unique request id returned by the flush request.*/
	integer requestId;
	/** The identifier of sender. */
	string senderId;
}

/** An enumeration containing constants for the currently supported receiver 
	reliability values.
*/
event JMSReceiverReliability
{
	/** Best effort non-reliable messaging; events may be lost or duplicated 
		if a component fails. */
	constant string BEST_EFFORT := "BEST_EFFORT";
	/** Reliable messaging without duplicate detection; events may be 
		duplicated or reordered if a component fails, but will not be lost. */
	constant string AT_LEAST_ONCE := "AT_LEAST_ONCE";
	/** Reliable messaging with duplicate detection; events may be 
		reordered if a component fails, but will not be lost, and will not be 
		duplicated provided the unique message ids and duplicate detection 
		window are configured correctly. */
	constant string EXACTLY_ONCE := "EXACTLY_ONCE";
	/** Reliable messaging with acknowledgements controlled by the application.
	*/
	constant string APP_CONTROLLED := "APP_CONTROLLED";
}

/** An event object representing an existing JMS receiver. 
 *
 * A receiver listeners for messages on a specific JMS queue or topic, maps 
 * them to Apama events and sends them to the Correlator's public contexts. 
 */
event JMSReceiver
{
	// Public
	
	/** Returns the unique identifier of this receiver. */
	action getReceiverId() returns string { return __receiverId; }
	
	
	/** Requests removal of this JMS receiver. 
	 *
	 * The removal will be performed asynchronously, and completes after all 
	 * events already received from this JMS destination have been enqueued to 
	 * the Correlator, any persisted uniqueMessageIds no longer required for 
	 * duplicate detection have been deleted, any durable topic subscription 
	 * has been removed from the JMS broker, and the associated JMS consumer 
	 * and session have been closed. 
	 *
	 * EPL applications may listen for the REMOVED JMSReceiverStatus event to 
	 * detect when the removal has completed. 
	 *
	 * If the connection is currently down there could be an unbounded delay 
	 * in completing the removal of the receiver. 
	 *
	 * It is an error to attempt to remove a JMS receiver that does not exist, 
	 * or to attempt to remove a static JMS receiver. Such errors will result 
	 * in the termination of the current EPL monitor instance. 
	 * 
	 * @see JMSReceiverStatus#REMOVED
	 */
	action remove()
	{
		__plugin.processControlEvent(__RemoveReceiver(__receiverId).toString());
	}
	
	
	/** Signals that the application is ready for messages received 
	 * since the last appControlledAcknowledgeAndResume() call to be 
	 * acknowledged to JMS, and that message receiving can then resume. 
	 *
	 * This is used only by receivers which are running in APP_CONTROLLED 
	 * reliability mode. APP_CONTROLLED receivers should listen for the 
	 * JMSAppControlledReceivingSuspended event enqueued at the end of each 
	 * batch of incoming messages and respond by calling 
	 * appControlledAcknowledgeAndResume() once the messages or the output 
	 * events/state changes resulting from processing them have been reliably 
	 * stored in another system (e.g. sent and flushed to a downstream JMS 
	 * destination, or committed to a database or distributed MemoryStore). 
	 *
	 * To avoid race conditions, it is important to call this method only from 
	 * the context that is handling both the JMS messages from this receiver 
	 * and the JMSAppControlledReceivingSuspended event. 
	 * 
	 * Never call this method except in response to a 
	 * JMSAppControlledReceivingSuspended event, and do not call it from 
	 * a persistent monitor - both will result in an exception.
	 *
	 * @see JMSAppControlledReceivingSuspended
	 */
	action appControlledAcknowledgeAndResume() {
		__plugin.processControlEvent(__ReceiverAcknowledgeAndResume(__receiverId).toString());
	}
	
	// Private
	
	/** @private*/ string __receiverId;
	/** @private*/ import "JMSPlugin" as __plugin;

}

/** A notification event sent to an EPL application every time an APP_CONTROLLED 
 * receiver suspends, at the end of each message batch. 
 *
 * The application should respond by taking whatever action is required to 
 * ensure that the messages received since the last suspend 
 * or the output events/state changes resulting from processing them 
 * have been reliably stored in another system (e.g. sent and flushed to 
 * a downstream JMS destination, or committed to a database or distributed MemoryStore). 
 *
 * Once these operations have completed the application should call 
 * JMSReceiver.appControlledAcknowledgeAndResume() to signal that the message 
 * batch can be acknowledged to JMS (i.e. no longer needs to be retained for 
 * possible resending in the event of crash) and that receiving can resume. 
 *
 * This event will be sent to the same context(s) that are handling the 
 * messages from this receiver. 
 * The event will be sent at the end of every message 'batch' 
 * (see "maxBatchSize" in the documentation for more details). 
 * @see JMSReceiver#appControlledAcknowledgeAndResume()
 */
event JMSAppControlledReceivingSuspended
{
	/** The unique identifier of the suspended receiver. */
	string receiverId;
}


/** An event object representing the configuration of a new JMS receiver, for 
 * dynamically adding JMS receivers at runtime. 
 *
 * Call JMSConnection.createReceiverConfiguration() to create an instance, and 
 * then use the setter actions to specify each required configuration option. 
 * Each setter method returns this configuration instance to make it possible 
 * to chain calls and specify all required options in a single statement. 
 *
 * @see JMSConnection#createReceiverConfiguration() Creates a new 
 *	JMSReceiverConfiguration event object. 
 * @see JMSConnection#addReceiverWithConfiguration() Uses a 
 *	JMSReceiverConfiguration to add a new JMS receiver. 
 */
event JMSReceiverConfiguration
{
	/** The unique identifier of this receiver. */
	action getReceiverId() returns string
	{ return __receiverId; }

	/** The identifier of the connection this receiver belongs to. */
	action getConnectionId() returns string
	{ return __connectionId; }
	
	/** The queue or topic this receiver will listen to. */
	action getDestination() returns string
	{ return __destination; }
	
	/** Specifies the reliability mode to use for receiving messages. 
	 * @param value Must be one of the enumeration constants from the 
	 *	JMSReceiverReliability event, or "" to indicate that the connection's 
	 *	defaultReceiverReliability should be used. 
	 * @see JMSReceiverReliability
	 */
	action setReceiverReliability(string value) returns JMSReceiverConfiguration
	{ __receiverReliability := value; return self; }
	/** Specifies the reliability mode to use for receiving messages. */
	action getReceiverReliability() returns string
	{ return __receiverReliability; }
	
	/** Specifies the unique identifier for the subscription if a durable topic 
	 * subscription is to be created.
	 * @param value A unique JMS subscription name if a durable topic 
	 *	subscription should be created, or "" if a non-durable topic 
	 *	subscription should be made. Only valid for topics, and only if the 
	 *	reliability is not BEST_EFFORT.
	 */
	action setDurableTopicSubscriptionName(string value) returns JMSReceiverConfiguration
	{ __durableTopicSubscriptionName := value; return self; }
	/** Specifies the unique identifier for the subscription if a durable topic 
	 * subscription is to be created. */
	action getDurableTopicSubscriptionName() returns string
	{ return __durableTopicSubscriptionName; }

	/** Specifies the JMS message selector query string to select a subset of 
	 * queue/topic messages to be processed by this receiver. 
	 * @param value A message selector string, or "" to receive all messages. 
	 * See the JMS documentation for the javax.jms.Message interface for more 
	 * details. 
	 */
	action setMessageSelector(string value) returns JMSReceiverConfiguration
	{ __messageSelector := value; return self; }
	/** Specifies the JMS message selector query string to select a subset of 
	 * queue/topic messages to be processed by this receiver. */
	action getMessageSelector() returns string
	{ return __messageSelector; }

	/** Specifies an application-defined identifier to override how receivers 
	 * are grouped together for duplicate-detection purposes when using 
	 * EXACTLY_ONCE reliability. 
	 * @param value An arbitrary (but preferably short) string defined by the 
	 *	EPL application. All EXACTLY_ONCE receivers with this string will be 
	 *	grouped together to form a single duplicate detection domain. 
	 *
	 *	This is an advanced feature - by default, receivers are grouped into 
	 *	a duplicate detection domain together with other receivers in the 
	 *	same connectionId listening to the same destination, which is the 
	 *	correct setting in the majority of cases. 
	 */
	action setDupDetectionDomainId(string value) returns JMSReceiverConfiguration
	{ __dupDetectionDomainId := value; return self; }
	/** Specifies an application-defined identifier to override how receivers 
	 * are grouped together for duplicate-detection purposes when using 
	 * EXACTLY_ONCE reliability. */
	action getDupDetectionDomainId() returns string
	{ return __dupDetectionDomainId; }

	/** Specifies that messages sent to this destination by our own connection 
	 * should be ignored by the receiver. 
	 * @param value May be set to true or false for topic destinations. If 
	 *	the destination is a queue, the behaviour of noLocal=true is not 
	 *	specified, and will not work with many providers. The default value of 
	 *	false is usually fine. 
	 */
	action setNoLocal(boolean value) returns JMSReceiverConfiguration
	{ __noLocal := value; return self; }
	/** Specifies that messages sent to this destination by our own connection 
	 * should be ignored by the receiver. */
	action getNoLocal() returns boolean
	{ return __noLocal; }
	
	// Private fields
	
	/** @private*/ string __connectionId;
	/** @private*/ string __receiverId;
	/** @private*/ string __destination;
	/** @private*/ string __receiverReliability;
	/** @private*/ string __durableTopicSubscriptionName;
	/** @private*/ string __messageSelector;
	/** @private*/ string __dupDetectionDomainId;
	/** @private*/ boolean __noLocal;
	
	
	/** Initializes this object with required parameters 
	 * @private*/ 
	action __init(string connectionId, string receiverId, string destination) 
	{
		self.__connectionId := connectionId;
		self.__receiverId := receiverId;
		self.__destination := destination;
	}
	/** Initializes this object with required parameters 
	 * @private*/ 
	action __getAddReceiver() returns __AddReceiver
	{
		__AddReceiver result := new __AddReceiver;
		result.connectionId := getConnectionId();
		result.receiverId := getReceiverId();
		result.destination := getDestination();
		result.receiverReliability := getReceiverReliability();
		result.durableTopicSubscriptionName := getDurableTopicSubscriptionName();
		result.messageSelector := getMessageSelector();
		result.noLocal := getNoLocal();
		if getDupDetectionDomainId() != "" then { result.extraAddParams["dupDetectionDomainId"] := getDupDetectionDomainId(); }
		
		return result;
	}
}

/** An event object representing a JMS connection, with actions for 
 * manipulating a connection's existing senders and receivers, and also for 
 * dynamically adding senders and receivers at runtime. 
 *
 * Senders and receivers may be added dynamically either using the 
 * comprehensive JMSConnection.addReceiver/SenderWithConfiguration() actions 
 * which provide access to all configuration parameters, or one of the 
 * other addReceiver/Sender*() actions that simplify creation of 
 * senders/receivers using the more common configuration parameter sets. 
 *
 * @see JMS#getConnection() Use this method to get a JMSConnection
 */
event JMSConnection
{
	// Public
	
	/** The unique identifier of this connection. */
	action getConnectionId() returns string 
	{
		return __connectionId;
	}

	/** Get a JMSReceiver event object representing a receiver that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid receiverId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing receiver then 
	 * operations on the returned JMSReceiver (such as remove()) will cause an 
	 * error. 
	 */
	action getReceiver(string receiverId) returns JMSReceiver { return JMSReceiver(receiverId); }
	
	/** Get a JMSSender event object representing a sender that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid senderId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing sender then 
	 * operations on the returned JMSSender (such as remove()) will cause an 
	 * error. 
	 */
	action getSender(string senderId) returns JMSSender { return JMSSender(senderId, "jms:"+senderId); }

	/** Get a JMSSender event object representing the default sender for this 
	 * connection (which exists automatically if no other static senders 
	 * were explicitly configured). 
	 */
	action getDefaultSender() returns JMSSender { return getSender(__connectionId+"-default-sender"); }

	
	/** Requests the addition of a new dynamic JMS sender, with the specified 
	 * reliability setting. 
	 *
	 * EPL applications may listen for the JMSSenderStatus event to be notified 
	 * when the new sender has been added, and when it has reached the 
	 * "OK" state. Events can be sent to the sender's channel as soon as 
	 * this action returns. 
	 *
	 * A unique senderId will be generated automatically. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param senderReliability An enumeration value from JMSSenderReliability 
	 * indicating the reliability setting to use for sending events. 
	 * Alternatively, specify an empty string "" to use the connection's 
	 * defaultSenderReliability. 
	 *
	 * @return A JMSSender instance which can be used to get the senderId for 
	 * status monitoring, the channel to send events to, and an action for 
	 * removing the sender when it is no longer required. 
	 * @see JMSSenderReliability
	 */
	action addSender(string senderReliability) returns JMSSender
	{
		return addSenderWithConfiguration(createSenderConfiguration(__makeUniqueId("sender", senderReliability))
			.setSenderReliability(senderReliability));
	}
	
	
	/** Requests the addition of a new dynamic JMS sender, with the specified 
	 * sender configuration. 
	 *
	 * EPL applications may listen for the JMSSenderStatus event to be notified 
	 * when the new sender has been added, and when it has reached the 
	 * "OK" state. Note that no events will actually be sent into the 
	 * Correlator until JMS.onApplicationInitialized() has been called. 
 	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param config An event representing the configuration of the new sender, 
	 * constructed using JMSConnection.createSenderConfiguration and the 
	 * setter methods on JMSSenderConfiguration.
	 *
	 * @return A JMSSender instance which can be used to get the senderId for 
	 * status monitoring, the channel to send events to, and an action for 
	 * removing the sender when it is no longer required. 
	 *
	 * @see JMSConnection#createSenderConfiguration()
	 */
	action addSenderWithConfiguration(JMSSenderConfiguration config) returns JMSSender
	{
		__plugin.processControlEvent(config.__getAddSender().toString());
		return getSender(config.getSenderId());
	}
	
	/** Create a JMSSenderConfiguration for this connection that can be 
	 * used to add a new sender with the specified settings. 
	 *
	 * @param senderId An application-defined unique identifier for this 
	 * sender, used to track status and removal. The senderId must not be an 
	 * empty string or contain the colon ":" character - if it does, the 
	 * monitor will terminate with an error when trying to create the sender.
	 *
	 * Applications are encouraged to use <tt>integer.getUnique().toString()</tt> 
	 * or a similar generator of unique numbers for all or part of the senderId. 
	 *
	 * @see JMSConnection#addSenderWithConfiguration()
	 */
	action createSenderConfiguration(string senderId) returns JMSSenderConfiguration
	{
		JMSSenderConfiguration result := new JMSSenderConfiguration;
		result.__init(__connectionId, senderId);
		return result;
	}

	/** Requests the addition of a new dynamic JMS receiver, with the specified 
	 * queue/topic name and reliability setting. 
	 *
	 * EPL applications may listen for the JMSReceiverStatus event to be 
	 * notified when the new receiver has been added, and when it has reached 
	 * the "OK" state. 
	 *
	 * A unique receiverId will be generated automatically. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param destination A JMS queue name, JMS topic name, or JNDI name, 
	 *	prefixed by <tt>"queue:"</tt>, <tt>"topic:"</tt> or <tt>"jndi:"</tt>.
	 
	 * @param receiverReliability An enumeration value from 
	 *	JMSReceiverReliability indicating the reliability setting to use. 
	 *	Alternatively, specify an empty string "" to use the connection's 
	 *	defaultReceiverReliability. 
	 *
	 * @return A JMSReceiver instance which can be used to get the receiverId 
	 *	for status monitoring, and an action for removing the receiver when it 
	 *	is no longer required. 
	 * @see JMSReceiverReliability
	 */
	action addReceiver(string destination, string receiverReliability) returns JMSReceiver
	{
		return addReceiverWithConfiguration(
			createReceiverConfiguration(__makeUniqueId("receiver", destination), destination)
			.setReceiverReliability(receiverReliability));
	}

	/** Requests the addition of a new dynamic JMS durable topic subscription. 
	 *
	 * EPL applications may listen for the JMSReceiverStatus event to be 
	 * notified when the new receiver has been added, and when it has reached 
	 * the "OK" state. 
	 *
	 * This durable topic subscription will remain on the JMS broker until this 
	 * dynamic receiver is removed using JMSReceiver.remove(). 
	 *
	 * A unique receiverId will be generated automatically. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param destination A JMS topic name, or JNDI name, 
	 *	prefixed by <tt>"topic:"</tt> or <tt>"jndi:"</tt>.
	 *
	 * @param receiverReliability An enumeration value from 
	 *	JMSReceiverReliability indicating the reliability setting to use.
	 
	 *	For a durable topic subscription, this must not be BEST_EFFORT.  
	 *	Specify an empty string "" to use the connection's 
	 *	defaultReceiverReliability. 
	 *
	 * @param durableTopicSubscriptionName The unique identifier used by the 
	 *	JMS broker for for this durable topic subscription. 
	 *
	 *	Must not be "", and must not match any other subscription name with the 
	 *	same connection clientID. 
	 *
	 * @param messageSelector An optional JMS message selector query string to 
	 *	select a subset of topic messages to be processed by this receiver, or 
	 *	"" to receive all messages. 
	 *
	 *	See the JMS documentation for the javax.jms.Message interface for more 
	 *	details. 

	 * @return A JMSReceiver instance which can be used to get the receiverId 
	 *	for status monitoring, and an action for removing the receiver when it 
	 *	is no longer required. 
	 * @see JMSReceiverReliability
	 * @see JMSReceiver#remove()
	 */
	action addReceiverWithDurableTopicSubscription(string destination, string receiverReliability, 
		string durableTopicSubscriptionName, string messageSelector) returns JMSReceiver
	{
		return addReceiverWithConfiguration(
			createReceiverConfiguration(__makeUniqueId("durable-subscriber", durableTopicSubscriptionName), destination)
			.setReceiverReliability(receiverReliability)
			.setMessageSelector(messageSelector)
			.setDurableTopicSubscriptionName(durableTopicSubscriptionName)
			);
	}

	/** Requests the addition of a new dynamic JMS receiver, with the specified 
	 * receiver configuration. 
	 *
	 * EPL applications may listen for the JMSReceiverStatus event to be 
	 * notified when the new receiver has been added, and when it has reached 
	 * the "OK" state. 
	 *
	 * The monitor instance will usually be terminated with an ERROR if invalid 
	 * arguments are provided. 
	 *
	 * @param config An event representing the configuration of the new 
	 * receiver, constructed using JMSConnection.createReceiverConfiguration 
	 * and the setter methods on JMSReceiverConfiguration.
	 *
	 * @return A JMSReceiver instance which can be used to get the receiverId 
	 * for status monitoring, and an action for removing the receiver when it 
	 * is no longer required. 
	 *
	 * @see JMSConnection#createReceiverConfiguration()
	 */
	action addReceiverWithConfiguration(JMSReceiverConfiguration config) returns JMSReceiver
	{
		__plugin.processControlEvent(config.__getAddReceiver().toString());
		return getReceiver(config.getReceiverId());
	}
	
	/** Create a JMSReceiverConfiguration for this connection that can be 
	 * used to add a new receiver with the specified settings. 
	 *
	 * @param receiverId An application-defined unique identifier for this 
	 * receiver, used to track status and removal. The receiverId must not be an 
	 * empty string or contain the colon ":" character - if it does, the 
	 * monitor will terminate with an error when trying to create the receiver.
	 *
	 * Applications are encouraged to use <tt>integer.getUnique().toString()</tt> 
	 * or a similar generator of unique numbers for all or part of the receiverId. 
	 *
	 * @param destination A JMS queue name, JMS topic name, or JNDI name, 
	 * prefixed by <tt>"queue:"</tt>, <tt>"topic:"</tt> or <tt>"jndi:"</tt>.
	 *
	 * @see JMSConnection#addReceiverWithConfiguration()
	 */
	action createReceiverConfiguration(string receiverId, string destination) returns JMSReceiverConfiguration
	{
		JMSReceiverConfiguration result := new JMSReceiverConfiguration;
		result.__init(__connectionId, receiverId, destination);
		return result;
	}
	
	// Private
	
	/** @private*/ string __connectionId;
	/** @private*/ import "JMSPlugin" as __plugin;
	
	/** @private*/ 
	action __makeUniqueId(string requiredSuffix, string optionalSuffix) returns string {
		string result := __connectionId+"-"+requiredSuffix;
		if optionalSuffix != "" then {
			result := result+"-"+optionalSuffix;
		}
		result := result.replaceAll(":","-"); // ensure it's a valid identifier
		return result + "-" + integer.getUnique().toString();
	}
	
}

/** The top-level event object representing the Correlator-integrated JMS 
 * runtime.
 */
event JMS
{
	// Public
	
	/** Should be called by EPL applications after all EPL has been injected 
	 * and initialized, to indicate that the application is ready to receive 
	 * events from the JMS runtime, such as received JMS messages and 
	 * status notification events. 
	 *
	 * Invoking this action more than once will have no effect. 
	 *
	 */
	action onApplicationInitialized() 
	{
		__plugin.onApplicationInitialized();
	}
	
	/** Get a JMSConnection event object representing a connection defined  
	 * in the XML configuration file. 
	 */
	action getConnection(string connectionId) returns JMSConnection
	{
		return JMSConnection(connectionId);
	}
	
	/** Get a JMSReceiver event object representing a receiver that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid receiverId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing receiver then 
	 * operations on the returned JMSReceiver (such as remove()) will cause an 
	 * error. 
	 */
	action getReceiver(string receiverId) returns JMSReceiver { return (new JMSConnection).getReceiver(receiverId); }
	
	/** Get a JMSSender event object representing a sender that already 
	 * exists, which might have been added dynamically, or defined statically 
	 * in the XML configuration file. 
	 *
	 * It is the caller's responsibility to specify a valid senderId - the  
	 * specified identifier is not be validated as part of this action call. 
	 * If the identifier does not represent an existing sender then 
	 * operations on the returned JMSSender (such as remove()) will cause an 
	 * error. 
	 */
	action getSender(string senderId) returns JMSSender { return (new JMSConnection).getSender(senderId); }
	
	// Private
	
	/** @private*/ import "JMSPlugin" as __plugin;
}


//*****************************************************************************
//
// Status events
//

/** 
 * A notification event sent to an EPL application when a configured JMS 
 * connection encounters an error or changes state. 
 *
 * This event includes string constants for each supported status. 
 *
 * Note that all notification events will be held back until 
 * JMS.onApplicationInitialized() has been called. 
 */
event JMSConnectionStatus
{
	/** The unique identifier of the JMS connection. 
	*/
	string connectionId;

	/** An enumeration value specifying the status of the connection. The 
	 * values in the enumeration are provided as constants in this event. 
	 *
	 * If the status is OK then the connection is up. 
	 */
	string status;
	
	/** A user-readable string specifying the cause of the error. This should 
		always be a non-empty string when the status is "ERROR". */
	string errorMessage;
	
	/** Additional status information items. None are currently supported. */
	dictionary<string,string> extraStatusInfo;
	
	// enumeration constants for status field value:
	
	/** The status value indicating that the Correlator-JMS runtime is fully 
		connected to the JMS broker with a valid JMS Connection object. */
	constant string OK := "OK";
	
	/** The status value indicating that the Correlator-JMS runtime is trying
		to establish an initial connection.  */
	constant string CONNECTING := "CONNECTING";

	/** The status value indicating that the connection is not available due to 
		some non-fatal error condition; the Correlator-JMS runtime will keep 
		retrying in the background. */
	constant string ERROR := "ERROR";
}

/** 
 * A notification event sent to an EPL application when a configured JMS 
 * sender has been created successfully, encounters an error, or is removed. 
 *
 * This event includes string constants for each supported status, and 
 * fields specifying information about the configuration of this sender
 * (as specified when it was created). 
 *
 * Note that all notification events will be held back until 
 * JMS.onApplicationInitialized() has been called. 
 *
 * JMSSenderStatus events are sent for both static senders in the 
 * configuration file (or the implicitly defined default sender), and 
 * dynamic senders created with JMSConnection.addSender.
 */
event JMSSenderStatus
{
	/** The unique identifier of the JMS connection. 
	*/
	string connectionId;

	/** The unique identifier of this sender. 
	*/
	string senderId;

	/** An enumeration value specifying the status of the sender. The values
	 * in the enumeration are provided as constants in this event. 
	 *
	 * If the status is OK then the sender is functioning correctly; if it 
	 * is REMOVED then removal of the sender has completed.  
	 */
	string status;
	
	/** A user-readable string specifying the cause of the error. This is 
	 * guaranteed not empty if status="ERROR" or "FATAL_ERROR". */
	string errorMessage;
	
	/** Additional status information items. None are currently supported. */
	dictionary<string,string> extraStatusInfo;
	
	// enumeration constants for status field value:
	
	/** The status value indicating that the sender is fully connected to the 
		JMS broker with a valid JMS Producer object, and is available to send 
		messages. */
	constant string OK := "OK";
	
	/** The status value indicating that the sender is waiting for the 
		JMS connection or sender session to be established. */
	constant string CONNECTING := "CONNECTING";
	/** The status value indicating that the sender is not available due to 
		some non-fatal error condition; the Correlator-JMS runtime will keep 
		retrying in the background. */
	constant string ERROR := "ERROR";
	
	/** The status value indicating that the sender is not available due to 
		a fatal error condition. 
		
		Senders in this state are no longer useful and should be removed by the 
		EPL application (if dynamic) or the system administrator (if statically 
		defined in the XML config file). Note that the removal of such failed 
		senders does not happen automatically. */
	constant string FATAL_ERROR := "FATAL_ERROR";
	/** The status value indicating that the removal of a dynamic sender has 
		been completed, which will be sent some time after a sender removal 
		request, once all the associated state on the broker and the 
		Correlator's database has been removed. 
		
		In rare cases it's possible that a status event for a sender may be 
		sent after the REMOVED status; any such event should be ignored.  */
	constant string REMOVED := "REMOVED";
	
	// fields specifying the sender's configuration:

	/** Sender quality of service, specifying the reliability mode of the 
		messages from this sender. 
		
		One of the enumeration constants from the JMSSenderReliability event. */
	string senderReliability;

	/** Additional sender configuration parameters specified when it was added. 
	*/
	dictionary<string,string> extraAddParams;

}

/** 
 * A notification event sent to an EPL application when a configured JMS 
 * receiver has been created successfully, encounters an error, or is removed. 
 *
 * This event includes string constants for each supported status, and 
 * fields specifying information about the configuration of this receiver
 * (as specified when it was created). 
 *
 * Note that the ordering of JMSReceiverStatus events relative to received 
 * messages is not defined. Also note that notification events will be held 
 * back until JMS.onApplicationInitialized() has been called. 
 *
 * JMSReceiverStatus events are sent for both static receivers in the 
 * configuration file, and dynamic receivers created with 
 * JMSConnection.addReceiver.
 */
event JMSReceiverStatus
{
	/** The unique identifier of the JMS connection.  */
	string connectionId;
	
	/** The unique identifier of this receiver. */
	string receiverId;

	/** An enumeration value specifying the status of the receiver. The values
	 * in the enumeration are provided as constants in this event. 
	 *
	 * If the status is OK then the receiver is functioning correctly; if it 
	 * is REMOVED then removal of the receiver has completed.  
	 */
	string status;
	
	/** A user-readable string specifying the cause of the error. This is 
	 * guaranteed not empty if status="ERROR" or "FATAL_ERROR". */
	string errorMessage;

	// enumeration constants for status field value:
	
	/** The status value indicating that the receiver is fully connected to the 
		JMS broker with a valid JMS Consumer object, and is available to receive 
		messages. */
	constant string OK := "OK";
	
	/** The status value indicating that the receiver is waiting for the 
		JMS connection or receiver session to be established. */
	constant string CONNECTING := "CONNECTING";
	/** The status value indicating that the receiver is not available due to 
		some non-fatal error condition; the Correlator-JMS runtime will keep 
		retrying in the background. */
	constant string ERROR := "ERROR";

	/** The status value indicating the  receiver could not be found because of 
		a problem accessing the specified destination (i.e. a JMS or JNDI 
		error). */
	constant string DESTINATION_NOT_FOUND := "DESTINATION_NOT_FOUND"; 	

	/** The status value indicating that the receiver is not available due to 
		a fatal error condition. 
		
		Receivers in this state are no longer useful and should be removed by 
		the EPL application (if dynamic) or the system administrator (if 
		statically defined in the XML config file). The removal of such failed 
		receivers does not happen automatically. 
	*/
	constant string FATAL_ERROR := "FATAL_ERROR";

	/** The status value indicating that the removal of a dynamic receiver has 
		been completed, which will be sent some time after a receiver removal 
		request, once all the associated state on the broker and the 
		Correlator's database has been removed. 
		
		In rare cases it's possible that a status event for a receiver may be 
		sent after the REMOVED status; any such event should be ignored.  */
	constant string REMOVED := "REMOVED";
	
	/** Additional status information items. None are currently supported. */
	dictionary<string,string> extraStatusInfo;

	// fields specifying the receiver's configuration:
	
	/** A JMS queue name, JMS topic name, or JNDI name, prefixed by 
		<tt>"queue:"</tt>, <tt>"topic:"</tt> or <tt>"jndi:"</tt>. */
	string destination;
	/** Receiver quality of service, specifying the reliability mode used 
		for receiving messages. 
		
		One of the enumeration constants from the JMSReceiverReliability event*/
	string receiverReliability;
	/** A unique JMS subscription name if a durable topic subscription should 
		be created, or "" if a non-durable topic subscription should be made. */
	string durableTopicSubscriptionName;
	/** JMS message selector string, to specify a subset of messages from the 
		destination to be processed by this receiver. 
	*/
	string messageSelector;
	/** Specifies that messages sent to this destination by our own connection 
		should be ignored by the receiver. */
	boolean noLocal;
	/** Additional receiver configuration parameters. None currently supported. */
	dictionary<string,string> extraAddParams;
}

//*****************************************************************************
//
// Advanced control events
//


/** A control event periodically sent to an EPL application for each receiver 
 * with receiverFlowControl enabled, which the application uses to update 
 * the flow control window.
 *
 * This event is used as a baseline from which the EPL application specifies 
 * the size of the window of new events it is currently ready to receive, 
 * specified relative to the last event received before this marker. 
 *
 * The event is sent:
 * i) when a receiver with receiverFlowControl=true is first added 
 * (once onApplicationInitialized has been called), 
 * ii) during recovery (in a persistent correlator), and 
 * iii) also periodically as JMS messages are received and 
 * enqueued to the correlator (typically these events are sent as often as 
 * the configured maxBatchSize, e.g. at least once every 1000 events). 
 *
 * To correctly implement the receiver flow control protocol, applications must 
 * respond to this event by calling updateFlowControlWindow (see below) 
 * to indicate the maximum number of additional events that the JMS runtime 
 * should take from this receiver, using the point in the event stream at 
 * which this marker was received as the baseline. 
 *
 * Applications that wish to  use flow control to throttle message receiving 
 * based on the number of outstanding asynchronous operations from 
 * already-received messages (to put a finite bound on memory usage) should 
 * also cache the most recent JMSReceiverFlowControlMarker for each 
 * active JMSReceiver so that the flow control window can be updated 
 * (e.g. extended) as pending operations complete, since there is no guarantee 
 * another JMSReceiverFlowControlMarker event will be sent until the window 
 * is extended enough for more events to be received. 
 *
 * Note that the fields of this event (apart from receiverId) are intended as 
 * 'opaque' data for internal use only and should be ignored by customer code.
 *
 * @see JMSReceiverFlowControlMarker#updateFlowControlWindow() Set the flow 
 * control window for this receiver, relative to this marker. 
 */ 
event JMSReceiverFlowControlMarker
{
	/** The unique identifier of this receiver. */
	string receiverId;
	
	/** For internal use only, treat as opaque data. */ 
	integer __processInstanceToken;
	
	/** For internal use only, treat as opaque data. */ 
	integer __flowControlMarker;
	
	/**
	* Sets the current flow control window size for a given receiver, which 
	* indicates the number of extra Apama events that should be taken from JMS 
	* and passed to the application before blocking, relative to the last data 
	* event received before this marker. 
	*
	* @param windowSizeEvents The maximum number of new events that should be 
	* received from this JMS receiver and enqueued to the correlator, relative 
	* to the position in the event flow indicated by this marker. 
	* The window size may be a constant number (e.g. 10,000 events) for 
	* applications that immediately process received events to completion,
	* or it may have a number of 'pending' events subtracted from it to create 
	* a bound on on the number of events that may be received from the JMS 
	* broker but are not yet been fully processed by the application (e.g. if 
	* an asynchronous database operation must complete before the memory, data 
	* structures or event listeners associated with the event may be deleted).
	*
	* It is valid to supply a zero or negative number for this value, in which 
	* case the JMS runtime will attempt to pause receiving, and take no more 
	* messages from the JMS queue/topic until this action is called again 
	* with a positive window (though it is not possible to guarantee that the 
	* flow of events will stop immediately, since some events could already be 
	* queued up). To allow an unbounded number of events to be received, 
	* specify integer.MAX for windowSizeEvents.
	* 
	* It is important that the overall long-term maximum window size 
	* (i.e. the chosen constant upper bound, ignoring any currently pending 
	* operations) is greater than than the receiver's maxBatchSize 
	* (typically 1000). 
	*/
	action updateFlowControlWindow(integer windowSizeEvents)
	{
		// use 'UnlessDisabled' as this should be a no-op when JMS is disabled, to support replay log
		__plugin.processControlEventUnlessDisabled(__JMSReceiverFlowControlWindowUpdate(
			receiverId, __processInstanceToken, __flowControlMarker, windowSizeEvents).toString()
		);
	}
	
	/** @private*/ import "JMSPlugin" as __plugin;
}
 00000038 C:\SoftwareAG\Apama 5.3\monitors\CorrelatorJMSEvents.mon
MONF 00003097 //*****************************************************************************
// Title:       StatusSupport
// Description: Provides event definitions for generic status reporting from  
//              service monitors.
//
// Revision:    $Revision: 235381 $
//
// $Copyright(c) 2006-2007, 2008-2009, 2011-2012 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

package com.apama.statusreport;

/*
	The events defined in this file act as an API between applications
	or blocks and service monitors.  They provide functionality to 
	Subscribe to status messages.
	
	The aim of this API is to provide an abstraction over any adapter
	specific details - for example, some adapters may require an explicit 
	call to subscribe to such data, some may be sent it anyway.
	
	Any adapter specific information that the application needs to supply
	or be supplied can be passed in the extraParams dictionary - these 
	are free-form (though there are conventions on the keys, see below).
	
	The service monitor also needs to handle any session initiation that
	may be required.
	
	A Status event does not denote a change of state, merely what the current
	state is - in particular, one will be sent out after every 
	SubscribeStatus request.

	All operations and responses are keyed on serviceId (if non-blank), 
	object,	connection and subServiceID. Every event starts with these 4 
	fields.
	
*/


/**
 *	Sent to the SubscribeStatus chanenl to subscribe to status.
 *	
 */
event SubscribeStatus {
	constant string CHANNEL := "SubscribeStatus";
	/**
	 *	service ID to subscribe to - blank will target all services.
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"Market" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;
}

/**
 *	Sent to the service monitor to unsubscribe from status.
 *	
 */
event UnsubscribeStatus {	 
	constant string CHANNEL := "SubscribeStatus";
	/**
	 *	service ID to subscribe to - blank will target all services
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"Market" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;
}


/**
 *	Sent from the service monitor to the StatusReport channel to notify the application of status for a 
 *	subscribed item.
 *	
 */
event Status {	
	constant string CHANNEL := "StatusReport";
	/**
	 *	service ID to subscribe to - blank will target all services
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"MarketState" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;

	/**
	 *	status description.
	 *	A free-form text string giving a description of the status.
	 */
	string description;
	
	/**
	 *	A sequence of summary strings specifying information about the 
	 *	status of the specified object.  This will be a well recognized
	 *	sequence of words - for example, a financial market's
	 *	"MarketState" may be "Open", "Closed", "PreOpen", etc.  A Connection 
	 *	may be "Connected", "Disconnected", "Disconnected LoginFailed", 
	 *	"Disconnected TimedOut", etc. 
	 */
	sequence<string> summaries;

	/**
	 *	available.
	 *	True if the object is "available" - the exact meaning is adapter 
	 * 	specific; for example, connected, open for general orders, etc.
	 */
	 boolean available;
	 
	 /** 
	 *	extra parameters that do not map into any of the above.  Convention
	 *	is that keys are in TitleCase.  e.g. "Username", "CloseTime", etc.
	 */
	wildcard dictionary <string, string> extraParams;
}


event StatusError {
	constant string CHANNEL := "StatusReport";
	/**
	 *	service ID to subscribe to - blank will target all services
	 */
	string serviceID;
	
	/**
	 *	object to request status of - this may include:
	 *	"Connection" - whether connected or not
	 *	"MarketState" - a market may be "Open", "Closed", or other states
	 */
	string object;
	
	/**
	 *	subService ID to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string subServiceID;
	
	/**
	 *	connection to subscribe to.
	 *	Some services may expose several services.  The interpretation of
	 *	this string is adapter-specific.
	 */
	string connection;

	/**
	 *	status description.
	 *	A free-form text string giving a description of the status.
	 */
	string description;
	
	/**
	 *	Whether the subscription has been terminated.  Any subscribers will 
	 *	need to send a new SubscribeStatus request after this.
	 */
	boolean failed;
}
	
//*****************************************************************************
// Title:         ParallelStatusSupport
// Description:   ParallelStatusSupport description
// Dependencies:  None
// Author:        arrustem
//
//*****************************************************************************

/*
	Event definitions for block subject event wrappers;
	These are provided for backwards compatibility.  Monitors listening to status should instead subscribe to the "StatusReport" channel.
*/
event SubscribeStatusToContext {
	context instanceContext;
	SubscribeStatus subscribe;
}

event UnsubscribeStatusToContext {
	context instanceContext;
	UnsubscribeStatus unsubscribe;
}

monitor ParallelStatusSupport {
	/*	dictionary < [symbol] , sequence of contexts > eventRouter;
	 - eventRouter will keep track of all contexts that are listening to a particular symbol
	 - The same d.s. will be used for both, Status and StatusError
	   since they are added/removed precisely at the same time. 
	*/
	dictionary < SubscribeStatus , sequence<context> > eventRouter;
	
	/*	dictionary < [event key], dictionary < [contextId], [key ctr] > > statusToContextCtr;
	 - Keeps count of number of listeners for each symbol on each context
	*/
	dictionary < SubscribeStatus, dictionary < integer, integer > > statusToContextCtr;

	/*	dictionary < [symbol], listener > statusListeners;
	 - keeps track of the local listeners for Status
		dictionary < [symbol], listener > errorListeners;
	 - keeps track of the local listeners for StatusError
	*/
	dictionary < SubscribeStatus, listener > statusListeners;
	dictionary < SubscribeStatus, listener > errorListeners;
	
	action onload() {
		monitor.subscribe("StatusReport");
		// set up listeners for the wrapped events coming from subjects
		SubscribeStatusToContext subscribe;
		on all SubscribeStatusToContext():subscribe subscribeEventHandler(subscribe);
		
		UnsubscribeStatusToContext unsubscribe;
		on all UnsubscribeStatusToContext():unsubscribe unsubscribeEventHandler(unsubscribe);
	}
	
	action ondie() {
                // print out an error if statusToContextCtr is not empty
                if (statusToContextCtr.size() != 0) then {
                        log "ParallelStatusSupport is terminating but there may still be contexts subscribed to Status events" at ERROR;
                }
                else {
                        log "ParallelStatusSupport is terminating" at INFO;
                }
	}
	
	action onunload() {
		// not doing anything here since it is assumed that only one instance of this monitor is executing 
	}
	
	action subscribeEventHandler(SubscribeStatusToContext evt) {
		
		SubscribeStatus key := evt.subscribe;
		integer cId := evt.instanceContext.getId();
		
		// manage statusToContextCtr
		if not statusToContextCtr.hasKey(key) then {
			dictionary <integer, integer> entry := {cId:0};
			statusToContextCtr.add(key, entry);
		}
		else {
			if not statusToContextCtr[key].hasKey(cId) then {
				statusToContextCtr[key].add(cId, 0);
				
			}
		}
		statusToContextCtr[key][cId] := statusToContextCtr[key][cId] + 1;
		
		// manage eventRouter
		if not eventRouter.hasKey(key) then {
			sequence < context > entry := [];
			eventRouter.add(key, entry);
			addListener(key);
		}
		// look up context in the symbol
		if (eventRouter[key].indexOf(evt.instanceContext) = -1) then {
			eventRouter[key].append(evt.instanceContext);
		}

		route evt.subscribe;
	}

	action unsubscribeEventHandler(UnsubscribeStatusToContext evt) {
		
		// SubscribeStatus type for the "key" variable is only for the purposes of matching with the dictionary type 
		SubscribeStatus key := SubscribeStatus(evt.unsubscribe.serviceID, evt.unsubscribe.object, 
							   evt.unsubscribe.subServiceID, evt.unsubscribe.connection);
		
		integer cId := evt.instanceContext.getId();
		
		// manage statusToContextCtr
		if ((not statusToContextCtr.hasKey(key)) or 
			(not statusToContextCtr[key].hasKey(cId))) then {
			log "unsubscribeEventHandler: unexpected UnsubscribeStatusToContext received for (key=" + 
				key.toString() + ", contextId=" + cId.toString() + ")" at WARN;
		}
		else {
			statusToContextCtr[key][cId] := statusToContextCtr[key][cId] - 1;
			if (statusToContextCtr[key][cId] = 0) then {
				statusToContextCtr[key].remove(cId);
				integer i := eventRouter[key].indexOf(evt.instanceContext);
				if (i != -1) then {
					eventRouter[key].remove(i);
				}
			}
			if (statusToContextCtr[key].size() = 0) then {
				eventRouter.remove(key);
				removeListener(key);
			}
		}

		route evt.unsubscribe;
	}
	
	action addListener(SubscribeStatus evt) {
		listener dl, el;

		Status d;
		dl := on all Status(serviceID=evt.serviceID, object=evt.object, subServiceID=evt.subServiceID, connection=evt.connection):d {
			send d to eventRouter[evt];
		}
		if statusListeners.hasKey(evt) then {
			log "[action addListener] statusListeners already contains a listener for entry " + evt.toString() at WARN;
		}
		else {
			statusListeners.add(evt, dl);
		}
		
		StatusError e;
		el := on all StatusError(serviceID=evt.serviceID, object=evt.object, subServiceID=evt.subServiceID, connection=evt.connection):e {
			send e to eventRouter[evt];
		}
		if errorListeners.hasKey(evt) then {
			log "[action addListener] errorListeners already contains a listener for entry " + evt.toString() at WARN;
		}
		else {
			errorListeners.add(evt, el);
		}
	}
	
	action removeListener(SubscribeStatus evt) {

		if statusListeners.hasKey(evt) then {
			statusListeners[evt].quit();
			statusListeners.remove(evt);
		}
		else {
			log "[action removeListener] statusListeners does not contain a listener for entry " + evt.toString() at WARN;			
		}
		
		if errorListeners.hasKey(evt) then {
			errorListeners[evt].quit();
			errorListeners.remove(evt);
		}
		else {
			log "[action removeListener] errorListeners does not contain a listener for entry " + evt.toString() at WARN;			
		}
	}
}

 00000032 C:\SoftwareAG\Apama 5.3\monitors\StatusSupport.mon
TIME 0000000e 1444709904.8,1
MONF 0000348d /*
 * Apama Correlator-integrated JMS Status Manager service.
 *
 * Implements the StatusSupport event interface to allow an EPL application to 
 * monitor status information about the status of Correlator-Integrated JMS connections, 
 * senders and receivers.
 * 
 * $Copyright (c) 2012 Progress Software Corporation and/or its subsidiaries and affiliates. All rights reserved.$ 
 * $Copyright (c) 2013 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
 *
 */
package com.apama.correlator.jms;

using com.apama.correlator.jms.JMSConnectionStatus;
using com.apama.correlator.jms.JMSSenderStatus;
using com.apama.correlator.jms.JMSReceiverStatus;
using com.apama.statusreport.Status;
using com.apama.statusreport.StatusError;
using com.apama.statusreport.SubscribeStatus;
using com.apama.statusreport.UnsubscribeStatus;


/**
 * Provides a bridge between the JMS-specific status events and the generic 
 * StatusSupport API used by some Apama applications. 
 *
 * @see com.apama.statusreport.SubscribeStatus Generic StatusSupport 
 * status subscription request that an application may send to SubscribeStatus.CHANNEL.
 * @see com.apama.statusreport.Status Generic StatusSupport 
 * status information sent to the Status channel by this monitor for subscribed 
 * objects.
 */
monitor CorrelatorJMSStatusManager 
{
	dictionary<SubscribeStatus, integer> subs;

	dictionary<string, JMSConnectionStatusPublisher> csPubs;
	dictionary<string, JMSSenderStatusPublisher> ssPubs;
	dictionary<string, JMSReceiverStatusPublisher> rsPubs;

	action onload() 
	{
		// Set up listeners for client requests
		listenForSubscribeStatus();
		listenForUnsubscribeStatus();
	
		// Set up listeners for correlator-jms status events
		listenForNewJmsEntities();
	}

	action ondie()
	{
		//Can't distinguish between abnormal termination and shutdown,
		//so just log a message to indicate termination.
		log "CORRELATOR_JMS status manager has terminated." at INFO;
	}

	action listenForSubscribeStatus()
	{
		monitor.subscribe(SubscribeStatus.CHANNEL);
		SubscribeStatus newSub;
		on all SubscribeStatus("CORRELATOR_JMS", *, *, *):newSub
		{
			if isValidSubscription(newSub) then 
			{
				log "Received status subscription: " + newSub.toString() at INFO;

				if subs.hasKey(newSub) then { subs.add(newSub, subs[newSub] + 1); }
				else { subs.add(newSub, 1); }

				boolean atLeastOneAckSent := false;
				
				JMSConnectionStatusPublisher csPub;
				for csPub in csPubs.values()
				{
					atLeastOneAckSent := csPub.ackMatchingNewSub(newSub) or atLeastOneAckSent;
				}

				JMSSenderStatusPublisher ssPub;
				for ssPub in ssPubs.values()
				{
					atLeastOneAckSent := ssPub.ackMatchingNewSub(newSub) or atLeastOneAckSent;
				}

				JMSReceiverStatusPublisher rsPub;
				for rsPub in rsPubs.values()
				{
					atLeastOneAckSent := rsPub.ackMatchingNewSub(newSub) or atLeastOneAckSent;
				}

				if not atLeastOneAckSent then 
				{
					log "No status events received yet from entities matching subscription: " + newSub.toString() at INFO;
					sequence<string> summaries := [ "UNKNOWN" ];
					dictionary<string,string> extraParams := {};	
					Status status := Status("CORRELATOR_JMS", newSub.object, newSub.subServiceID, newSub.connection, "No status events received yet from entities matching subscription", summaries, false, extraParams);
					send status to Status.CHANNEL; 
				}
			}
		}
	}

	action listenForUnsubscribeStatus() 
	{
		UnsubscribeStatus unsub;
		on all UnsubscribeStatus("CORRELATOR_JMS", *, *, *):unsub
		{
			if isValidUnsubscription(unsub) then
			{
				log "Received status unsubscription: " + unsub.toString() at INFO;
				SubscribeStatus key := SubscribeStatus(unsub.serviceID, unsub.object, unsub.subServiceID, unsub.connection);
	
				if subs.hasKey(key) then
				{
					if subs[key] <= 1 then
					{
						subs.remove(key);	
					}
					else { subs[key] := subs[key] - 1; }
				}
				else
				{
					log "No subscription exists that matches unsubscription: " + unsub.toString() at DEBUG;
				}
			}
		}
	}

	action listenForNewJmsEntities()
	{
		JMSConnectionStatus cs;
		on all JMSConnectionStatus():cs
		{
			if not csPubs.hasKey(cs.connectionId) then
			{
				log "Received connection status from new connection: " + cs.toString() at DEBUG;
				JMSConnectionStatusPublisher csPub := new JMSConnectionStatusPublisher;
				csPub.activate(cs, subs);
				csPubs.add(cs.connectionId, csPub);
			}
		}	

		JMSSenderStatus ss;
		on all JMSSenderStatus():ss
		{
			if not ssPubs.hasKey(ss.connectionId + ":" + ss.senderId) then
			{
				log "Received sender status from new sender: " + ss.toString() at DEBUG;
				JMSSenderStatusPublisher ssPub := new JMSSenderStatusPublisher;
				ssPub.activate(ss, subs);
				ssPubs.add(ss.connectionId + ":" + ss.senderId, ssPub);
			}
		}	

		JMSReceiverStatus rs;
		on all JMSReceiverStatus():rs
		{
			if not rsPubs.hasKey(rs.connectionId + ":" + rs.receiverId) then
			{
				log "Received receiver status from new receiver: " + rs.toString() at DEBUG;
				JMSReceiverStatusPublisher rsPub := new JMSReceiverStatusPublisher;
				rsPub.activate(rs, subs);
				rsPubs.add(rs.connectionId + ":" + rs.receiverId, rsPub);
			}
		}	
	}

	action isValidSubscription(SubscribeStatus sub) returns boolean 
	{ 
		return isValidSubOrUnsub(sub.serviceID, sub.object, sub.subServiceID, sub.connection, "SubscribeStatus", sub.toString()); 
	}	

	action isValidUnsubscription(UnsubscribeStatus unsub) returns boolean 
	{ 
		return isValidSubOrUnsub(unsub.serviceID, unsub.object, unsub.subServiceID, unsub.connection, "UnsubscribeStatus", unsub.toString()); 
	}	

	action isValidSubOrUnsub(string serviceID, string object, string subServiceID, string connection, string requestType, string asString) returns boolean
	{
		string errMsg;
		if serviceID = "CORRELATOR_JMS" then
		{
			if object = "" then
			{
				if not subServiceID = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (subServiceID must be \"\" when object is \"\"): " + asString;	
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}
			}
			else if object = "CONNECTION" then
			{
				if connection = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (connection may not be \"\" when object is \"CONNECTION\"): " + asString;
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}

				if not subServiceID = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (subServiceID must be \"\" when object is \"CONNECTION\"): " + asString;	
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}
			}
			else if object = "SENDER" or object = "RECEIVER" then
			{
				if connection = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (connection may not be \"\" when object is \"" + object + "\"): " + asString;
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}

				if subServiceID = "" then
				{
					errMsg := "Invalid CORRELATOR_JMS " + requestType + " (subServiceID may not be \"\" when object is \"" + object + "\"): " + asString;	
					send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
					return false;
				}
			}
			else
			{ 
				errMsg := "Invalid CORRELATOR_JMS " + requestType + " (valid values for object field are \"CONNECTION\", \"SENDER\", \"RECEIVER\" or \"\"): " + asString;
				send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
				return false; 
			} 
			
			return true;
		}
		else 
		{ 
			errMsg := "Unexpected request to validate non-CORRELATOR_JMS " + requestType + " (serviceID must be CORRELATOR_JMS): " + asString;
			send StatusError(serviceID, object, subServiceID, connection, errMsg, true) to StatusError.CHANNEL;
			return false; 
		}
	}

	event JMSConnectionStatusPublisher
	{
		JMSConnectionStatus current;	
		dictionary<SubscribeStatus, integer> allSubs;
		
		action activate(JMSConnectionStatus cs, dictionary<SubscribeStatus, integer> subs) 
		{
			current := cs;
			allSubs := subs;

			if existsMatchingSub() then { sendStatus(); }

			JMSConnectionStatus update;
			on all JMSConnectionStatus(current.connectionId, *, *, *):update
			{
				current := update;	
				if existsMatchingSub() then { sendStatus(); }	
			}
		}

		action existsMatchingSub() returns boolean 
		{ 
			SubscribeStatus sub;
			for sub in allSubs.keys()
			{
				if matches(sub) then { return true; }
			}
			return false;
		}

		action matches(SubscribeStatus sub) returns boolean
		{
			return (sub.object = "" and (sub.connection = "" or sub.connection = current.connectionId)) or 
	 			(sub.object = "CONNECTION" and sub.connection = current.connectionId);
		}

		action ackMatchingNewSub(SubscribeStatus newSub) returns boolean 
		{ 
			if matches(newSub) then
			{
				sendStatus();
				return true;
			} 
			return false;
		}

		action sendStatus() 
		{
			boolean available := false;
			if (current.status = JMSConnectionStatus.OK) then { available := true; }

			sequence<string> summaries := [ current.status ];
			dictionary<string,string> extraParams := {};	
			Status status := Status("CORRELATOR_JMS", "CONNECTION", "", current.connectionId, current.errorMessage, summaries, available, extraParams);
			send status to Status.CHANNEL;
		}
	}

	event JMSSenderStatusPublisher
	{
		JMSSenderStatus current;	
		dictionary<SubscribeStatus, integer> allSubs;

		action activate(JMSSenderStatus ss, dictionary<SubscribeStatus, integer> subs) 
		{
			current := ss;
			allSubs := subs;

			if existsMatchingSub() then { sendStatus(); }

			JMSSenderStatus update;
			on all JMSSenderStatus(current.connectionId, current.senderId, *, *, *, *, *):update
			{	
				current := update;	
				if existsMatchingSub() then { sendStatus(); }	
			}
		}

		action existsMatchingSub() returns boolean 
		{ 
			SubscribeStatus sub;
			for sub in allSubs.keys()
			{
				if matches(sub) then { return true; }
			}
			return false;
		}

		action matches(SubscribeStatus sub) returns boolean
		{
			return (sub.object = "" and (sub.connection = "" or sub.connection = current.connectionId)) or 
	 			(sub.object = "SENDER" and sub.connection = current.connectionId and sub.subServiceID = current.senderId);
		}

		action ackMatchingNewSub(SubscribeStatus newSub) returns boolean 
		{
			if matches(newSub) then
			{
				sendStatus();
				return true;
			} 
			return false;
		}

		action sendStatus() 
		{
			boolean available := false;
			if (current.status = JMSSenderStatus.OK) then { available := true; }

			sequence<string> summaries := [ current.status ];
			dictionary<string,string> extraParams := {};	
			Status status := Status("CORRELATOR_JMS", "SENDER", current.senderId, current.connectionId, current.errorMessage, summaries, available, extraParams);
			send status to Status.CHANNEL; 
		}
	}

	event JMSReceiverStatusPublisher
	{
		JMSReceiverStatus current;	
		dictionary<SubscribeStatus, integer> allSubs;

		action activate(JMSReceiverStatus rs, dictionary<SubscribeStatus, integer> subs) 
		{
			current := rs;
			allSubs := subs;

			if existsMatchingSub() then { sendStatus(); }
			
			JMSReceiverStatus update;
			on all JMSReceiverStatus(current.connectionId, current.receiverId, *, *, *, *, *, *, *, *, *):update
			{
				current := update;	
				if existsMatchingSub() then { sendStatus(); }	
			}
		}

		action existsMatchingSub() returns boolean 
		{ 
			SubscribeStatus sub;
			for sub in allSubs.keys()
			{
				if matches(sub) then { return true; }
			}
			return false;
		}

		action matches(SubscribeStatus sub) returns boolean
		{
			return (sub.object = "" and (sub.connection = "" or sub.connection = current.connectionId)) or 
	 			(sub.object = "RECEIVER" and sub.connection = current.connectionId and sub.subServiceID = current.receiverId);
		}

		action ackMatchingNewSub(SubscribeStatus newSub) returns boolean 
		{
			if matches(newSub) then
			{
				sendStatus();
				return true;
			} 
			return false;
		}

		action sendStatus() 
		{
			boolean available := false;
			if (current.status = JMSReceiverStatus.OK) then { available := true; }
			log "Sending receiver status report in response to status event: " + current.toString() at DEBUG;

			sequence<string> summaries := [ current.status ];
			dictionary<string,string> extraParams := {};	
			Status status := Status("CORRELATOR_JMS", "RECEIVER", current.receiverId, current.connectionId, current.errorMessage, summaries, available, extraParams);
			send status to Status.CHANNEL;
		}
	}
}
 0000003f C:\SoftwareAG\Apama 5.3\monitors\CorrelatorJMSStatusManager.mon
MONF 00000e5e //*****************************************************************************
// Title:         DashboardSupport.mon
// Description:   Monitor defining events to be sent when a client connects
//                or disconnects from a dashboard.  The monitor also provides
//                multi-context support for the connect/disconnect events.
// Dependencies:  None
// $Copyright(c) 2010 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

package com.apama.dashboard;


event DashboardClientConnected {
	string userName;
	string sessionId;
	dictionary<string,string> extraParams;
}

event DashboardClientDisconnected {
	string userName;
	string sessionId;
	dictionary<string,string> extraParams;
}

// Events to support parallel execution (contexts)

event RegisterContextForDashboardClientConnections {
	context instanceContext;
}

event DeregisterContextForDashboardClientConnections {
	context instanceContext;
}


/**
 * This monitor provides the context forwarders needed to allow
 * the Dashboard connect and disconnect notification events to be sent to
 * the registered contexts.
 * The notifications are always sent to the main context.
 */
monitor DashboardSupport
{
	// Used to persist contexts interested in notifications
	sequence < context > notifyContexts;

	action onload {
		
		log "Loaded Dashboard Client Connect Notification service" at INFO;
		
		// Forwarders to support parallel execution (contexts)
		setupContextForwarders();
		
	}
	
	action setupContextForwarders()
	{

		DashboardClientConnected connect;
		on all DashboardClientConnected(): connect {
			log "Dashboard Client Connected - User:" + connect.userName +
				"  Session:" + connect.sessionId at DEBUG;
			if notifyContexts.size() > 0 then {
				context ctx;
				for ctx in notifyContexts {
					send connect to ctx;
				}
			}
		}

		DashboardClientDisconnected disconnect;
		on all DashboardClientDisconnected(): disconnect {
			log "Dashboard Client Disconnected - User:" + disconnect.userName +
				"  Session:" + disconnect.sessionId at DEBUG;
			if notifyContexts.size() > 0 then {
				context ctx;
				for ctx in notifyContexts {
					send disconnect to ctx;
				}
			}
		}
		
		RegisterContextForDashboardClientConnections regCtx;
		on all RegisterContextForDashboardClientConnections():regCtx registerCtx(regCtx.instanceContext);
	
		DeregisterContextForDashboardClientConnections deregCtx;
		on all DeregisterContextForDashboardClientConnections():deregCtx deregisterCtx(deregCtx.instanceContext);
	}
	
	action registerCtx(context ctx)
	{		
		notifyContexts.append(ctx);
	}

	action deregisterCtx(context ctx)
	{
		if notifyContexts.size() > 0 then {
			integer ctxId := notifyContexts.indexOf(ctx);
			if ctxId >= 0 then {
				notifyContexts.remove(ctxId);
			}
		}
	}

	action ondie() {
		if (notifyContexts.size() != 0) then {
			log "ondie: Dashboard Support service is terminating but there may still be contexts subscribed to dashboard connect events" at ERROR;
		}
		else {
			log "ondie: Dashboard Support service is terminating" at INFO;
		}
	}

	action onunload {
		log "Unloaded Dashboard Support service" at INFO;
	}


}
 00000035 C:\SoftwareAG\Apama 5.3\monitors\DashboardSupport.mon
MONF 00000529 //*****************************************************************************
// Title:       ScenarioDeleterSupport
// Description: Provides event definitions for deleting Scenario instances. 
//
// Revision:    $Id: ScenarioDeleterSupport.mon 228871 2014-06-09 10:43:32Z matj $
//
// $Copyright(c) 2004-2005, 2008-2009 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its Subsidiaries and or/its Affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

package com.apama.scenarios;

event DeleteAllScenarios {
	constant string CHANNEL := "ScenarioDeleter";
}

event DeleteScenariosByUser {
	string owner;
}

monitor ScenarioDeleterSupport {
	
	action onload() {
		
		DeleteAllScenarios deleteAll;
		on all DeleteAllScenarios():deleteAll {
			send deleteAll to DeleteAllScenarios.CHANNEL;
		}
		
		DeleteScenariosByUser deleteByUser;
		on all DeleteScenariosByUser():deleteByUser {
			send deleteByUser to DeleteAllScenarios.CHANNEL;
		}
	}
	
} 0000004c C:\SoftwareAG\Apama 5.3\monitors\scenario_support\ScenarioDeleterSupport.mon
MONF 000003b9 //*****************************************************************************
// Title:         SensorEvents
// Description:   SensorEvents description
// Dependencies:  None
// Author:        ydhimate
//
//*****************************************************************************

package com.prosoftgroup.klgame;

event AddSensor {
	string	sensorName;
}

event UserObject {
	string	userId;
	string	name;
	string	beaconId;
	string	regionLabel;
	string	timestamp;
	string	eventType;
}

event HelloWorld {
	string message;
}

event IWStatus {
	string iwstatus;
	string destination;
}

event IWRegion {
	string iwregion;
	string destination;
}

event IWCustomer {
	string iwcustomer;
	string destination;
}

event RegionCount {
	string regionLabel;
	integer count;
}

event UserCount {
	string userId;
	string name;
	integer count;
}

event DummyEvent {
	string	userId;
	string	name;

}


 0000005d C:\SoftwareAG\ApamaWork_5.3\studio_workspace\Prosoft_IW2015\eventdefinitions\SensorEvents.mon
MONF 000025a6 //*****************************************************************************
// Title:         SensorMonitors
// Description:   SensorMonitors description
// Dependencies:  None
// Author:        ydhimate
//
//*****************************************************************************

package com.prosoftgroup.klgame; 
using com.apama.correlator.jms.JMS;
using com.apama.aggregates.count;

// TODO: Monitors and event definitions here

monitor SensorMonitors {
	
	JMS jms;
	sequence <string> names;
	UserObject userObject;
	UserObject idleObject;
	UserObject staticObject;
	float regionEntryTime := 0.0;
	float timeInRegion := 0.0;
	string currentRegion := "";
	float dealTime := 0.0;
	string status := "In Transit";
	string dealRemark := "Customer moving to another region";
	
	constant float IDLE_TRIGGER := 15.0;
	constant float DEAL_TRIGGER := 30.0;
	constant float DEAL_WAIT := 300.0;
	constant float REGION_HISTORY := 3600.0;
	constant float STATUS_DELETE := 1800.0;
	
	action onload() {
		 
		on all UserObject() : userObject {
			integer index;
			index := names.indexOf(userObject.userId);
			
			if index = -1 then{

				names.append(userObject.userId);
				spawn sensorHandler (userObject.userId, userObject.name);
				route userObject;
			}
			
		}
		
		stream <UserObject> regionStream := all UserObject();
		
		UserObject region;
		RegionCount rcount;
		from region in regionStream within REGION_HISTORY
		  group by region.regionLabel
		  select RegionCount(region.regionLabel, count()):rcount {
			emit IWRegion(rcount.regionLabel + "|" + rcount.count.toString(), 
			              "topic:IWRegion") to "jms:UniversalMessaging-default-sender"; 
			//print "Count for region " + rcount.regionLabel + " - " + rcount.count.toString(); 
		}
		
//		UserObject user;
//		UserCount ucount;
		
//		from user in regionStream 
//		  partition by user.regionLabel within 3600.0
//		  group by user.userId, user.regionLabel
//		  select UserCount(user.regionLabel, user.userId, count()):ucount {
//			print "Count for user " + ucount.name + " - " + ucount.count.toString(); 
//		}
		
		jms.onApplicationInitialized();
		
		emit HelloWorld("Prosoft IW Demo: Refresh the tables") to "jms:UniversalMessaging-default-sender";
		
		route DummyEvent("Prosoft IW Demo", "Refresh complete" );
	
	
	}
	
	action sensorHandler (string id, string uname) {
		UserObject sensorObject;
		
		integer lastCount;
		integer idleCount;
		integer staticCount;
		boolean sendDeal := false;
		
		
		stream <UserObject> userStream := all UserObject(userId = id);
		
		from userObject in userStream within STATUS_DELETE
		  select count():lastCount {
			
			if lastCount = 0 then {
				
				emit IWStatus(userObject.userId + "|" 
				                + userObject.name + "|"
				                + currentRegion + "|" 
				                + status + "|"
				                + dealRemark + "|"
				                + sendDeal.toString() + "|"
				              + "delete" + "|"
				              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
		
				
			}
		}
		
		from idleObject in userStream within IDLE_TRIGGER 
		  select count(): idleCount {
			
			//print "IDLE OBJECT :" +idleCount.toString();
			if idleCount = 0 then {
				timeInRegion := currentTime - regionEntryTime;
				
				if timeInRegion >= DEAL_TRIGGER then {
					if dealTime = 0.0 then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := " Deal sent to " + uname; 
					
					}
					else if (currentTime - dealTime) > DEAL_WAIT then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := "Deal sent to " + uname;
					}
					else {
						sendDeal := false;
						dealRemark := "Deal already sent. Wait for the next deal for " + uname;
					}
				}
				
				
				//print "IDLE OBJECT :" + timeInRegion.toString();
				if (timeInRegion >= IDLE_TRIGGER and timeInRegion < DEAL_TRIGGER) then {
					status := "Idle";
					dealRemark := "Customer not moving";
				}
				else if (timeInRegion < IDLE_TRIGGER) then {
					status := "In Transit";
					dealRemark := "Customer moving to another region";
				}
				else if (timeInRegion >= DEAL_TRIGGER) then {
					status := "Stationary";
				}
			
				emit IWStatus(id + "|" 
				                + uname + "|"
				                + currentRegion + "|" 
				                + status + "|"
				                + dealRemark + "|"
				                + sendDeal.toString() + "|"
				              + "add" + "|"
				              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";

			}
		}
		
		
		
		from idleObject in userStream within DEAL_TRIGGER 
		  select count(): staticCount {
			
			//print "STATIC OBJECT :" +staticCount.toString(); 
			if staticCount = 0 then {
				timeInRegion := currentTime - regionEntryTime;
				
				if timeInRegion >= DEAL_TRIGGER then {
					if dealTime = 0.0 then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := " Deal sent to " + uname; 
					
					}
					else if (currentTime - dealTime) > DEAL_WAIT then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := "Deal sent to " + uname;
					}
					else {
						sendDeal := false;
						dealRemark := "Deal already sent. Wait for the next deal for " + uname;
					}
				}
				
				//print "STATIC OBJECT :" + timeInRegion.toString();
				
				if (timeInRegion >= IDLE_TRIGGER and timeInRegion < DEAL_TRIGGER) then {
					status := "Idle";
					dealRemark := "Customer not moving";
				}
				else if (timeInRegion < IDLE_TRIGGER) then {
					status := "In Transit";
					dealRemark := "Customer moving to another region";
				}
				else if (timeInRegion >= DEAL_TRIGGER) then {
					status := "Stationary";
				}
			
				emit IWStatus(id + "|" 
				                + uname + "|"
				                + currentRegion + "|" 
				                + status + "|"
				                + dealRemark + "|"
				                + sendDeal.toString() + "|"
				              + "add" + "|"
				              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
			
			}
		}
		
		
		
		on all UserObject(userId=id) : sensorObject {
			
			//log "Received event " + sensorObject.toString();
			
			if currentRegion = "" then {
				currentRegion := sensorObject.regionLabel;
			}
			
			if currentRegion = sensorObject.regionLabel then {
				if regionEntryTime = 0.0 then {
					regionEntryTime := currentTime;
				}
				
				timeInRegion := currentTime - regionEntryTime;
				
				if timeInRegion >= DEAL_TRIGGER then {
					if dealTime = 0.0 then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := " Deal sent to " + sensorObject.name; 
					
					}
					else if (currentTime - dealTime) > DEAL_WAIT then {
						sendDeal := true;
						dealTime := currentTime;
						
						dealRemark := "Deal sent to " + sensorObject.name;
					}
					else {
						sendDeal := false;
						dealRemark := "Deal already sent. Wait for the next deal for " + sensorObject.name;
					}
				}
				
				
				if (timeInRegion >= IDLE_TRIGGER and timeInRegion < DEAL_TRIGGER) then {
					status := "Idle";
					dealRemark := "Customer not moving";
				}
				else if (timeInRegion < IDLE_TRIGGER) then {
					status := "In Transit";
					dealRemark := "Customer moving to another region";
				}
				else if (timeInRegion >= DEAL_TRIGGER) then {
					status := "Stationary";
				}
			} 
			else {
				currentRegion := sensorObject.regionLabel;
				regionEntryTime := currentTime;
				timeInRegion := currentTime - regionEntryTime;
				status := "In Transit";
				dealRemark := "Customer moving to another region";
				dealTime := 0.0;
			}
			
//			print 	"Region Entry Time " + regionEntryTime.toString() + 
//			" Region Time " + timeInRegion.toString()+
//			" Current Region " + currentRegion + 
//			" Deal time " + dealTime.toString() + 
//			" Status " + status;
//			
			emit IWStatus(sensorObject.userId + "|" 
			                + sensorObject.name + "|"
			                + currentRegion + "|" 
			                + status + "|"
			                + dealRemark + "|"
			                + sendDeal.toString() + "|"
			              + "add" + "|" 
			              + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
			
	
		}
	
		on all wait (15.0) {
			
			timeInRegion := currentTime - regionEntryTime;

			
			if timeInRegion >= DEAL_TRIGGER then {
				if dealTime = 0.0 then {
					sendDeal := true;
					dealTime := currentTime;
					
					dealRemark := " Deal sent to " + uname; 
				
				}
				else if (currentTime - dealTime) > DEAL_WAIT then {
					sendDeal := true;
					dealTime := currentTime;
					
					dealRemark := "Deal sent to " + uname;
				}
				else {
					sendDeal := false;
					dealRemark := "Deal already sent. Wait for the next deal for " + uname;
				}
			}
			
			
			emit IWStatus(id + "|" 
			                + uname + "|"
			                + currentRegion + "|" 
			                + status + "|"
			                + dealRemark + "|"
			                + sendDeal.toString() + "|"
			              + "add" + "|" + timeInRegion.toString(), "topic:IWStatus") to "jms:UniversalMessaging-default-sender";
	
	
		}		
	}
} 00000057 C:\SoftwareAG\ApamaWork_5.3\studio_workspace\Prosoft_IW2015\monitors\SensorMonitors.mon
EVNT 00000052 0 "",com.apama.correlator.jms.JMSConnectionStatus("UniversalMessaging","OK","",{})
EVNT 000000bb 0 "",com.apama.correlator.jms.JMSReceiverStatus("UniversalMessaging","UniversalMessaging-receiver-InnovationWorld","CONNECTING","",{},"topic:InnovationWorld","BEST_EFFORT","","",false,{})
EVNT 0000008b 0 "",com.apama.correlator.jms.JMSSenderStatus("UniversalMessaging","UniversalMessaging-default-sender","CONNECTING","",{},"BEST_EFFORT",{})
MONF 00000818 //*****************************************************************************
//Title:         SensorSimulators
//Description:   SensorSimulators description
//Dependencies:  None
//Author:        ydhimate

//*****************************************************************************

package com.prosoftgroup.klgame; 

//TODO: Monitors and event definitions here

monitor SensorSimulator{

	sequence<string>  users := ["Carolyn Smith","James Walker","Erin Doe","Chris Bean","Annie Hall", "Shawn Adams"];
	sequence<string>  regions := ["Terracotta", "Natural", "GCS", 
	                              "Meet the Experts", "Registration Desk", "General Entrance", 
	                              "Prosoft Booth", "Prosoft Booth", "Prosoft Booth",
	                              "Showcase Entrance", "Prosoft Booth", "Prosoft Booth"];
	string user;
	string userId;
	string  currentHall;
	boolean toggleHall := false;
		
	action onload() {
		DummyEvent dummy;
		on DummyEvent() :dummy {
			log dummy.toString();
			string s;
			for s in users {
				user := s;
				userId := (users.indexOf(user) + 90).toString();
				spawn simulationHandler();
			}
		}
	}


	action simulationHandler() {

		string	beaconId:="Beacon";
		string	regionLabel;
		string	timestamp:="";
		string	eventType:="";
		// Set initial values 
		integer randomWait;
		integer randomHall;
		integer waitTime;
		randomWait := 10;
		waitTime := randomWait.rand()*10;

		if waitTime = 0 then { waitTime := 10; }
		// Randomly fluctuate values for random seconds
		on all wait (waitTime.toFloat()) {
			randomHall := 12;
			regionLabel := regions[randomHall.rand()]; 
			if toggleHall = false then {
				currentHall := regionLabel;
				toggleHall := true;
			}
			else {
				regionLabel := currentHall;
				toggleHall := false;
			}
			
		//	print (toggleHall.toString() + "|" + waitTime.toString() + "|" + userId + "|" + user + "|" + regionLabel);
			
			route UserObject(userId,user,beaconId,regionLabel,timestamp,eventType);
		}

	}
} 00000059 C:\SoftwareAG\ApamaWork_5.3\studio_workspace\Prosoft_IW2015\monitors\SensorSimulators.mon
TIME 0000000e 1444709904.9,1
EVNT 00000083 0 "",com.apama.correlator.jms.JMSSenderStatus("UniversalMessaging","UniversalMessaging-default-sender","OK","",{},"BEST_EFFORT",{})
DISC 0000003c 6795184426424404343:6875781408118016375 from 127.0.0.1:57369
EVNT 000000b3 0 "",com.apama.correlator.jms.JMSReceiverStatus("UniversalMessaging","UniversalMessaging-receiver-InnovationWorld","OK","",{},"topic:InnovationWorld","BEST_EFFORT","","",false,{})
TIME 0000000e 1444709906.4,1
EVNT 0000007a 6795184426424404343 "",com.apama.scenario.RequestScenarios("com.apama.scenario.private_6795194240424872330_1444709904427")
CONN 0000003c 6875797819188840823:6875798922995698039 from 127.0.0.1:57386
TIME 0000000e 1444709908.7,1
TIME 0000000e 1444709908.8,1
EVNT 0000007a 6875797819188840823 "",com.apama.scenario.RequestScenarios("com.apama.scenario.private_6875801083364379000_1444709908744")
TIME 0000000e 1444709947.8,1
EVNT 0000004a 6795184426424404343 "",com.prosoftgroup.klgame.DummyEvent("Hello","World")
TIME 0000000e 1444709957.8,1
TIME 0000000e 1444709967.8,1
TIME 0000000e 1444709972.8,1
TIME 0000000e 1444709977.8,1
TIME 0000000e 1444709982.8,1
TIME 0000000e 1444709987.8,1
TIME 0000000e 1444709992.8,1
TIME 0000000e 1444709997.8,1
TIME 0000000e 1444710002.8,1
TIME 0000000e 1444710007.8,1
TIME 0000000e 1444710012.8,1
TIME 0000000e 1444710017.8,1
TIME 0000000e 1444710022.8,1
TIME 0000000e 1444710027.8,1
TIME 0000000e 1444710032.8,1
TIME 0000000e 1444710037.8,1
TIME 0000000e 1444710042.8,1
TIME 0000000e 1444710047.8,1
TIME 0000000e 1444710052.8,1
TIME 0000000e 1444710057.8,1
TIME 0000000e 1444710062.8,1
TIME 0000000e 1444710067.8,1
TIME 0000000e 1444710072.8,1
TIME 0000000e 1444710077.8,1
TIME 0000000e 1444710082.8,1
TIME 0000000e 1444710087.8,1
TIME 0000000e 1444710092.8,1
TIME 0000000e 1444710097.8,1
TIME 0000000e 1444710102.8,1
TIME 0000000e 1444710107.8,1
TIME 0000000e 1444710112.8,1
TIME 0000000e 1444710117.8,1
TIME 0000000e 1444710122.8,1
TIME 0000000e 1444710127.8,1
TIME 0000000e 1444710132.8,1
TIME 0000000e 1444710137.8,1
TIME 0000000e 1444710142.8,1
TIME 0000000e 1444710147.8,1
TIME 0000000e 1444710152.8,1
TIME 0000000e 1444710157.8,1
TIME 0000000e 1444710162.8,1
TIME 0000000e 1444710167.8,1
TIME 0000000e 1444710172.8,1
TIME 0000000e 1444710177.8,1
TIME 0000000e 1444710182.8,1
TIME 0000000e 1444710187.8,1
TIME 0000000e 1444710192.8,1
TIME 0000000e 1444710197.8,1
TIME 0000000e 1444710202.8,1
TIME 0000000e 1444710207.8,1
TIME 0000000e 1444710212.8,1
TIME 0000000e 1444710216.3,1
DISC 0000003c 6875797819188840823:6875798922995698039 from 127.0.0.1:57386
TIME 0000000e 1444710217.8,1
TIME 0000000e 1444710222.8,1
TIME 0000000e 1444710227.8,1
TIME 0000000e 1444710232.8,1
TIME 0000000e 1444710237.8,1
TIME 0000000e 1444710242.8,1
TIME 0000000e 1444710247.8,1
TIME 0000000e 1444710252.8,1
TIME 0000000e 1444710257.8,1
TIME 0000000e 1444710262.8,1
TIME 0000000e 1444710267.8,1
TIME 0000000e 1444710272.8,1
TIME 0000000e 1444710277.8,1
TIME 0000000e 1444710282.8,1
TIME 0000000e 1444710287.8,1
TIME 0000000e 1444710292.8,1
TIME 0000000e 1444710297.8,1
TIME 0000000e 1444710302.8,1
TIME 0000000e 1444710307.8,1
TIME 0000000e 1444710312.8,1
TIME 0000000e 1444710317.8,1
TIME 0000000e 1444710322.8,1
TIME 0000000e 1444710327.8,1
TIME 0000000e 1444710332.8,1
TIME 0000000e 1444710337.8,1
TIME 0000000e 1444710342.8,1
TIME 0000000e 1444710347.8,1
TIME 0000000e 1444710352.8,1
TIME 0000000e 1444710357.8,1
TIME 0000000e 1444710362.8,1
TIME 0000000e 1444710367.8,1
TIME 0000000e 1444710372.8,1
TIME 0000000e 1444710377.8,1
TIME 0000000e 1444710382.8,1
TIME 0000000e 1444710387.8,1
TIME 0000000e 1444710392.8,1
TIME 0000000e 1444710397.8,1
TIME 0000000e 1444710402.8,1
TIME 0000000e 1444710407.8,1
TIME 0000000e 1444710412.8,1
TIME 0000000e 1444710417.8,1
TIME 0000000e 1444710422.8,1
TIME 0000000e 1444710427.8,1
TIME 0000000e 1444710432.8,1
TIME 0000000e 1444710437.8,1
TIME 0000000e 1444710442.8,1
TIME 0000000e 1444710447.8,1
TIME 0000000e 1444710452.8,1
TIME 0000000e 1444710457.8,1
TIME 0000000e 1444710462.8,1
TIME 0000000e 1444710467.8,1
TIME 0000000e 1444710472.8,1
TIME 0000000e 1444710477.8,1
TIME 0000000e 1444710482.8,1
TIME 0000000e 1444710487.8,1
TIME 0000000e 1444710492.8,1
TIME 0000000e 1444710497.8,1
TIME 0000000e 1444710502.8,1
TIME 0000000e 1444710507.8,1
TIME 0000000e 1444710512.8,1
TIME 0000000e 1444710517.8,1
TIME 0000000e 1444710522.8,1
TIME 0000000e 1444710527.8,1
TIME 0000000e 1444710532.8,1
TIME 0000000e 1444710537.8,1
TIME 0000000e 1444710542.8,1
TIME 0000000e 1444710547.8,1
TIME 0000000e 1444710552.8,1
TIME 0000000e 1444710557.8,1
TIME 0000000e 1444710562.8,1
TIME 0000000e 1444710567.8,1
TIME 0000000e 1444710572.8,1
TIME 0000000e 1444710577.8,1
TIME 0000000e 1444710582.8,1
TIME 0000000e 1444710587.8,1
TIME 0000000e 1444710592.8,1
TIME 0000000e 1444710597.8,1
TIME 0000000e 1444710602.8,1
TIME 0000000e 1444710607.8,1
TIME 0000000e 1444710612.8,1
TIME 0000000e 1444710617.8,1
TIME 0000000e 1444710622.8,1
TIME 0000000e 1444710627.8,1
TIME 0000000e 1444710632.8,1
TIME 0000000e 1444710637.8,1
TIME 0000000e 1444710642.8,1
TIME 0000000e 1444710647.8,1
TIME 0000000e 1444710652.8,1
TIME 0000000e 1444710657.8,1
TIME 0000000e 1444710662.8,1
TIME 0000000e 1444710667.8,1
TIME 0000000e 1444710672.8,1
TIME 0000000e 1444710677.8,1
TIME 0000000e 1444710682.8,1
TIME 0000000e 1444710687.8,1
TIME 0000000e 1444710692.8,1
TIME 0000000e 1444710697.8,1
TIME 0000000e 1444710702.8,1
TIME 0000000e 1444710707.8,1
TIME 0000000e 1444710712.8,1
TIME 0000000e 1444710717.8,1
TIME 0000000e 1444710722.8,1
TIME 0000000e 1444710727.8,1
TIME 0000000e 1444710732.8,1
TIME 0000000e 1444710737.8,1
TIME 0000000e 1444710742.8,1
TIME 0000000e 1444710747.8,1
TIME 0000000e 1444710752.8,1
TIME 0000000e 1444710757.8,1
TIME 0000000e 1444710762.8,1
TIME 0000000e 1444710767.8,1
TIME 0000000e 1444710772.8,1
TIME 0000000e 1444710777.8,1
TIME 0000000e 1444710782.8,1
TIME 0000000e 1444710787.8,1
TIME 0000000e 1444710792.8,1
TIME 0000000e 1444710797.8,1
TIME 0000000e 1444710802.8,1
TIME 0000000e 1444710807.8,1
TIME 0000000e 1444710812.8,1
TIME 0000000e 1444710817.8,1
TIME 0000000e 1444710822.8,1
TIME 0000000e 1444710827.8,1
TIME 0000000e 1444710832.8,1
TIME 0000000e 1444710837.8,1
TIME 0000000e 1444710842.8,1
TIME 0000000e 1444710847.8,1
TIME 0000000e 1444710852.8,1
TIME 0000000e 1444710857.8,1
TIME 0000000e 1444710862.8,1
TIME 0000000e 1444710867.8,1
TIME 0000000e 1444710872.8,1
TIME 0000000e 1444710877.8,1
TIME 0000000e 1444710882.8,1
TIME 0000000e 1444710887.8,1
TIME 0000000e 1444710892.8,1
TIME 0000000e 1444710897.8,1
TIME 0000000e 1444710902.8,1
TIME 0000000e 1444710907.8,1
TIME 0000000e 1444710912.8,1
TIME 0000000e 1444710917.8,1
TIME 0000000e 1444710922.8,1
TIME 0000000e 1444710927.8,1
TIME 0000000e 1444710932.8,1
TIME 0000000e 1444710937.8,1
TIME 0000000e 1444710942.8,1
TIME 0000000e 1444710947.8,1
TIME 0000000e 1444710952.8,1
TIME 0000000e 1444710957.8,1
TIME 0000000e 1444710962.8,1
TIME 0000000e 1444710967.8,1
TIME 0000000e 1444710972.8,1
TIME 0000000e 1444710977.8,1
TIME 0000000e 1444710982.8,1
TIME 0000000e 1444710987.8,1
TIME 0000000e 1444710992.8,1
TIME 0000000e 1444710997.8,1
TIME 0000000e 1444711002.8,1
TIME 0000000e 1444711007.8,1
TIME 0000000e 1444711012.8,1
TIME 0000000e 1444711017.8,1
TIME 0000000e 1444711022.8,1
TIME 0000000e 1444711027.8,1
TIME 0000000e 1444711032.8,1
TIME 0000000e 1444711037.8,1
TIME 0000000e 1444711042.8,1
TIME 0000000e 1444711047.8,1
TIME 0000000e 1444711052.8,1
TIME 0000000e 1444711057.8,1
TIME 0000000e 1444711062.8,1
TIME 0000000e 1444711067.8,1
TIME 0000000e 1444711072.8,1
TIME 0000000e 1444711077.8,1
TIME 0000000e 1444711082.8,1
TIME 0000000e 1444711087.8,1
TIME 0000000e 1444711092.8,1
TIME 0000000e 1444711097.8,1
TIME 0000000e 1444711102.8,1
TIME 0000000e 1444711107.8,1
TIME 0000000e 1444711112.8,1
TIME 0000000e 1444711117.8,1
TIME 0000000e 1444711122.8,1
TIME 0000000e 1444711127.8,1
TIME 0000000e 1444711132.8,1
TIME 0000000e 1444711137.8,1
TIME 0000000e 1444711142.8,1
TIME 0000000e 1444711147.8,1
TIME 0000000e 1444711152.8,1
TIME 0000000e 1444711157.8,1
TIME 0000000e 1444711162.8,1
TIME 0000000e 1444711167.8,1
TIME 0000000e 1444711172.8,1
TIME 0000000e 1444711177.8,1
TIME 0000000e 1444711182.8,1
TIME 0000000e 1444711187.8,1
TIME 0000000e 1444711192.8,1
TIME 0000000e 1444711197.8,1
TIME 0000000e 1444711202.8,1
TIME 0000000e 1444711207.8,1
TIME 0000000e 1444711212.8,1
TIME 0000000e 1444711217.8,1
TIME 0000000e 1444711222.8,1
TIME 0000000e 1444711227.8,1
TIME 0000000e 1444711232.8,1
TIME 0000000e 1444711237.8,1
TIME 0000000e 1444711242.8,1
TIME 0000000e 1444711247.8,1
TIME 0000000e 1444711252.8,1
TIME 0000000e 1444711257.8,1
TIME 0000000e 1444711262.8,1
TIME 0000000e 1444711267.8,1
TIME 0000000e 1444711272.8,1
TIME 0000000e 1444711277.8,1
TIME 0000000e 1444711282.8,1
TIME 0000000e 1444711287.8,1
TIME 0000000e 1444711292.8,1
TIME 0000000e 1444711297.8,1
TIME 0000000e 1444711302.8,1
TIME 0000000e 1444711307.8,1
TIME 0000000e 1444711312.8,1
TIME 0000000e 1444711317.8,1
TIME 0000000e 1444711322.8,1
TIME 0000000e 1444711327.8,1
TIME 0000000e 1444711332.8,1
TIME 0000000e 1444711337.8,1
TIME 0000000e 1444711342.8,1
TIME 0000000e 1444711347.8,1
TIME 0000000e 1444711352.8,1
TIME 0000000e 1444711357.8,1
TIME 0000000e 1444711362.8,1
TIME 0000000e 1444711367.8,1
TIME 0000000e 1444711372.8,1
TIME 0000000e 1444711377.8,1
TIME 0000000e 1444711382.8,1
TIME 0000000e 1444711387.8,1
TIME 0000000e 1444711392.8,1
TIME 0000000e 1444711397.8,1
TIME 0000000e 1444711402.8,1
TIME 0000000e 1444711407.8,1
TIME 0000000e 1444711412.8,1
TIME 0000000e 1444711417.8,1
TIME 0000000e 1444711422.8,1
TIME 0000000e 1444711427.8,1
TIME 0000000e 1444711432.8,1
TIME 0000000e 1444711437.8,1
TIME 0000000e 1444711442.8,1
TIME 0000000e 1444711447.8,1
TIME 0000000e 1444711452.8,1
TIME 0000000e 1444711457.8,1
TIME 0000000e 1444711462.8,1
TIME 0000000e 1444711467.8,1
TIME 0000000e 1444711472.8,1
TIME 0000000e 1444711477.8,1
TIME 0000000e 1444711482.8,1
TIME 0000000e 1444711487.8,1
TIME 0000000e 1444711492.8,1
TIME 0000000e 1444711497.8,1
TIME 0000000e 1444711502.8,1
TIME 0000000e 1444711507.8,1
TIME 0000000e 1444711512.8,1
TIME 0000000e 1444711517.8,1
TIME 0000000e 1444711522.8,1
TIME 0000000e 1444711527.8,1
TIME 0000000e 1444711532.8,1
TIME 0000000e 1444711537.8,1
TIME 0000000e 1444711542.8,1
TIME 0000000e 1444711547.8,1
TIME 0000000e 1444711552.8,1
TIME 0000000e 1444711557.8,1
TIME 0000000e 1444711562.8,1
TIME 0000000e 1444711567.8,1
TIME 0000000e 1444711572.8,1
TIME 0000000e 1444711577.8,1
TIME 0000000e 1444711582.8,1
TIME 0000000e 1444711587.8,1
TIME 0000000e 1444711592.8,1
TIME 0000000e 1444711597.8,1
TIME 0000000e 1444711602.8,1
TIME 0000000e 1444711607.8,1
TIME 0000000e 1444711612.8,1
TIME 0000000e 1444711617.8,1
TIME 0000000e 1444711622.8,1
TIME 0000000e 1444711627.8,1
TIME 0000000e 1444711632.8,1
TIME 0000000e 1444711637.8,1
TIME 0000000e 1444711642.8,1
TIME 0000000e 1444711647.8,1
TIME 0000000e 1444711652.8,1
TIME 0000000e 1444711657.8,1
TIME 0000000e 1444711662.8,1
TIME 0000000e 1444711667.8,1
TIME 0000000e 1444711672.8,1
TIME 0000000e 1444711677.8,1
TIME 0000000e 1444711682.8,1
TIME 0000000e 1444711687.8,1
TIME 0000000e 1444711692.8,1
TIME 0000000e 1444711697.8,1
TIME 0000000e 1444711702.8,1
TIME 0000000e 1444711707.8,1
TIME 0000000e 1444711712.8,1
TIME 0000000e 1444711717.8,1
TIME 0000000e 1444711722.8,1
TIME 0000000e 1444711727.8,1
TIME 0000000e 1444711732.8,1
TIME 0000000e 1444711737.8,1
TIME 0000000e 1444711742.8,1
TIME 0000000e 1444711747.8,1
TIME 0000000e 1444711752.8,1
TIME 0000000e 1444711757.8,1
TIME 0000000e 1444711762.8,1
TIME 0000000e 1444711767.8,1
TIME 0000000e 1444711772.8,1
TIME 0000000e 1444711777.8,1
TIME 0000000e 1444711782.8,1
TIME 0000000e 1444711787.8,1
TIME 0000000e 1444711792.8,1
TIME 0000000e 1444711797.8,1
TIME 0000000e 1444711802.8,1
TIME 0000000e 1444711807.8,1
TIME 0000000e 1444711812.8,1
TIME 0000000e 1444711817.8,1
TIME 0000000e 1444711822.8,1
TIME 0000000e 1444711827.8,1
TIME 0000000e 1444711832.8,1
TIME 0000000e 1444711837.8,1
TIME 0000000e 1444711842.8,1
TIME 0000000e 1444711847.8,1
TIME 0000000e 1444711852.8,1
TIME 0000000e 1444711857.8,1
TIME 0000000e 1444711862.8,1
TIME 0000000e 1444711867.8,1
TIME 0000000e 1444711872.8,1
TIME 0000000e 1444711877.8,1
TIME 0000000e 1444711882.8,1
TIME 0000000e 1444711887.8,1
TIME 0000000e 1444711892.8,1
TIME 0000000e 1444711897.8,1
TIME 0000000e 1444711902.8,1
TIME 0000000e 1444711907.8,1
TIME 0000000e 1444711912.8,1
TIME 0000000e 1444711917.8,1
TIME 0000000e 1444711922.8,1
TIME 0000000e 1444711927.8,1
TIME 0000000e 1444711932.8,1
TIME 0000000e 1444711937.8,1
TIME 0000000e 1444711942.8,1
TIME 0000000e 1444711947.8,1
TIME 0000000e 1444711952.8,1
TIME 0000000e 1444711957.8,1
TIME 0000000e 1444711962.8,1
TIME 0000000e 1444711967.8,1
TIME 0000000e 1444711972.8,1
TIME 0000000e 1444711977.8,1
TIME 0000000e 1444711982.8,1
TIME 0000000e 1444711987.8,1
TIME 0000000e 1444711992.8,1
TIME 0000000e 1444711997.8,1
TIME 0000000e 1444712002.8,1
TIME 0000000e 1444712007.8,1
TIME 0000000e 1444712012.8,1
TIME 0000000e 1444712017.8,1
TIME 0000000e 1444712022.8,1
TIME 0000000e 1444712027.8,1
TIME 0000000e 1444712032.8,1
TIME 0000000e 1444712037.8,1
TIME 0000000e 1444712042.8,1
TIME 0000000e 1444712047.8,1
TIME 0000000e 1444712052.8,1
TIME 0000000e 1444712057.8,1
TIME 0000000e 1444712062.8,1
TIME 0000000e 1444712067.8,1
TIME 0000000e 1444712072.8,1
TIME 0000000e 1444712077.8,1
TIME 0000000e 1444712082.8,1
TIME 0000000e 1444712087.8,1
TIME 0000000e 1444712092.8,1
TIME 0000000e 1444712097.8,1
TIME 0000000e 1444712102.8,1
TIME 0000000e 1444712107.8,1
TIME 0000000e 1444712112.8,1
TIME 0000000e 1444712117.8,1
TIME 0000000e 1444712122.8,1
TIME 0000000e 1444712127.8,1
TIME 0000000e 1444712132.8,1
TIME 0000000e 1444712137.8,1
TIME 0000000e 1444712142.8,1
TIME 0000000e 1444712147.8,1
TIME 0000000e 1444712152.8,1
TIME 0000000e 1444712157.8,1
TIME 0000000e 1444712162.8,1
TIME 0000000e 1444712167.8,1
TIME 0000000e 1444712172.8,1
TIME 0000000e 1444712177.8,1
TIME 0000000e 1444712182.8,1
TIME 0000000e 1444712187.8,1
TIME 0000000e 1444712192.8,1
TIME 0000000e 1444712197.8,1
TIME 0000000e 1444712202.8,1
TIME 0000000e 1444712207.8,1
TIME 0000000e 1444712212.8,1
TIME 0000000e 1444712217.8,1
TIME 0000000e 1444712222.8,1
TIME 0000000e 1444712227.8,1
TIME 0000000e 1444712232.8,1
TIME 0000000e 1444712237.8,1
TIME 0000000e 1444712242.8,1
TIME 0000000e 1444712247.8,1
TIME 0000000e 1444712252.8,1
TIME 0000000e 1444712257.8,1
TIME 0000000e 1444712262.8,1
TIME 0000000e 1444712267.8,1
TIME 0000000e 1444712272.8,1
TIME 0000000e 1444712277.8,1
TIME 0000000e 1444712282.8,1
TIME 0000000e 1444712287.8,1
TIME 0000000e 1444712292.8,1
TIME 0000000e 1444712297.8,1
TIME 0000000e 1444712302.8,1
TIME 0000000e 1444712307.8,1
TIME 0000000e 1444712312.8,1
TIME 0000000e 1444712317.8,1
TIME 0000000e 1444712322.8,1
TIME 0000000e 1444712327.8,1
TIME 0000000e 1444712332.8,1
TIME 0000000e 1444712337.8,1
TIME 0000000e 1444712342.8,1
TIME 0000000e 1444712347.8,1
TIME 0000000e 1444712352.8,1
TIME 0000000e 1444712357.8,1
TIME 0000000e 1444712362.8,1
TIME 0000000e 1444712367.8,1
TIME 0000000e 1444712372.8,1
TIME 0000000e 1444712377.8,1
TIME 0000000e 1444712382.8,1
TIME 0000000e 1444712387.8,1
TIME 0000000e 1444712392.8,1
TIME 0000000e 1444712397.8,1
TIME 0000000e 1444712402.8,1
TIME 0000000e 1444712407.8,1
TIME 0000000e 1444712412.8,1
TIME 0000000e 1444712417.8,1
TIME 0000000e 1444712422.8,1
TIME 0000000e 1444712427.8,1
TIME 0000000e 1444712432.8,1
TIME 0000000e 1444712437.8,1
TIME 0000000e 1444712442.8,1
TIME 0000000e 1444712447.8,1
TIME 0000000e 1444712452.8,1
TIME 0000000e 1444712457.8,1
TIME 0000000e 1444712462.8,1
TIME 0000000e 1444712467.8,1
TIME 0000000e 1444712472.8,1
TIME 0000000e 1444712477.8,1
TIME 0000000e 1444712482.8,1
TIME 0000000e 1444712487.8,1
TIME 0000000e 1444712492.8,1
TIME 0000000e 1444712497.8,1
TIME 0000000e 1444712502.8,1
TIME 0000000e 1444712507.8,1
TIME 0000000e 1444712512.8,1
TIME 0000000e 1444712517.8,1
TIME 0000000e 1444712522.8,1
TIME 0000000e 1444712527.8,1
TIME 0000000e 1444712532.8,1
TIME 0000000e 1444712537.8,1
TIME 0000000e 1444712542.8,1
TIME 0000000e 1444712547.8,1
TIME 0000000e 1444712552.8,1
TIME 0000000e 1444712557.8,1
TIME 0000000e 1444712562.8,1
TIME 0000000e 1444712567.8,1
TIME 0000000e 1444712572.8,1
TIME 0000000e 1444712577.8,1
TIME 0000000e 1444712582.8,1
TIME 0000000e 1444712587.8,1
TIME 0000000e 1444712592.8,1
TIME 0000000e 1444712597.8,1
TIME 0000000e 1444712602.8,1
TIME 0000000e 1444712607.8,1
TIME 0000000e 1444712612.8,1
TIME 0000000e 1444712617.8,1
TIME 0000000e 1444712622.8,1
TIME 0000000e 1444712627.8,1
TIME 0000000e 1444712632.8,1
TIME 0000000e 1444712637.8,1
TIME 0000000e 1444712642.8,1
TIME 0000000e 1444712647.8,1
TIME 0000000e 1444712652.8,1
TIME 0000000e 1444712657.8,1
TIME 0000000e 1444712662.8,1
TIME 0000000e 1444712667.8,1
TIME 0000000e 1444712672.8,1
TIME 0000000e 1444712677.8,1
TIME 0000000e 1444712682.8,1
TIME 0000000e 1444712687.8,1
TIME 0000000e 1444712692.8,1
TIME 0000000e 1444712697.8,1
TIME 0000000e 1444712702.8,1
TIME 0000000e 1444712707.8,1
TIME 0000000e 1444712712.8,1
TIME 0000000e 1444712717.8,1
TIME 0000000e 1444712722.8,1
TIME 0000000e 1444712727.8,1
TIME 0000000e 1444712732.8,1
TIME 0000000e 1444712737.8,1
TIME 0000000e 1444712742.8,1
TIME 0000000e 1444712747.8,1
TIME 0000000e 1444712752.8,1
TIME 0000000e 1444712757.8,1
TIME 0000000e 1444712762.8,1
TIME 0000000e 1444712767.8,1
TIME 0000000e 1444712772.8,1
TIME 0000000e 1444712777.8,1
TIME 0000000e 1444712782.8,1
TIME 0000000e 1444712787.8,1
TIME 0000000e 1444712792.8,1
TIME 0000000e 1444712797.8,1
TIME 0000000e 1444712802.8,1
TIME 0000000e 1444712807.8,1
TIME 0000000e 1444712812.8,1
TIME 0000000e 1444712817.8,1
TIME 0000000e 1444712822.8,1
TIME 0000000e 1444712827.8,1
TIME 0000000e 1444712832.8,1
TIME 0000000e 1444712837.8,1
TIME 0000000e 1444712842.8,1
TIME 0000000e 1444712847.8,1
TIME 0000000e 1444712852.8,1
TIME 0000000e 1444712857.8,1
TIME 0000000e 1444712862.8,1
TIME 0000000e 1444712867.8,1
TIME 0000000e 1444712872.8,1
TIME 0000000e 1444712877.8,1
TIME 0000000e 1444712882.8,1
TIME 0000000e 1444712887.8,1
TIME 0000000e 1444712892.8,1
TIME 0000000e 1444712897.8,1
TIME 0000000e 1444712902.8,1
TIME 0000000e 1444712907.8,1
TIME 0000000e 1444712912.8,1
TIME 0000000e 1444712917.8,1
TIME 0000000e 1444712922.8,1
TIME 0000000e 1444712927.8,1
TIME 0000000e 1444712932.8,1
TIME 0000000e 1444712937.8,1
TIME 0000000e 1444712942.8,1
TIME 0000000e 1444712947.8,1
TIME 0000000e 1444712952.8,1
TIME 0000000e 1444712957.8,1
TIME 0000000e 1444712962.8,1
TIME 0000000e 1444712967.8,1
TIME 0000000e 1444712972.8,1
TIME 0000000e 1444712977.8,1
TIME 0000000e 1444712982.8,1
TIME 0000000e 1444712987.8,1
TIME 0000000e 1444712992.8,1
TIME 0000000e 1444712997.8,1
TIME 0000000e 1444713002.8,1
TIME 0000000e 1444713007.8,1
TIME 0000000e 1444713012.8,1
TIME 0000000e 1444713017.8,1
TIME 0000000e 1444713022.8,1
TIME 0000000e 1444713027.8,1
TIME 0000000e 1444713032.8,1
TIME 0000000e 1444713037.8,1
TIME 0000000e 1444713042.8,1
TIME 0000000e 1444713047.8,1
TIME 0000000e 1444713052.8,1
TIME 0000000e 1444713057.8,1
TIME 0000000e 1444713062.8,1
TIME 0000000e 1444713067.8,1
TIME 0000000e 1444713072.8,1
TIME 0000000e 1444713077.8,1
TIME 0000000e 1444713082.8,1
TIME 0000000e 1444713087.8,1
TIME 0000000e 1444713092.8,1
TIME 0000000e 1444713097.8,1
TIME 0000000e 1444713102.8,1
TIME 0000000e 1444713107.8,1
TIME 0000000e 1444713112.8,1
TIME 0000000e 1444713117.8,1
TIME 0000000e 1444713122.8,1
TIME 0000000e 1444713127.8,1
TIME 0000000e 1444713132.8,1
TIME 0000000e 1444713137.8,1
TIME 0000000e 1444713142.8,1
TIME 0000000e 1444713147.8,1
TIME 0000000e 1444713152.8,1
TIME 0000000e 1444713157.8,1
TIME 0000000e 1444713162.8,1
TIME 0000000e 1444713167.8,1
TIME 0000000e 1444713172.8,1
TIME 0000000e 1444713177.8,1
TIME 0000000e 1444713182.8,1
TIME 0000000e 1444713187.8,1
TIME 0000000e 1444713192.8,1
TIME 0000000e 1444713197.8,1
TIME 0000000e 1444713202.8,1
TIME 0000000e 1444713207.8,1
TIME 0000000e 1444713212.8,1
TIME 0000000e 1444713217.8,1
TIME 0000000e 1444713222.8,1
TIME 0000000e 1444713227.8,1
TIME 0000000e 1444713232.8,1
TIME 0000000e 1444713237.8,1
TIME 0000000e 1444713242.8,1
TIME 0000000e 1444713247.8,1
TIME 0000000e 1444713252.8,1
TIME 0000000e 1444713257.8,1
TIME 0000000e 1444713262.8,1
TIME 0000000e 1444713267.8,1
TIME 0000000e 1444713272.8,1
TIME 0000000e 1444713277.8,1
TIME 0000000e 1444713282.8,1
TIME 0000000e 1444713287.8,1
TIME 0000000e 1444713292.8,1
TIME 0000000e 1444713297.8,1
TIME 0000000e 1444713302.8,1
TIME 0000000e 1444713307.8,1
TIME 0000000e 1444713312.8,1
TIME 0000000e 1444713317.8,1
TIME 0000000e 1444713322.8,1
TIME 0000000e 1444713327.8,1
TIME 0000000e 1444713332.8,1
TIME 0000000e 1444713337.8,1
TIME 0000000e 1444713342.8,1
TIME 0000000e 1444713347.8,1
TIME 0000000e 1444713352.8,1
TIME 0000000e 1444713357.8,1
TIME 0000000e 1444713362.8,1
TIME 0000000e 1444713367.8,1
TIME 0000000e 1444713372.8,1
TIME 0000000e 1444713377.8,1
TIME 0000000e 1444713382.8,1
TIME 0000000e 1444713387.8,1
TIME 0000000e 1444713392.8,1
TIME 0000000e 1444713397.8,1
TIME 0000000e 1444713402.8,1
TIME 0000000e 1444713407.8,1
TIME 0000000e 1444713412.8,1
TIME 0000000e 1444713417.8,1
TIME 0000000e 1444713422.8,1
TIME 0000000e 1444713427.8,1
TIME 0000000e 1444713432.8,1
TIME 0000000e 1444713437.8,1
TIME 0000000e 1444713442.8,1
TIME 0000000e 1444713447.8,1
TIME 0000000e 1444713452.8,1
TIME 0000000e 1444713457.8,1
TIME 0000000e 1444713462.8,1
TIME 0000000e 1444713467.8,1
TIME 0000000e 1444713472.8,1
TIME 0000000e 1444713477.8,1
TIME 0000000e 1444713482.8,1
TIME 0000000e 1444713487.8,1
TIME 0000000e 1444713492.8,1
TIME 0000000e 1444713497.8,1
TIME 0000000e 1444713502.8,1
TIME 0000000e 1444713507.8,1
TIME 0000000e 1444713512.8,1
TIME 0000000e 1444713517.8,1
TIME 0000000e 1444713522.8,1
TIME 0000000e 1444713527.8,1
TIME 0000000e 1444713532.8,1
TIME 0000000e 1444713537.8,1
TIME 0000000e 1444713542.8,1
TIME 0000000e 1444713547.8,1
TIME 0000000e 1444713552.8,1
TIME 0000000e 1444713557.8,1
TIME 0000000e 1444713562.8,1
TIME 0000000e 1444713567.8,1
TIME 0000000e 1444713572.8,1
TIME 0000000e 1444713577.8,1
TIME 0000000e 1444713582.8,1
TIME 0000000e 1444713587.8,1
TIME 0000000e 1444713592.8,1
TIME 0000000e 1444713597.8,1
TIME 0000000e 1444713602.8,1
TIME 0000000e 1444713607.8,1
TIME 0000000e 1444713612.8,1
TIME 0000000e 1444713617.8,1
TIME 0000000e 1444713622.8,1
TIME 0000000e 1444713627.8,1
TIME 0000000e 1444713632.8,1
TIME 0000000e 1444713637.8,1
TIME 0000000e 1444713642.8,1
TIME 0000000e 1444713647.8,1
TIME 0000000e 1444713652.8,1
TIME 0000000e 1444713657.8,1
TIME 0000000e 1444713662.8,1
TIME 0000000e 1444713667.8,1
TIME 0000000e 1444713672.8,1
TIME 0000000e 1444713677.8,1
TIME 0000000e 1444713682.8,1
TIME 0000000e 1444713687.8,1
TIME 0000000e 1444713692.8,1
TIME 0000000e 1444713697.8,1
TIME 0000000e 1444713702.8,1
TIME 0000000e 1444713707.8,1
TIME 0000000e 1444713712.8,1
TIME 0000000e 1444713717.8,1
TIME 0000000e 1444713722.8,1
TIME 0000000e 1444713727.8,1
TIME 0000000e 1444713732.8,1
TIME 0000000e 1444713737.8,1
TIME 0000000e 1444713742.8,1
TIME 0000000e 1444713747.8,1
TIME 0000000e 1444713752.8,1
TIME 0000000e 1444713757.8,1
TIME 0000000e 1444713762.8,1
TIME 0000000e 1444713767.8,1
TIME 0000000e 1444713772.8,1
TIME 0000000e 1444713777.8,1
TIME 0000000e 1444713782.8,1
TIME 0000000e 1444713787.8,1
TIME 0000000e 1444713792.8,1
TIME 0000000e 1444713797.8,1
TIME 0000000e 1444713802.8,1
TIME 0000000e 1444713807.8,1
TIME 0000000e 1444713812.8,1
TIME 0000000e 1444713817.8,1
TIME 0000000e 1444713822.8,1
TIME 0000000e 1444713827.8,1
TIME 0000000e 1444713832.8,1
TIME 0000000e 1444713837.8,1
TIME 0000000e 1444713842.8,1
TIME 0000000e 1444713847.8,1
TIME 0000000e 1444713852.8,1
TIME 0000000e 1444713857.8,1
TIME 0000000e 1444713862.8,1
TIME 0000000e 1444713867.8,1
TIME 0000000e 1444713872.8,1
TIME 0000000e 1444713877.8,1
TIME 0000000e 1444713882.8,1
TIME 0000000e 1444713887.8,1
TIME 0000000e 1444713892.8,1
TIME 0000000e 1444713897.8,1
TIME 0000000e 1444713902.8,1
TIME 0000000e 1444713907.8,1
TIME 0000000e 1444713912.8,1
TIME 0000000e 1444713917.8,1
TIME 0000000e 1444713922.8,1
TIME 0000000e 1444713927.8,1
TIME 0000000e 1444713932.8,1
TIME 0000000e 1444713937.8,1
TIME 0000000e 1444713942.8,1
TIME 0000000e 1444713947.8,1
TIME 0000000e 1444713952.8,1
TIME 0000000e 1444713957.8,1
TIME 0000000e 1444713962.8,1
TIME 0000000e 1444713967.8,1
TIME 0000000e 1444713972.8,1
TIME 0000000e 1444713977.8,1
TIME 0000000e 1444713982.8,1
TIME 0000000e 1444713987.8,1
TIME 0000000e 1444713992.8,1
TIME 0000000e 1444713997.8,1
TIME 0000000e 1444714002.8,1
TIME 0000000e 1444714007.8,1
TIME 0000000e 1444714012.8,1
TIME 0000000e 1444714017.8,1
TIME 0000000e 1444714022.8,1
TIME 0000000e 1444714027.8,1
TIME 0000000e 1444714032.8,1
TIME 0000000e 1444714037.8,1
TIME 0000000e 1444714042.8,1
TIME 0000000e 1444714047.8,1
TIME 0000000e 1444714052.8,1
TIME 0000000e 1444714057.8,1
TIME 0000000e 1444714062.8,1
TIME 0000000e 1444714067.8,1
TIME 0000000e 1444714072.8,1
TIME 0000000e 1444714077.8,1
TIME 0000000e 1444714082.8,1
TIME 0000000e 1444714087.8,1
TIME 0000000e 1444714092.8,1
TIME 0000000e 1444714097.8,1
TIME 0000000e 1444714102.8,1
TIME 0000000e 1444714107.8,1
TIME 0000000e 1444714112.8,1
TIME 0000000e 1444714117.8,1
TIME 0000000e 1444714122.8,1
TIME 0000000e 1444714127.8,1
TIME 0000000e 1444714132.8,1
TIME 0000000e 1444714137.8,1
TIME 0000000e 1444714142.8,1
TIME 0000000e 1444714147.8,1
TIME 0000000e 1444714152.8,1
TIME 0000000e 1444714157.8,1
TIME 0000000e 1444714162.8,1
TIME 0000000e 1444714167.8,1
TIME 0000000e 1444714172.8,1
TIME 0000000e 1444714177.8,1
TIME 0000000e 1444714182.8,1
TIME 0000000e 1444714187.8,1
TIME 0000000e 1444714192.8,1
TIME 0000000e 1444714197.8,1
TIME 0000000e 1444714202.8,1
TIME 0000000e 1444714207.8,1
TIME 0000000e 1444714212.8,1
TIME 0000000e 1444714217.8,1
TIME 0000000e 1444714222.8,1
TIME 0000000e 1444714227.8,1
TIME 0000000e 1444714232.8,1
TIME 0000000e 1444714237.8,1
TIME 0000000e 1444714242.8,1
TIME 0000000e 1444714247.8,1
TIME 0000000e 1444714252.8,1
TIME 0000000e 1444714257.8,1
TIME 0000000e 1444714262.8,1
TIME 0000000e 1444714267.8,1
TIME 0000000e 1444714272.8,1
TIME 0000000e 1444714277.8,1
TIME 0000000e 1444714282.8,1
TIME 0000000e 1444714287.8,1
TIME 0000000e 1444714292.8,1
TIME 0000000e 1444714297.8,1
TIME 0000000e 1444714302.8,1
TIME 0000000e 1444714307.8,1
TIME 0000000e 1444714312.8,1
TIME 0000000e 1444714317.8,1
TIME 0000000e 1444714322.8,1
TIME 0000000e 1444714327.8,1
TIME 0000000e 1444714332.8,1
TIME 0000000e 1444714337.8,1
TIME 0000000e 1444714342.8,1
TIME 0000000e 1444714347.8,1
TIME 0000000e 1444714352.8,1
TIME 0000000e 1444714357.8,1
TIME 0000000e 1444714362.8,1
TIME 0000000e 1444714367.8,1
TIME 0000000e 1444714372.8,1
TIME 0000000e 1444714377.8,1
TIME 0000000e 1444714382.8,1
TIME 0000000e 1444714387.8,1
TIME 0000000e 1444714392.8,1
TIME 0000000e 1444714397.8,1
TIME 0000000e 1444714402.8,1
TIME 0000000e 1444714407.8,1
TIME 0000000e 1444714412.8,1
TIME 0000000e 1444714417.8,1
TIME 0000000e 1444714422.8,1
TIME 0000000e 1444714427.8,1
TIME 0000000e 1444714432.8,1
TIME 0000000e 1444714437.8,1
TIME 0000000e 1444714442.8,1
TIME 0000000e 1444714447.8,1
TIME 0000000e 1444714452.8,1
TIME 0000000e 1444714457.8,1
TIME 0000000e 1444714462.8,1
TIME 0000000e 1444714467.8,1
TIME 0000000e 1444714472.8,1
TIME 0000000e 1444714477.8,1
TIME 0000000e 1444714482.8,1
TIME 0000000e 1444714487.8,1
TIME 0000000e 1444714492.8,1
TIME 0000000e 1444714497.8,1
TIME 0000000e 1444714502.8,1
TIME 0000000e 1444714507.8,1
TIME 0000000e 1444714512.8,1
TIME 0000000e 1444714517.8,1
TIME 0000000e 1444714522.8,1
TIME 0000000e 1444714527.8,1
TIME 0000000e 1444714532.8,1
TIME 0000000e 1444714537.8,1
TIME 0000000e 1444714542.8,1
TIME 0000000e 1444714547.8,1
TIME 0000000e 1444714552.8,1
TIME 0000000e 1444714557.8,1
TIME 0000000e 1444714562.8,1
TIME 0000000e 1444714567.8,1
TIME 0000000e 1444714572.8,1
TIME 0000000e 1444714577.8,1
TIME 0000000e 1444714582.8,1
TIME 0000000e 1444714587.8,1
TIME 0000000e 1444714592.8,1
TIME 0000000e 1444714597.8,1
TIME 0000000e 1444714602.8,1
TIME 0000000e 1444714607.8,1
TIME 0000000e 1444714612.8,1
TIME 0000000e 1444714617.8,1
TIME 0000000e 1444714622.8,1
TIME 0000000e 1444714627.8,1
TIME 0000000e 1444714632.8,1
TIME 0000000e 1444714637.8,1
TIME 0000000e 1444714642.8,1
TIME 0000000e 1444714647.8,1
TIME 0000000e 1444714652.8,1
TIME 0000000e 1444714657.8,1
TIME 0000000e 1444714662.8,1
TIME 0000000e 1444714667.8,1
TIME 0000000e 1444714672.8,1
TIME 0000000e 1444714677.8,1
TIME 0000000e 1444714682.8,1
TIME 0000000e 1444714687.8,1
TIME 0000000e 1444714692.8,1
TIME 0000000e 1444714697.8,1
TIME 0000000e 1444714702.8,1
TIME 0000000e 1444714707.8,1
TIME 0000000e 1444714712.8,1
TIME 0000000e 1444714717.8,1
TIME 0000000e 1444714722.8,1
TIME 0000000e 1444714727.8,1
TIME 0000000e 1444714732.8,1
TIME 0000000e 1444714737.8,1
TIME 0000000e 1444714742.8,1
TIME 0000000e 1444714747.8,1
TIME 0000000e 1444714752.8,1
TIME 0000000e 1444714757.8,1
TIME 0000000e 1444714762.8,1
TIME 0000000e 1444714767.8,1
TIME 0000000e 1444714772.8,1
TIME 0000000e 1444714777.8,1
TIME 0000000e 1444714782.8,1
TIME 0000000e 1444714787.8,1
TIME 0000000e 1444714792.8,1
TIME 0000000e 1444714797.8,1
TIME 0000000e 1444714802.8,1
TIME 0000000e 1444714807.8,1
TIME 0000000e 1444714812.8,1
TIME 0000000e 1444714817.8,1
TIME 0000000e 1444714822.8,1
TIME 0000000e 1444714827.8,1
TIME 0000000e 1444714832.8,1
TIME 0000000e 1444714837.8,1
TIME 0000000e 1444714842.8,1
TIME 0000000e 1444714847.8,1
TIME 0000000e 1444714852.8,1
TIME 0000000e 1444714857.8,1
TIME 0000000e 1444714862.8,1
TIME 0000000e 1444714867.8,1
TIME 0000000e 1444714872.8,1
TIME 0000000e 1444714877.8,1
TIME 0000000e 1444714882.8,1
TIME 0000000e 1444714887.8,1
TIME 0000000e 1444714892.8,1
TIME 0000000e 1444714897.8,1
TIME 0000000e 1444714902.8,1
TIME 0000000e 1444714907.8,1
TIME 0000000e 1444714912.8,1
TIME 0000000e 1444714917.8,1
TIME 0000000e 1444714922.8,1
TIME 0000000e 1444714927.8,1
TIME 0000000e 1444714932.8,1
TIME 0000000e 1444714937.8,1
TIME 0000000e 1444714942.8,1
TIME 0000000e 1444714947.8,1
TIME 0000000e 1444714952.8,1
TIME 0000000e 1444714957.8,1
TIME 0000000e 1444714962.8,1
TIME 0000000e 1444714967.8,1
TIME 0000000e 1444714972.8,1
TIME 0000000e 1444714977.8,1
TIME 0000000e 1444714982.8,1
TIME 0000000e 1444714987.8,1
TIME 0000000e 1444714992.8,1
TIME 0000000e 1444714997.8,1
TIME 0000000e 1444715002.8,1
TIME 0000000e 1444715007.8,1
TIME 0000000e 1444715012.8,1
TIME 0000000e 1444715017.8,1
TIME 0000000e 1444715022.8,1
TIME 0000000e 1444715027.8,1
TIME 0000000e 1444715032.8,1
TIME 0000000e 1444715037.8,1
TIME 0000000e 1444715042.8,1
TIME 0000000e 1444715047.8,1
TIME 0000000e 1444715052.8,1
TIME 0000000e 1444715057.8,1
TIME 0000000e 1444715062.8,1
TIME 0000000e 1444715067.8,1
TIME 0000000e 1444715072.8,1
TIME 0000000e 1444715077.8,1
TIME 0000000e 1444715082.8,1
TIME 0000000e 1444715087.8,1
TIME 0000000e 1444715092.8,1
TIME 0000000e 1444715097.8,1
TIME 0000000e 1444715102.8,1
TIME 0000000e 1444715107.8,1
TIME 0000000e 1444715112.8,1
TIME 0000000e 1444715117.8,1
TIME 0000000e 1444715122.8,1
TIME 0000000e 1444715127.8,1
TIME 0000000e 1444715132.8,1
TIME 0000000e 1444715137.8,1
TIME 0000000e 1444715142.8,1
TIME 0000000e 1444715147.8,1
TIME 0000000e 1444715152.8,1
TIME 0000000e 1444715157.8,1
TIME 0000000e 1444715162.8,1
TIME 0000000e 1444715167.8,1
TIME 0000000e 1444715172.8,1
TIME 0000000e 1444715177.8,1
TIME 0000000e 1444715182.8,1
TIME 0000000e 1444715187.8,1
TIME 0000000e 1444715192.8,1
TIME 0000000e 1444715197.8,1
TIME 0000000e 1444715202.8,1
TIME 0000000e 1444715207.8,1
TIME 0000000e 1444715212.8,1
TIME 0000000e 1444715217.8,1
TIME 0000000e 1444715222.8,1
TIME 0000000e 1444715227.8,1
TIME 0000000e 1444715232.8,1
TIME 0000000e 1444715237.8,1
TIME 0000000e 1444715242.8,1
TIME 0000000e 1444715247.8,1
TIME 0000000e 1444715252.8,1
TIME 0000000e 1444715257.8,1
TIME 0000000e 1444715262.8,1
TIME 0000000e 1444715267.8,1
TIME 0000000e 1444715272.8,1
TIME 0000000e 1444715277.8,1
TIME 0000000e 1444715282.8,1
TIME 0000000e 1444715287.8,1
TIME 0000000e 1444715292.8,1
TIME 0000000e 1444715297.8,1
TIME 0000000e 1444715302.8,1
TIME 0000000e 1444715307.8,1
TIME 0000000e 1444715312.8,1
TIME 0000000e 1444715317.8,1
TIME 0000000e 1444715322.8,1
TIME 0000000e 1444715327.8,1
TIME 0000000e 1444715332.8,1
TIME 0000000e 1444715337.8,1
TIME 0000000e 1444715342.8,1
TIME 0000000e 1444715347.8,1
TIME 0000000e 1444715352.8,1
TIME 0000000e 1444715357.8,1
TIME 0000000e 1444715362.8,1
TIME 0000000e 1444715367.8,1
TIME 0000000e 1444715372.8,1
TIME 0000000e 1444715377.8,1
TIME 0000000e 1444715382.8,1
TIME 0000000e 1444715387.8,1
TIME 0000000e 1444715392.8,1
TIME 0000000e 1444715397.8,1
TIME 0000000e 1444715402.8,1
TIME 0000000e 1444715407.8,1
TIME 0000000e 1444715412.8,1
TIME 0000000e 1444715417.8,1
TIME 0000000e 1444715422.8,1
TIME 0000000e 1444715427.8,1
TIME 0000000e 1444715432.8,1
TIME 0000000e 1444715437.8,1
TIME 0000000e 1444715442.8,1
TIME 0000000e 1444715447.8,1
TIME 0000000e 1444715447.9,1
TIME 0000000e 1444715452.8,1
TIME 0000000e 1444715457.8,1
TIME 0000000e 1444715457.9,1
TIME 0000000e 1444715462.8,1
TIME 0000000e 1444715467.8,1
TIME 0000000e 1444715472.8,1
TIME 0000000e 1444715477.8,1
TIME 0000000e 1444715482.8,1
TIME 0000000e 1444715487.8,1
TIME 0000000e 1444715492.8,1
TIME 0000000e 1444715497.8,1
TIME 0000000e 1444715502.8,1
TIME 0000000e 1444715507.8,1
TIME 0000000e 1444715512.8,1
TIME 0000000e 1444715517.8,1
TIME 0000000e 1444715522.8,1
TIME 0000000e 1444715527.8,1
TIME 0000000e 1444715532.8,1
TIME 0000000e 1444715537.8,1
TIME 0000000e 1444715542.8,1
TIME 0000000e 1444715547.8,1
TIME 0000000e 1444715552.8,1
TIME 0000000e 1444715557.8,1
TIME 0000000e 1444715562.8,1
TIME 0000000e 1444715567.8,1
TIME 0000000e 1444715572.8,1
TIME 0000000e 1444715577.8,1
TIME 0000000e 1444715582.8,1
TIME 0000000e 1444715587.8,1
TIME 0000000e 1444715592.8,1
TIME 0000000e 1444715597.8,1
TIME 0000000e 1444715602.8,1
TIME 0000000e 1444715607.8,1
TIME 0000000e 1444715612.8,1
TIME 0000000e 1444715617.8,1
TIME 0000000e 1444715622.8,1
TIME 0000000e 1444715627.8,1
TIME 0000000e 1444715632.8,1
TIME 0000000e 1444715637.8,1
TIME 0000000e 1444715642.8,1
TIME 0000000e 1444715647.8,1
TIME 0000000e 1444715652.8,1
TIME 0000000e 1444715657.8,1
TIME 0000000e 1444715662.8,1
TIME 0000000e 1444715667.8,1
TIME 0000000e 1444715667.9,1
TIME 0000000c 1444715668,1
TIME 0000000e 1444715672.8,1
TIME 0000000e 1444715677.8,1
TIME 0000000e 1444715682.8,1
TIME 0000000e 1444715687.8,1
TIME 0000000e 1444715692.8,1
TIME 0000000e 1444715697.8,1
TIME 0000000e 1444715702.8,1
TIME 0000000e 1444715707.8,1
TIME 0000000e 1444715712.8,1
TIME 0000000e 1444715717.8,1
TIME 0000000e 1444715722.8,1
TIME 0000000e 1444715727.8,1
TIME 0000000e 1444715732.8,1
TIME 0000000e 1444715737.8,1
TIME 0000000e 1444715742.8,1
TIME 0000000e 1444715747.8,1
TIME 0000000e 1444715752.8,1
TIME 0000000e 1444715757.8,1
TIME 0000000e 1444715762.8,1
TIME 0000000e 1444715767.8,1
TIME 0000000e 1444715772.8,1
TIME 0000000e 1444715777.8,1
TIME 0000000e 1444715782.8,1
TIME 0000000e 1444715787.8,1
TIME 0000000e 1444715792.8,1
TIME 0000000e 1444715797.8,1
TIME 0000000e 1444715802.8,1
TIME 0000000e 1444715807.8,1
TIME 0000000e 1444715812.8,1
TIME 0000000e 1444715817.8,1
TIME 0000000e 1444715822.8,1
TIME 0000000e 1444715827.8,1
TIME 0000000e 1444715832.8,1
TIME 0000000e 1444715837.8,1
TIME 0000000e 1444715842.8,1
TIME 0000000e 1444715847.8,1
TIME 0000000e 1444715852.8,1
TIME 0000000e 1444715857.8,1
TIME 0000000e 1444715862.8,1
TIME 0000000e 1444715867.8,1
TIME 0000000e 1444715872.8,1
TIME 0000000e 1444715877.8,1
TIME 0000000e 1444715882.8,1
TIME 0000000e 1444715887.8,1
TIME 0000000e 1444715892.8,1
TIME 0000000e 1444715897.8,1
TIME 0000000e 1444715902.8,1
TIME 0000000e 1444715907.8,1
TIME 0000000e 1444715912.8,1
TIME 0000000e 1444715917.8,1
TIME 0000000e 1444715922.8,1
TIME 0000000e 1444715927.8,1
TIME 0000000e 1444715932.8,1
TIME 0000000e 1444715937.8,1
TIME 0000000e 1444715942.8,1
TIME 0000000e 1444715947.8,1
TIME 0000000e 1444715952.8,1
TIME 0000000e 1444715957.8,1
TIME 0000000e 1444715962.8,1
TIME 0000000e 1444715967.8,1
TIME 0000000e 1444715972.8,1
TIME 0000000e 1444715977.8,1
TIME 0000000e 1444715982.8,1
TIME 0000000e 1444715987.8,1
TIME 0000000e 1444715992.8,1
TIME 0000000e 1444715997.8,1
TIME 0000000e 1444716002.8,1
TIME 0000000e 1444716007.8,1
TIME 0000000e 1444716012.8,1
TIME 0000000e 1444716017.8,1
TIME 0000000e 1444716022.8,1
TIME 0000000e 1444716027.8,1
TIME 0000000e 1444716032.8,1
TIME 0000000e 1444716037.8,1
TIME 0000000e 1444716042.8,1
TIME 0000000e 1444716047.8,1
TIME 0000000e 1444716052.8,1
TIME 0000000e 1444716057.8,1
TIME 0000000e 1444716062.8,1
TIME 0000000e 1444716067.8,1
TIME 0000000e 1444716072.8,1
TIME 0000000e 1444716077.8,1
TIME 0000000e 1444716082.8,1
TIME 0000000e 1444716087.8,1
TIME 0000000e 1444716092.8,1
TIME 0000000e 1444716097.8,1
TIME 0000000e 1444716102.8,1
TIME 0000000e 1444716107.8,1
TIME 0000000e 1444716112.8,1
TIME 0000000e 1444716117.8,1
TIME 0000000e 1444716122.8,1
TIME 0000000e 1444716127.8,1
TIME 0000000e 1444716132.8,1
TIME 0000000e 1444716137.8,1
TIME 0000000e 1444716142.8,1
TIME 0000000e 1444716147.8,1
TIME 0000000e 1444716152.8,1
TIME 0000000e 1444716157.8,1
TIME 0000000e 1444716162.8,1
TIME 0000000e 1444716167.8,1
TIME 0000000e 1444716172.8,1
TIME 0000000e 1444716177.8,1
TIME 0000000e 1444716182.8,1
TIME 0000000e 1444716187.8,1
TIME 0000000e 1444716192.8,1
TIME 0000000e 1444716197.8,1
TIME 0000000e 1444716202.8,1
TIME 0000000e 1444716207.8,1
TIME 0000000e 1444716212.8,1
TIME 0000000e 1444716217.8,1
TIME 0000000e 1444716222.8,1
TIME 0000000e 1444716227.8,1
TIME 0000000e 1444716232.8,1
TIME 0000000e 1444716237.8,1
TIME 0000000e 1444716242.8,1
TIME 0000000e 1444716247.8,1
TIME 0000000e 1444716252.8,1
TIME 0000000e 1444716257.8,1
TIME 0000000e 1444716262.8,1
TIME 0000000e 1444716267.8,1
TIME 0000000e 1444716272.8,1
TIME 0000000e 1444716277.8,1
TIME 0000000e 1444716282.8,1
TIME 0000000e 1444716287.8,1
TIME 0000000e 1444716292.8,1
TIME 0000000e 1444716297.8,1
TIME 0000000e 1444716302.8,1
TIME 0000000e 1444716307.8,1
TIME 0000000e 1444716312.8,1
TIME 0000000e 1444716317.8,1
TIME 0000000e 1444716322.8,1
TIME 0000000e 1444716327.8,1
TIME 0000000e 1444716332.8,1
TIME 0000000e 1444716337.8,1
TIME 0000000e 1444716342.8,1
TIME 0000000e 1444716347.8,1
TIME 0000000e 1444716352.8,1
TIME 0000000e 1444716357.8,1
TIME 0000000e 1444716362.8,1
TIME 0000000e 1444716367.8,1
TIME 0000000e 1444716372.8,1
TIME 0000000e 1444716377.8,1
TIME 0000000e 1444716382.8,1
TIME 0000000e 1444716387.8,1
TIME 0000000e 1444716392.8,1
TIME 0000000e 1444716397.8,1
TIME 0000000e 1444716402.8,1
TIME 0000000e 1444716407.8,1
TIME 0000000e 1444716412.8,1
TIME 0000000e 1444716417.8,1
TIME 0000000e 1444716422.8,1
TIME 0000000e 1444716427.8,1
TIME 0000000e 1444716432.8,1
TIME 0000000e 1444716437.8,1
TIME 0000000e 1444716442.8,1
TIME 0000000e 1444716447.8,1
TIME 0000000e 1444716452.8,1
TIME 0000000e 1444716457.8,1
TIME 0000000e 1444716462.8,1
TIME 0000000e 1444716467.8,1
TIME 0000000e 1444716472.8,1
TIME 0000000e 1444716477.8,1
TIME 0000000e 1444716482.8,1
TIME 0000000e 1444716487.8,1
TIME 0000000e 1444716492.8,1
TIME 0000000e 1444716497.8,1
TIME 0000000e 1444716502.8,1
TIME 0000000e 1444716507.8,1
TIME 0000000e 1444716512.8,1
TIME 0000000e 1444716517.8,1
TIME 0000000e 1444716522.8,1
TIME 0000000e 1444716527.8,1
TIME 0000000e 1444716532.8,1
TIME 0000000e 1444716537.8,1
TIME 0000000e 1444716542.8,1
TIME 0000000e 1444716547.8,1
TIME 0000000e 1444716552.8,1
TIME 0000000e 1444716557.8,1
TIME 0000000e 1444716562.8,1
TIME 0000000e 1444716567.8,1
TIME 0000000e 1444716572.8,1
TIME 0000000e 1444716577.8,1
TIME 0000000e 1444716582.8,1
TIME 0000000e 1444716587.8,1
TIME 0000000e 1444716587.9,1
TIME 0000000e 1444716592.8,1
TIME 0000000e 1444716597.8,1
TIME 0000000e 1444716602.8,1
TIME 0000000e 1444716602.9,1
TIME 0000000e 1444716607.8,1
TIME 0000000e 1444716612.8,1
TIME 0000000e 1444716617.8,1
TIME 0000000e 1444716622.8,1
TIME 0000000e 1444716627.8,1
TIME 0000000e 1444716632.8,1
TIME 0000000e 1444716637.8,1
TIME 0000000e 1444716642.8,1
TIME 0000000e 1444716647.8,1
TIME 0000000e 1444716652.8,1
TIME 0000000e 1444716657.8,1
TIME 0000000e 1444716662.8,1
TIME 0000000e 1444716667.8,1
TIME 0000000e 1444716672.8,1
TIME 0000000e 1444716677.8,1
TIME 0000000e 1444716682.8,1
TIME 0000000e 1444716687.8,1
TIME 0000000e 1444716692.8,1
TIME 0000000e 1444716697.8,1
TIME 0000000e 1444716702.8,1
TIME 0000000e 1444716707.8,1
TIME 0000000e 1444716712.8,1
TIME 0000000e 1444716717.8,1
TIME 0000000e 1444716722.8,1
TIME 0000000e 1444716727.8,1
TIME 0000000e 1444716732.8,1
TIME 0000000e 1444716737.8,1
TIME 0000000e 1444716742.8,1
TIME 0000000e 1444716747.8,1
TIME 0000000e 1444716752.8,1
TIME 0000000e 1444716757.8,1
TIME 0000000e 1444716762.8,1
TIME 0000000e 1444716767.8,1
TIME 0000000e 1444716772.8,1
TIME 0000000e 1444716777.8,1
TIME 0000000e 1444716782.8,1
TIME 0000000e 1444716787.8,1
TIME 0000000e 1444716792.8,1
TIME 0000000e 1444716797.8,1
TIME 0000000e 1444716802.8,1
TIME 0000000e 1444716807.8,1
TIME 0000000e 1444716812.8,1
TIME 0000000e 1444716817.8,1
TIME 0000000e 1444716822.8,1
TIME 0000000e 1444716827.8,1
TIME 0000000e 1444716832.8,1
TIME 0000000e 1444716837.8,1
TIME 0000000e 1444716842.8,1
TIME 0000000e 1444716847.8,1
TIME 0000000e 1444716852.8,1
TIME 0000000e 1444716857.8,1
TIME 0000000e 1444716862.8,1
TIME 0000000e 1444716867.8,1
TIME 0000000e 1444716872.8,1
TIME 0000000e 1444716877.8,1
TIME 0000000e 1444716882.8,1
TIME 0000000e 1444716887.8,1
TIME 0000000e 1444716892.8,1
TIME 0000000e 1444716897.8,1
TIME 0000000e 1444716902.8,1
TIME 0000000e 1444716907.8,1
TIME 0000000e 1444716912.8,1
TIME 0000000e 1444716917.8,1
TIME 0000000e 1444716922.8,1
TIME 0000000e 1444716927.8,1
TIME 0000000e 1444716932.8,1
TIME 0000000e 1444716937.8,1
TIME 0000000e 1444716942.8,1
TIME 0000000e 1444716947.8,1
TIME 0000000e 1444716952.8,1
TIME 0000000e 1444716957.8,1
TIME 0000000e 1444716962.8,1
TIME 0000000e 1444716967.8,1
TIME 0000000e 1444716972.8,1
TIME 0000000e 1444716977.8,1
TIME 0000000e 1444716982.8,1
TIME 0000000e 1444716987.8,1
TIME 0000000e 1444716992.8,1
TIME 0000000e 1444716997.8,1
TIME 0000000e 1444717002.8,1
TIME 0000000e 1444717007.8,1
TIME 0000000e 1444717012.8,1
TIME 0000000e 1444717017.8,1
TIME 0000000e 1444717022.8,1
TIME 0000000e 1444717027.8,1
TIME 0000000e 1444717032.8,1
TIME 0000000e 1444717037.8,1
TIME 0000000e 1444717042.8,1
TIME 0000000e 1444717047.8,1
TIME 0000000e 1444717052.8,1
TIME 0000000e 1444717057.8,1
TIME 0000000e 1444717062.8,1
TIME 0000000e 1444717067.8,1
TIME 0000000e 1444717072.8,1
TIME 0000000e 1444717077.8,1
TIME 0000000e 1444717082.8,1
TIME 0000000e 1444717087.8,1
TIME 0000000e 1444717092.8,1
TIME 0000000e 1444717097.8,1
TIME 0000000e 1444717102.8,1
TIME 0000000e 1444717107.8,1
TIME 0000000e 1444717112.8,1
TIME 0000000e 1444717117.8,1
TIME 0000000e 1444717122.8,1
TIME 0000000e 1444717127.8,1
TIME 0000000e 1444717132.8,1
TIME 0000000e 1444717137.8,1
TIME 0000000e 1444717142.8,1
TIME 0000000e 1444717147.8,1
TIME 0000000e 1444717152.8,1
TIME 0000000e 1444717157.8,1
TIME 0000000e 1444717162.8,1
TIME 0000000e 1444717167.8,1
TIME 0000000e 1444717172.8,1
TIME 0000000e 1444717177.8,1
TIME 0000000e 1444717182.8,1
TIME 0000000e 1444717187.8,1
TIME 0000000e 1444717192.8,1
TIME 0000000e 1444717197.8,1
TIME 0000000e 1444717202.8,1
TIME 0000000e 1444717207.8,1
TIME 0000000e 1444717212.8,1
TIME 0000000e 1444717217.8,1
TIME 0000000e 1444717222.8,1
TIME 0000000e 1444717227.8,1
TIME 0000000e 1444717232.8,1
TIME 0000000e 1444717237.8,1
TIME 0000000e 1444717242.8,1
TIME 0000000e 1444717247.8,1
TIME 0000000e 1444717252.8,1
TIME 0000000e 1444717257.8,1
TIME 0000000e 1444717262.8,1
TIME 0000000e 1444717267.8,1
TIME 0000000e 1444717272.8,1
TIME 0000000e 1444717277.8,1
TIME 0000000e 1444717282.8,1
TIME 0000000e 1444717287.8,1
TIME 0000000e 1444717292.8,1
TIME 0000000e 1444717297.8,1
TIME 0000000e 1444717302.8,1
TIME 0000000e 1444717307.8,1
TIME 0000000e 1444717312.8,1
TIME 0000000e 1444717317.8,1
TIME 0000000e 1444717322.8,1
TIME 0000000e 1444717327.8,1
TIME 0000000e 1444717332.8,1
TIME 0000000e 1444717337.8,1
TIME 0000000e 1444717342.8,1
TIME 0000000e 1444717347.8,1
TIME 0000000e 1444717352.8,1
TIME 0000000e 1444717357.8,1
TIME 0000000e 1444717362.8,1
TIME 0000000e 1444717367.8,1
TIME 0000000e 1444717372.8,1
TIME 0000000e 1444717377.8,1
TIME 0000000e 1444717382.8,1
TIME 0000000e 1444717387.8,1
TIME 0000000e 1444717392.8,1
TIME 0000000e 1444717397.8,1
TIME 0000000e 1444717402.8,1
TIME 0000000e 1444717407.8,1
TIME 0000000e 1444717412.8,1
TIME 0000000e 1444717417.8,1
TIME 0000000e 1444717422.8,1
TIME 0000000e 1444717427.8,1
TIME 0000000e 1444717432.8,1
TIME 0000000e 1444717437.8,1
TIME 0000000e 1444717442.8,1
TIME 0000000e 1444717447.8,1
TIME 0000000e 1444717452.8,1
TIME 0000000e 1444717457.8,1
TIME 0000000e 1444717462.8,1
TIME 0000000e 1444717467.8,1
TIME 0000000e 1444717472.8,1
TIME 0000000e 1444717477.8,1
TIME 0000000e 1444717482.8,1
TIME 0000000e 1444717487.8,1
TIME 0000000e 1444717492.8,1
TIME 0000000e 1444717497.8,1
TIME 0000000e 1444717502.8,1
TIME 0000000e 1444717507.8,1
TIME 0000000e 1444717512.8,1
TIME 0000000e 1444717517.8,1
TIME 0000000e 1444717522.8,1
TIME 0000000e 1444717527.8,1
TIME 0000000e 1444717532.8,1
TIME 0000000e 1444717537.8,1
TIME 0000000e 1444717542.8,1
TIME 0000000e 1444717547.8,1
TIME 0000000e 1444717552.8,1
TIME 0000000e 1444717557.8,1
TIME 0000000e 1444717562.8,1
TIME 0000000e 1444717567.8,1
TIME 0000000e 1444717572.8,1
TIME 0000000e 1444717577.8,1
TIME 0000000e 1444717582.8,1
TIME 0000000e 1444717587.8,1
TIME 0000000e 1444717592.8,1
TIME 0000000e 1444717597.8,1
TIME 0000000e 1444717602.8,1
TIME 0000000e 1444717607.8,1
TIME 0000000e 1444717612.8,1
TIME 0000000e 1444717617.8,1
TIME 0000000e 1444717622.8,1
TIME 0000000e 1444717627.8,1
TIME 0000000e 1444717627.9,1
TIME 0000000e 1444717632.8,1
TIME 0000000e 1444717637.8,1
TIME 0000000e 1444717642.8,1
TIME 0000000e 1444717647.8,1
TIME 0000000e 1444717652.8,1
TIME 0000000e 1444717657.8,1
TIME 0000000e 1444717662.8,1
TIME 0000000e 1444717667.8,1
TIME 0000000e 1444717672.8,1
TIME 0000000e 1444717677.8,1
TIME 0000000e 1444717682.8,1
TIME 0000000e 1444717687.8,1
TIME 0000000e 1444717692.8,1
TIME 0000000e 1444717697.8,1
TIME 0000000e 1444717702.8,1
TIME 0000000e 1444717707.8,1
TIME 0000000e 1444717712.8,1
TIME 0000000e 1444717717.8,1
TIME 0000000e 1444717722.8,1
TIME 0000000e 1444717727.8,1
TIME 0000000e 1444717732.8,1
TIME 0000000e 1444717737.8,1
TIME 0000000e 1444717742.8,1
TIME 0000000e 1444717747.8,1
TIME 0000000e 1444717752.8,1
TIME 0000000e 1444717757.8,1
TIME 0000000e 1444717762.8,1
TIME 0000000e 1444717767.8,1
TIME 0000000e 1444717772.8,1
TIME 0000000e 1444717777.8,1
TIME 0000000e 1444717782.8,1
TIME 0000000e 1444717787.8,1
TIME 0000000e 1444717792.8,1
TIME 0000000e 1444717797.8,1
TIME 0000000e 1444717802.8,1
TIME 0000000e 1444717807.8,1
TIME 0000000e 1444717812.8,1
TIME 0000000e 1444717817.8,1
TIME 0000000e 1444717822.8,1
TIME 0000000e 1444717827.8,1
TIME 0000000e 1444717832.8,1
TIME 0000000e 1444717837.8,1
TIME 0000000e 1444717842.8,1
TIME 0000000e 1444717847.8,1
TIME 0000000e 1444717852.8,1
TIME 0000000e 1444717857.8,1
TIME 0000000e 1444717862.8,1
TIME 0000000e 1444717867.8,1
TIME 0000000e 1444717872.8,1
TIME 0000000e 1444717877.8,1
TIME 0000000e 1444717882.8,1
TIME 0000000e 1444717887.8,1
TIME 0000000e 1444717892.8,1
TIME 0000000e 1444717897.8,1
TIME 0000000e 1444717902.8,1
TIME 0000000e 1444717907.8,1
TIME 0000000e 1444717912.8,1
TIME 0000000e 1444717917.8,1
TIME 0000000e 1444717922.8,1
TIME 0000000e 1444717927.8,1
TIME 0000000e 1444717932.8,1
TIME 0000000e 1444717937.8,1
TIME 0000000e 1444717942.8,1
TIME 0000000e 1444717947.8,1
TIME 0000000e 1444717952.8,1
TIME 0000000e 1444717957.8,1
TIME 0000000e 1444717962.8,1
TIME 0000000e 1444717967.8,1
TIME 0000000e 1444717972.8,1
TIME 0000000e 1444717977.8,1
TIME 0000000e 1444717982.8,1
TIME 0000000e 1444717987.8,1
TIME 0000000e 1444717992.8,1
TIME 0000000e 1444717997.8,1
TIME 0000000e 1444718002.8,1
TIME 0000000e 1444718007.8,1
TIME 0000000e 1444718012.8,1
TIME 0000000e 1444718017.8,1
TIME 0000000e 1444718022.8,1
TIME 0000000e 1444718027.8,1
TIME 0000000e 1444718032.8,1
TIME 0000000e 1444718037.8,1
TIME 0000000e 1444718042.8,1
TIME 0000000e 1444718047.8,1
TIME 0000000e 1444718052.8,1
TIME 0000000e 1444718057.8,1
TIME 0000000e 1444718062.8,1
TIME 0000000e 1444718067.8,1
TIME 0000000e 1444718072.8,1
TIME 0000000e 1444718077.8,1
TIME 0000000e 1444718082.8,1
TIME 0000000e 1444718087.8,1
TIME 0000000e 1444718092.8,1
TIME 0000000e 1444718097.8,1
TIME 0000000e 1444718102.8,1
TIME 0000000e 1444718107.8,1
TIME 0000000e 1444718112.8,1
TIME 0000000e 1444718117.8,1
TIME 0000000e 1444718122.8,1
TIME 0000000e 1444718127.8,1
TIME 0000000e 1444718132.8,1
TIME 0000000e 1444718137.8,1
TIME 0000000e 1444718142.8,1
TIME 0000000e 1444718147.8,1
TIME 0000000e 1444718152.8,1
TIME 0000000e 1444718157.8,1
TIME 0000000e 1444718162.8,1
TIME 0000000e 1444718167.8,1
TIME 0000000e 1444718172.8,1
TIME 0000000e 1444718177.8,1
TIME 0000000e 1444718182.8,1
TIME 0000000e 1444718187.8,1
TIME 0000000e 1444718192.8,1
TIME 0000000e 1444718197.8,1
TIME 0000000e 1444718202.8,1
TIME 0000000e 1444718207.8,1
TIME 0000000e 1444718212.8,1
TIME 0000000e 1444718217.8,1
TIME 0000000e 1444718222.8,1
TIME 0000000e 1444718227.8,1
TIME 0000000e 1444718232.8,1
TIME 0000000e 1444718237.8,1
TIME 0000000e 1444718242.8,1
TIME 0000000e 1444718247.8,1
TIME 0000000e 1444718252.8,1
TIME 0000000e 1444718257.8,1
TIME 0000000e 1444718262.8,1
TIME 0000000e 1444718267.8,1
TIME 0000000e 1444718272.8,1
TIME 0000000e 1444718277.8,1
TIME 0000000e 1444718282.8,1
TIME 0000000e 1444718287.8,1
TIME 0000000e 1444718292.8,1
TIME 0000000e 1444718297.8,1
TIME 0000000e 1444718302.8,1
TIME 0000000e 1444718307.8,1
TIME 0000000e 1444718312.8,1
TIME 0000000e 1444718317.8,1
TIME 0000000e 1444718322.8,1
TIME 0000000e 1444718327.8,1
TIME 0000000e 1444718332.8,1
TIME 0000000e 1444718337.8,1
TIME 0000000e 1444718342.8,1
TIME 0000000e 1444718347.8,1
TIME 0000000e 1444718352.8,1
TIME 0000000e 1444718357.8,1
TIME 0000000e 1444718362.8,1
TIME 0000000e 1444718367.8,1
TIME 0000000e 1444718372.8,1
TIME 0000000e 1444718377.8,1
TIME 0000000e 1444718382.8,1
TIME 0000000e 1444718387.8,1
TIME 0000000e 1444718392.8,1
TIME 0000000e 1444718397.8,1
TIME 0000000e 1444718402.8,1
TIME 0000000e 1444718407.8,1
TIME 0000000e 1444718412.8,1
TIME 0000000e 1444718417.8,1
TIME 0000000e 1444718422.8,1
TIME 0000000e 1444718427.8,1
TIME 0000000e 1444718432.8,1
TIME 0000000e 1444718437.8,1
TIME 0000000e 1444718442.8,1
TIME 0000000e 1444718447.8,1
TIME 0000000e 1444718452.8,1
TIME 0000000e 1444718457.8,1
TIME 0000000e 1444718462.8,1
TIME 0000000e 1444718467.8,1
TIME 0000000e 1444718472.8,1
TIME 0000000e 1444718477.8,1
TIME 0000000e 1444718482.8,1
TIME 0000000e 1444718487.8,1
TIME 0000000e 1444718492.8,1
TIME 0000000e 1444718497.8,1
TIME 0000000e 1444718502.8,1
TIME 0000000e 1444718507.8,1
TIME 0000000e 1444718512.8,1
TIME 0000000e 1444718517.8,1
TIME 0000000e 1444718522.8,1
TIME 0000000e 1444718527.8,1
TIME 0000000e 1444718532.8,1
TIME 0000000e 1444718537.8,1
TIME 0000000e 1444718542.8,1
TIME 0000000e 1444718547.8,1
TIME 0000000e 1444718552.8,1
TIME 0000000e 1444718557.8,1
TIME 0000000e 1444718562.8,1
TIME 0000000e 1444718567.8,1
TIME 0000000e 1444718572.8,1
TIME 0000000e 1444718577.8,1
TIME 0000000e 1444718582.8,1
TIME 0000000e 1444718587.8,1
TIME 0000000e 1444718592.8,1
TIME 0000000e 1444718597.8,1
TIME 0000000e 1444718602.8,1
TIME 0000000e 1444718607.8,1
TIME 0000000e 1444718612.8,1
TIME 0000000e 1444718617.8,1
TIME 0000000e 1444718622.8,1
TIME 0000000e 1444718627.8,1
TIME 0000000e 1444718632.8,1
TIME 0000000e 1444718637.8,1
TIME 0000000e 1444718642.8,1
TIME 0000000e 1444718647.8,1
TIME 0000000e 1444718652.8,1
TIME 0000000e 1444718657.8,1
TIME 0000000e 1444718662.8,1
TIME 0000000e 1444718667.8,1
TIME 0000000e 1444718672.8,1
TIME 0000000e 1444718677.8,1
TIME 0000000e 1444718682.8,1
TIME 0000000e 1444718682.9,1
TIME 0000000e 1444718687.8,1
TIME 0000000e 1444718692.8,1
TIME 0000000e 1444718697.8,1
TIME 0000000e 1444718702.8,1
TIME 0000000e 1444718707.8,1
TIME 0000000e 1444718712.8,1
TIME 0000000e 1444718717.8,1
TIME 0000000e 1444718717.9,1
TIME 0000000e 1444718722.8,1
TIME 0000000e 1444718727.8,1
TIME 0000000e 1444718732.8,1
TIME 0000000e 1444718732.9,1
TIME 0000000e 1444718737.8,1
TIME 0000000e 1444718742.8,1
TIME 0000000e 1444718747.8,1
TIME 0000000e 1444718752.8,1
TIME 0000000e 1444718757.8,1
TIME 0000000e 1444718762.8,1
TIME 0000000e 1444718767.8,1
TIME 0000000e 1444718772.8,1
TIME 0000000e 1444718777.8,1
TIME 0000000e 1444718782.8,1
TIME 0000000e 1444718787.8,1
TIME 0000000e 1444718792.8,1
TIME 0000000e 1444718797.8,1
TIME 0000000e 1444718802.8,1
TIME 0000000e 1444718807.8,1
TIME 0000000e 1444718812.8,1
TIME 0000000e 1444718817.8,1
TIME 0000000e 1444718822.8,1
TIME 0000000e 1444718827.8,1
TIME 0000000e 1444718832.8,1
TIME 0000000e 1444718837.8,1
TIME 0000000e 1444718842.8,1
TIME 0000000e 1444718847.8,1
TIME 0000000e 1444718852.8,1
TIME 0000000e 1444718857.8,1
TIME 0000000e 1444718862.8,1
TIME 0000000e 1444718867.8,1
TIME 0000000e 1444718872.8,1
TIME 0000000e 1444718877.8,1
TIME 0000000e 1444718882.8,1
TIME 0000000e 1444718887.8,1
TIME 0000000e 1444718892.8,1
TIME 0000000e 1444718897.8,1
TIME 0000000e 1444718902.8,1
TIME 0000000e 1444718907.8,1
TIME 0000000e 1444718912.8,1
TIME 0000000e 1444718917.8,1
TIME 0000000e 1444718922.8,1
TIME 0000000e 1444718927.8,1
TIME 0000000e 1444718932.8,1
TIME 0000000e 1444718937.8,1
TIME 0000000e 1444718942.8,1
TIME 0000000e 1444718947.8,1
TIME 0000000e 1444718952.8,1
TIME 0000000e 1444718957.8,1
TIME 0000000e 1444718962.8,1
TIME 0000000e 1444718967.8,1
TIME 0000000e 1444718972.8,1
TIME 0000000e 1444718977.8,1
TIME 0000000e 1444718982.8,1
TIME 0000000e 1444718987.8,1
TIME 0000000e 1444718992.8,1
TIME 0000000e 1444718997.8,1
TIME 0000000e 1444719002.8,1
TIME 0000000e 1444719007.8,1
TIME 0000000e 1444719012.8,1
TIME 0000000e 1444719017.8,1
TIME 0000000e 1444719022.8,1
TIME 0000000e 1444719027.8,1
TIME 0000000e 1444719032.8,1
TIME 0000000e 1444719037.8,1
TIME 0000000e 1444719042.8,1
TIME 0000000e 1444719047.8,1
TIME 0000000e 1444719052.8,1
TIME 0000000e 1444719057.8,1
TIME 0000000e 1444719062.8,1
TIME 0000000e 1444719067.8,1
TIME 0000000e 1444719072.8,1
TIME 0000000e 1444719077.8,1
TIME 0000000e 1444719082.8,1
TIME 0000000e 1444719087.8,1
TIME 0000000e 1444719092.8,1
TIME 0000000e 1444719097.8,1
TIME 0000000e 1444719102.8,1
TIME 0000000e 1444719107.8,1
TIME 0000000e 1444719112.8,1
TIME 0000000e 1444719117.8,1
TIME 0000000e 1444719122.8,1
TIME 0000000e 1444719127.8,1
TIME 0000000e 1444719132.8,1
TIME 0000000e 1444719137.8,1
TIME 0000000e 1444719142.8,1
TIME 0000000e 1444719147.8,1
TIME 0000000e 1444719152.8,1
TIME 0000000e 1444719157.8,1
TIME 0000000e 1444719162.8,1
TIME 0000000e 1444719167.8,1
TIME 0000000e 1444719172.8,1
TIME 0000000e 1444719177.8,1
TIME 0000000e 1444719182.8,1
TIME 0000000e 1444719187.8,1
TIME 0000000e 1444719192.8,1
TIME 0000000e 1444719197.8,1
TIME 0000000e 1444719202.8,1
TIME 0000000e 1444719207.8,1
TIME 0000000e 1444719212.8,1
TIME 0000000e 1444719217.8,1
TIME 0000000e 1444719222.8,1
TIME 0000000e 1444719227.8,1
TIME 0000000e 1444719232.8,1
TIME 0000000e 1444719237.8,1
TIME 0000000e 1444719242.8,1
TIME 0000000e 1444719247.8,1
TIME 0000000e 1444719252.8,1
TIME 0000000e 1444719257.8,1
TIME 0000000e 1444719262.8,1
TIME 0000000e 1444719267.8,1
TIME 0000000e 1444719272.8,1
TIME 0000000e 1444719277.8,1
TIME 0000000e 1444719282.8,1
TIME 0000000e 1444719287.8,1
TIME 0000000e 1444719292.8,1
TIME 0000000e 1444719297.8,1
TIME 0000000e 1444719302.8,1
TIME 0000000e 1444719307.8,1
TIME 0000000e 1444719312.8,1
TIME 0000000e 1444719317.8,1
TIME 0000000e 1444719322.8,1
TIME 0000000e 1444719327.8,1
TIME 0000000e 1444719332.8,1
TIME 0000000e 1444719337.8,1
TIME 0000000e 1444719342.8,1
TIME 0000000e 1444719347.8,1
TIME 0000000e 1444719352.8,1
TIME 0000000e 1444719357.8,1
TIME 0000000e 1444719362.8,1
TIME 0000000e 1444719367.8,1
TIME 0000000e 1444719372.8,1
TIME 0000000e 1444719377.8,1
TIME 0000000e 1444719382.8,1
TIME 0000000e 1444719387.8,1
TIME 0000000e 1444719392.8,1
TIME 0000000e 1444719397.8,1
TIME 0000000e 1444719402.8,1
TIME 0000000e 1444719407.8,1
TIME 0000000e 1444719412.8,1
TIME 0000000e 1444719417.8,1
TIME 0000000e 1444719422.8,1
TIME 0000000e 1444719427.8,1
TIME 0000000e 1444719432.8,1
TIME 0000000e 1444719437.8,1
TIME 0000000e 1444719442.8,1
TIME 0000000e 1444719447.8,1
TIME 0000000e 1444719452.8,1
TIME 0000000e 1444719457.8,1
TIME 0000000e 1444719462.8,1
TIME 0000000e 1444719467.8,1
TIME 0000000e 1444719472.8,1
TIME 0000000e 1444719477.8,1
TIME 0000000e 1444719482.8,1
TIME 0000000e 1444719487.8,1
TIME 0000000e 1444719492.8,1
TIME 0000000e 1444719497.8,1
TIME 0000000e 1444719502.8,1
TIME 0000000e 1444719507.8,1
TIME 0000000e 1444719512.8,1
TIME 0000000e 1444719517.8,1
TIME 0000000e 1444719522.8,1
TIME 0000000e 1444719527.8,1
TIME 0000000e 1444719532.8,1
TIME 0000000e 1444719537.8,1
TIME 0000000e 1444719542.8,1
TIME 0000000e 1444719547.8,1
TIME 0000000e 1444719552.8,1
TIME 0000000e 1444719557.8,1
TIME 0000000e 1444719562.8,1
TIME 0000000e 1444719567.8,1
TIME 0000000e 1444719572.8,1
TIME 0000000e 1444719577.8,1
TIME 0000000e 1444719582.8,1
TIME 0000000e 1444719587.8,1
TIME 0000000e 1444719592.8,1
TIME 0000000e 1444719597.8,1
TIME 0000000e 1444719602.8,1
TIME 0000000e 1444719607.8,1
TIME 0000000e 1444719612.8,1
TIME 0000000e 1444719617.8,1
TIME 0000000e 1444719622.8,1
TIME 0000000e 1444719627.8,1
TIME 0000000e 1444719632.8,1
TIME 0000000e 1444719637.8,1
TIME 0000000e 1444719642.8,1
TIME 0000000e 1444719647.8,1
TIME 0000000e 1444719652.8,1
TIME 0000000e 1444719657.8,1
TIME 0000000e 1444719662.8,1
TIME 0000000e 1444719667.8,1
TIME 0000000e 1444719672.8,1
TIME 0000000e 1444719677.8,1
TIME 0000000e 1444719682.8,1
TIME 0000000e 1444719687.8,1
TIME 0000000e 1444719692.8,1
TIME 0000000e 1444719697.8,1
TIME 0000000e 1444719702.8,1
TIME 0000000e 1444719707.8,1
TIME 0000000e 1444719712.8,1
TIME 0000000e 1444719717.8,1
TIME 0000000e 1444719722.8,1
TIME 0000000e 1444719727.8,1
TIME 0000000e 1444719732.8,1
TIME 0000000e 1444719737.8,1
TIME 0000000e 1444719742.8,1
TIME 0000000e 1444719747.8,1
TIME 0000000e 1444719752.8,1
TIME 0000000e 1444719757.8,1
TIME 0000000e 1444719762.8,1
TIME 0000000e 1444719767.8,1
TIME 0000000e 1444719772.8,1
TIME 0000000e 1444719777.8,1
TIME 0000000e 1444719782.8,1
TIME 0000000e 1444719787.8,1
TIME 0000000e 1444719792.8,1
TIME 0000000e 1444719797.8,1
TIME 0000000e 1444719802.8,1
TIME 0000000e 1444719807.8,1
TIME 0000000e 1444719812.8,1
TIME 0000000e 1444719817.8,1
TIME 0000000e 1444719822.8,1
TIME 0000000e 1444719827.8,1
TIME 0000000e 1444719832.8,1
TIME 0000000e 1444719837.8,1
TIME 0000000e 1444719842.8,1
TIME 0000000e 1444719847.8,1
TIME 0000000e 1444719852.8,1
TIME 0000000e 1444719857.8,1
TIME 0000000e 1444719862.8,1
TIME 0000000e 1444719867.8,1
TIME 0000000e 1444719872.8,1
TIME 0000000e 1444719877.8,1
TIME 0000000e 1444719882.8,1
TIME 0000000e 1444719887.8,1
TIME 0000000e 1444719892.8,1
TIME 0000000e 1444719897.8,1
TIME 0000000e 1444719902.8,1
TIME 0000000e 1444719907.8,1
TIME 0000000e 1444719912.8,1
TIME 0000000e 1444719917.8,1
TIME 0000000e 1444719922.8,1
TIME 0000000e 1444719927.8,1
TIME 0000000e 1444719932.8,1
TIME 0000000e 1444719937.8,1
TIME 0000000e 1444719942.8,1
TIME 0000000e 1444719947.8,1
TIME 0000000e 1444719952.8,1
TIME 0000000e 1444719957.8,1
TIME 0000000e 1444719962.8,1
TIME 0000000e 1444719967.8,1
TIME 0000000e 1444719972.8,1
TIME 0000000e 1444719977.8,1
TIME 0000000e 1444719982.8,1
TIME 0000000e 1444719987.8,1
TIME 0000000e 1444719992.8,1
TIME 0000000e 1444719997.8,1
TIME 0000000e 1444720002.8,1
TIME 0000000e 1444720007.8,1
TIME 0000000e 1444720012.8,1
TIME 0000000e 1444720017.8,1
TIME 0000000e 1444720022.8,1
TIME 0000000e 1444720027.8,1
TIME 0000000e 1444720032.8,1
TIME 0000000e 1444720037.8,1
TIME 0000000e 1444720042.8,1
TIME 0000000e 1444720047.8,1
TIME 0000000e 1444720052.8,1
TIME 0000000e 1444720057.8,1
TIME 0000000e 1444720062.8,1
TIME 0000000e 1444720067.8,1
TIME 0000000e 1444720072.8,1
TIME 0000000e 1444720077.8,1
TIME 0000000e 1444720082.8,1
TIME 0000000e 1444720087.8,1
TIME 0000000e 1444720092.8,1
TIME 0000000e 1444720097.8,1
TIME 0000000e 1444720102.8,1
TIME 0000000e 1444720107.8,1
TIME 0000000e 1444720112.8,1
TIME 0000000e 1444720117.8,1
TIME 0000000e 1444720122.8,1
TIME 0000000e 1444720127.8,1
TIME 0000000e 1444720132.8,1
TIME 0000000e 1444720137.8,1
TIME 0000000e 1444720142.8,1
TIME 0000000e 1444720147.8,1
TIME 0000000e 1444720152.8,1
TIME 0000000e 1444720157.8,1
TIME 0000000e 1444720162.8,1
TIME 0000000e 1444720167.8,1
TIME 0000000e 1444720172.8,1
TIME 0000000e 1444720177.8,1
TIME 0000000e 1444720182.8,1
TIME 0000000e 1444720187.8,1
TIME 0000000e 1444720192.8,1
TIME 0000000e 1444720197.8,1
TIME 0000000e 1444720202.8,1
TIME 0000000e 1444720207.8,1
TIME 0000000e 1444720212.8,1
TIME 0000000e 1444720217.8,1
TIME 0000000e 1444720222.8,1
TIME 0000000e 1444720227.8,1
TIME 0000000e 1444720232.8,1
TIME 0000000e 1444720237.8,1
TIME 0000000e 1444720242.8,1
TIME 0000000e 1444720247.8,1
TIME 0000000e 1444720252.8,1
TIME 0000000e 1444720257.8,1
TIME 0000000e 1444720262.8,1
TIME 0000000e 1444720267.8,1
TIME 0000000e 1444720272.8,1
TIME 0000000e 1444720277.8,1
TIME 0000000e 1444720282.8,1
TIME 0000000e 1444720287.8,1
TIME 0000000e 1444720292.8,1
TIME 0000000e 1444720297.8,1
TIME 0000000e 1444720302.8,1
TIME 0000000e 1444720307.8,1
TIME 0000000e 1444720312.8,1
TIME 0000000e 1444720317.8,1
TIME 0000000e 1444720322.8,1
TIME 0000000e 1444720327.8,1
TIME 0000000e 1444720332.8,1
TIME 0000000e 1444720337.8,1
TIME 0000000e 1444720342.8,1
TIME 0000000e 1444720347.8,1
TIME 0000000e 1444720352.8,1
TIME 0000000e 1444720357.8,1
TIME 0000000e 1444720362.8,1
TIME 0000000e 1444720367.8,1
TIME 0000000e 1444720372.8,1
TIME 0000000e 1444720377.8,1
TIME 0000000e 1444720382.8,1
TIME 0000000e 1444720387.8,1
TIME 0000000e 1444720392.8,1
TIME 0000000e 1444720397.8,1
TIME 0000000e 1444720402.8,1
TIME 0000000e 1444720407.8,1
TIME 0000000e 1444720412.8,1
TIME 0000000e 1444720417.8,1
TIME 0000000e 1444720422.8,1
TIME 0000000e 1444720427.8,1
TIME 0000000e 1444720432.8,1
TIME 0000000e 1444720437.8,1
TIME 0000000e 1444720442.8,1
TIME 0000000e 1444720447.8,1
TIME 0000000e 1444720452.8,1
TIME 0000000e 1444720457.8,1
TIME 0000000e 1444720462.8,1
TIME 0000000e 1444720467.8,1
TIME 0000000e 1444720472.8,1
TIME 0000000e 1444720477.8,1
TIME 0000000e 1444720482.8,1
TIME 0000000e 1444720487.8,1
TIME 0000000e 1444720492.8,1
TIME 0000000e 1444720497.8,1
TIME 0000000e 1444720502.8,1
TIME 0000000e 1444720507.8,1
TIME 0000000e 1444720512.8,1
TIME 0000000e 1444720517.8,1
TIME 0000000e 1444720522.8,1
TIME 0000000e 1444720527.8,1
TIME 0000000e 1444720532.8,1
TIME 0000000e 1444720537.8,1
TIME 0000000e 1444720542.8,1
TIME 0000000e 1444720547.8,1
TIME 0000000e 1444720552.8,1
TIME 0000000e 1444720557.8,1
TIME 0000000e 1444720562.8,1
TIME 0000000e 1444720567.8,1
TIME 0000000e 1444720572.8,1
TIME 0000000e 1444720577.8,1
TIME 0000000e 1444720582.8,1
TIME 0000000e 1444720587.8,1
TIME 0000000e 1444720592.8,1
TIME 0000000e 1444720597.8,1
TIME 0000000e 1444720602.8,1
TIME 0000000e 1444720607.8,1
TIME 0000000e 1444720612.8,1
TIME 0000000e 1444720617.8,1
TIME 0000000e 1444720622.8,1
TIME 0000000e 1444720627.8,1
TIME 0000000e 1444720627.9,1
TIME 0000000e 1444720632.8,1
TIME 0000000e 1444720637.8,1
TIME 0000000e 1444720642.8,1
TIME 0000000e 1444720642.9,1
TIME 0000000e 1444720647.8,1
TIME 0000000e 1444720652.8,1
TIME 0000000e 1444720657.8,1
TIME 0000000e 1444720657.9,1
TIME 0000000e 1444720662.8,1
TIME 0000000e 1444720667.8,1
TIME 0000000e 1444720672.8,1
TIME 0000000e 1444720677.8,1
TIME 0000000e 1444720682.8,1
TIME 0000000e 1444720687.8,1
TIME 0000000e 1444720692.8,1
TIME 0000000e 1444720697.8,1
TIME 0000000e 1444720702.8,1
TIME 0000000e 1444720707.8,1
TIME 0000000e 1444720712.8,1
TIME 0000000e 1444720717.8,1
TIME 0000000e 1444720722.8,1
TIME 0000000e 1444720727.8,1
TIME 0000000e 1444720732.8,1
TIME 0000000e 1444720737.8,1
TIME 0000000e 1444720742.8,1
TIME 0000000e 1444720747.8,1
TIME 0000000e 1444720752.8,1
TIME 0000000e 1444720757.8,1
TIME 0000000e 1444720762.8,1
TIME 0000000e 1444720767.8,1
TIME 0000000e 1444720772.8,1
TIME 0000000e 1444720777.8,1
TIME 0000000e 1444720782.8,1
TIME 0000000e 1444720787.8,1
TIME 0000000e 1444720792.8,1
TIME 0000000e 1444720797.8,1
TIME 0000000e 1444720802.8,1
TIME 0000000e 1444720807.8,1
TIME 0000000e 1444720812.8,1
TIME 0000000e 1444720817.8,1
TIME 0000000e 1444720822.8,1
TIME 0000000e 1444720827.8,1
TIME 0000000e 1444720832.8,1
TIME 0000000e 1444720837.8,1
TIME 0000000e 1444720842.8,1
TIME 0000000e 1444720847.8,1
TIME 0000000e 1444720852.8,1
TIME 0000000e 1444720857.8,1
TIME 0000000e 1444720862.8,1
TIME 0000000e 1444720867.8,1
TIME 0000000e 1444720872.8,1
TIME 0000000e 1444720877.8,1
TIME 0000000e 1444720882.8,1
TIME 0000000e 1444720887.8,1
TIME 0000000e 1444720892.8,1
TIME 0000000e 1444720897.8,1
TIME 0000000e 1444720902.8,1
TIME 0000000e 1444720907.8,1
TIME 0000000e 1444720912.8,1
TIME 0000000e 1444720917.8,1
TIME 0000000e 1444720922.8,1
TIME 0000000e 1444720927.8,1
TIME 0000000e 1444720932.8,1
TIME 0000000e 1444720937.8,1
TIME 0000000e 1444720942.8,1
TIME 0000000e 1444720947.8,1
TIME 0000000e 1444720952.8,1
TIME 0000000e 1444720957.8,1
TIME 0000000e 1444720962.8,1
TIME 0000000e 1444720967.8,1
TIME 0000000e 1444720972.8,1
TIME 0000000e 1444720977.8,1
TIME 0000000e 1444720982.8,1
TIME 0000000e 1444720987.8,1
TIME 0000000e 1444720992.8,1
TIME 0000000e 1444720997.8,1
TIME 0000000e 1444721002.8,1
TIME 0000000e 1444721007.8,1
TIME 0000000e 1444721012.8,1
TIME 0000000e 1444721017.8,1
TIME 0000000e 1444721022.8,1
TIME 0000000e 1444721027.8,1
TIME 0000000e 1444721032.8,1
TIME 0000000e 1444721037.8,1
TIME 0000000e 1444721042.8,1
TIME 0000000e 1444721047.8,1
TIME 0000000e 1444721052.8,1
TIME 0000000e 1444721057.8,1
TIME 0000000e 1444721062.8,1
TIME 0000000e 1444721067.8,1
TIME 0000000e 1444721072.8,1
TIME 0000000e 1444721077.8,1
TIME 0000000e 1444721082.8,1
TIME 0000000e 1444721087.8,1
TIME 0000000e 1444721092.8,1
TIME 0000000e 1444721097.8,1
TIME 0000000e 1444721102.8,1
TIME 0000000e 1444721107.8,1
TIME 0000000e 1444721112.8,1
TIME 0000000e 1444721117.8,1
TIME 0000000e 1444721122.8,1
TIME 0000000e 1444721127.8,1
TIME 0000000e 1444721132.8,1
TIME 0000000e 1444721137.8,1
TIME 0000000e 1444721142.8,1
TIME 0000000e 1444721147.8,1
TIME 0000000e 1444721152.8,1
TIME 0000000e 1444721157.8,1
TIME 0000000e 1444721162.8,1
TIME 0000000e 1444721167.8,1
TIME 0000000e 1444721172.8,1
TIME 0000000e 1444721177.8,1
TIME 0000000e 1444721182.8,1
TIME 0000000e 1444721187.8,1
TIME 0000000e 1444721192.8,1
TIME 0000000e 1444721197.8,1
TIME 0000000e 1444721202.8,1
TIME 0000000e 1444721207.8,1
TIME 0000000e 1444721212.8,1
TIME 0000000e 1444721217.8,1
TIME 0000000e 1444721222.8,1
TIME 0000000e 1444721227.8,1
TIME 0000000e 1444721232.8,1
TIME 0000000e 1444721237.8,1
TIME 0000000e 1444721242.8,1
TIME 0000000e 1444721247.8,1
TIME 0000000e 1444721252.8,1
TIME 0000000e 1444721257.8,1
TIME 0000000e 1444721262.8,1
TIME 0000000e 1444721267.8,1
TIME 0000000e 1444721272.8,1
TIME 0000000e 1444721277.8,1
TIME 0000000e 1444721282.8,1
TIME 0000000e 1444721287.8,1
TIME 0000000e 1444721292.8,1
TIME 0000000e 1444721297.8,1
TIME 0000000e 1444721302.8,1
TIME 0000000e 1444721307.8,1
TIME 0000000e 1444721312.8,1
TIME 0000000e 1444721317.8,1
TIME 0000000e 1444721322.8,1
TIME 0000000e 1444721327.8,1
TIME 0000000e 1444721332.8,1
TIME 0000000e 1444721337.8,1
TIME 0000000e 1444721342.8,1
TIME 0000000e 1444721347.8,1
TIME 0000000e 1444721352.8,1
TIME 0000000e 1444721357.8,1
TIME 0000000e 1444721362.8,1
TIME 0000000e 1444721367.8,1
TIME 0000000e 1444721372.8,1
TIME 0000000e 1444721377.8,1
TIME 0000000e 1444721382.8,1
TIME 0000000e 1444721387.8,1
TIME 0000000e 1444721392.8,1
TIME 0000000e 1444721397.8,1
TIME 0000000e 1444721402.8,1
TIME 0000000e 1444721407.8,1
TIME 0000000e 1444721412.8,1
TIME 0000000e 1444721417.8,1
TIME 0000000e 1444721422.8,1
TIME 0000000e 1444721427.8,1
TIME 0000000e 1444721432.8,1
TIME 0000000e 1444721437.8,1
TIME 0000000e 1444721442.8,1
TIME 0000000e 1444721447.8,1
TIME 0000000e 1444721452.8,1
TIME 0000000e 1444721457.8,1
TIME 0000000e 1444721462.8,1
TIME 0000000e 1444721467.8,1
TIME 0000000e 1444721472.8,1
TIME 0000000e 1444721477.8,1
TIME 0000000e 1444721482.8,1
TIME 0000000e 1444721487.8,1
TIME 0000000e 1444721492.8,1
TIME 0000000e 1444721497.8,1
TIME 0000000e 1444721502.8,1
TIME 0000000e 1444721507.8,1
TIME 0000000e 1444721512.8,1
TIME 0000000e 1444721517.8,1
TIME 0000000e 1444721522.8,1
TIME 0000000e 1444721527.8,1
TIME 0000000e 1444721532.8,1
TIME 0000000e 1444721537.8,1
TIME 0000000e 1444721542.8,1
TIME 0000000e 1444721547.8,1
TIME 0000000e 1444721552.8,1
TIME 0000000e 1444721557.8,1
TIME 0000000e 1444721562.8,1
TIME 0000000e 1444721567.8,1
TIME 0000000e 1444721572.8,1
TIME 0000000e 1444721577.8,1
TIME 0000000e 1444721582.8,1
TIME 0000000e 1444721587.8,1
TIME 0000000e 1444721592.8,1
TIME 0000000e 1444721597.8,1
TIME 0000000e 1444721602.8,1
TIME 0000000e 1444721607.8,1
TIME 0000000e 1444721612.8,1
TIME 0000000e 1444721617.8,1
TIME 0000000e 1444721622.8,1
TIME 0000000e 1444721627.8,1
TIME 0000000e 1444721632.8,1
TIME 0000000e 1444721637.8,1
TIME 0000000e 1444721642.8,1
TIME 0000000e 1444721647.8,1
TIME 0000000e 1444721652.8,1
TIME 0000000e 1444721657.8,1
TIME 0000000e 1444721662.8,1
TIME 0000000e 1444721667.8,1
TIME 0000000e 1444721672.8,1
TIME 0000000e 1444721677.8,1
TIME 0000000e 1444721682.8,1
TIME 0000000e 1444721687.8,1
TIME 0000000e 1444721692.8,1
TIME 0000000e 1444721697.8,1
TIME 0000000e 1444721697.9,1
TIME 0000000e 1444721702.8,1
TIME 0000000e 1444721707.8,1
TIME 0000000e 1444721712.8,1
TIME 0000000e 1444721717.8,1
TIME 0000000e 1444721722.8,1
TIME 0000000e 1444721727.8,1
TIME 0000000e 1444721732.8,1
TIME 0000000e 1444721737.8,1
TIME 0000000e 1444721742.8,1
TIME 0000000e 1444721747.8,1
TIME 0000000e 1444721752.8,1
TIME 0000000e 1444721757.8,1
TIME 0000000e 1444721762.8,1
TIME 0000000e 1444721767.8,1
TIME 0000000e 1444721772.8,1
TIME 0000000e 1444721777.8,1
TIME 0000000e 1444721782.8,1
TIME 0000000e 1444721787.8,1
TIME 0000000e 1444721792.8,1
TIME 0000000e 1444721797.8,1
TIME 0000000e 1444721802.8,1
TIME 0000000e 1444721807.8,1
TIME 0000000e 1444721812.8,1
TIME 0000000e 1444721817.8,1
TIME 0000000e 1444721822.8,1
TIME 0000000e 1444721827.8,1
TIME 0000000e 1444721832.8,1
TIME 0000000e 1444721837.8,1
TIME 0000000e 1444721842.8,1
TIME 0000000e 1444721847.8,1
TIME 0000000e 1444721852.8,1
TIME 0000000e 1444721857.8,1
TIME 0000000e 1444721862.8,1
TIME 0000000e 1444721867.8,1
TIME 0000000e 1444721872.8,1
TIME 0000000e 1444721877.8,1
TIME 0000000e 1444721882.8,1
TIME 0000000e 1444721887.8,1
TIME 0000000e 1444721892.8,1
TIME 0000000e 1444721897.8,1
TIME 0000000e 1444721902.8,1
TIME 0000000e 1444721907.8,1
TIME 0000000e 1444721912.8,1
TIME 0000000e 1444721917.8,1
TIME 0000000e 1444721922.8,1
TIME 0000000e 1444721927.8,1
TIME 0000000e 1444721932.8,1
TIME 0000000e 1444721937.8,1
TIME 0000000e 1444721942.8,1
TIME 0000000e 1444721947.8,1
TIME 0000000e 1444721952.8,1
TIME 0000000e 1444721957.8,1
TIME 0000000e 1444721962.8,1
TIME 0000000e 1444721967.8,1
TIME 0000000e 1444721972.8,1
TIME 0000000e 1444721977.8,1
TIME 0000000e 1444721982.8,1
TIME 0000000e 1444721987.8,1
TIME 0000000e 1444721992.8,1
TIME 0000000e 1444721997.8,1
TIME 0000000e 1444722002.8,1
TIME 0000000e 1444722007.8,1
TIME 0000000e 1444722012.8,1
TIME 0000000e 1444722017.8,1
TIME 0000000e 1444722022.8,1
TIME 0000000e 1444722027.8,1
TIME 0000000e 1444722032.8,1
TIME 0000000e 1444722037.8,1
TIME 0000000e 1444722042.8,1
TIME 0000000e 1444722047.8,1
TIME 0000000e 1444722052.8,1
TIME 0000000e 1444722057.8,1
TIME 0000000e 1444722062.8,1
TIME 0000000e 1444722067.8,1
TIME 0000000e 1444722072.8,1
TIME 0000000e 1444722077.8,1
TIME 0000000e 1444722082.8,1
TIME 0000000e 1444722087.8,1
TIME 0000000e 1444722092.8,1
TIME 0000000e 1444722097.8,1
TIME 0000000e 1444722102.8,1
TIME 0000000e 1444722107.8,1
TIME 0000000e 1444722112.8,1
TIME 0000000e 1444722117.8,1
TIME 0000000e 1444722122.8,1
TIME 0000000e 1444722127.8,1
TIME 0000000e 1444722132.8,1
TIME 0000000e 1444722137.8,1
TIME 0000000e 1444722142.8,1
TIME 0000000e 1444722147.8,1
TIME 0000000e 1444722152.8,1
TIME 0000000e 1444722157.8,1
TIME 0000000e 1444722162.8,1
TIME 0000000e 1444722167.8,1
TIME 0000000e 1444722172.8,1
TIME 0000000e 1444722177.8,1
TIME 0000000e 1444722182.8,1
TIME 0000000e 1444722187.8,1
TIME 0000000e 1444722192.8,1
TIME 0000000e 1444722197.8,1
TIME 0000000e 1444722202.8,1
TIME 0000000e 1444722207.8,1
TIME 0000000e 1444722212.8,1
TIME 0000000e 1444722217.8,1
TIME 0000000e 1444722222.8,1
TIME 0000000e 1444722227.8,1
TIME 0000000e 1444722232.8,1
TIME 0000000e 1444722237.8,1
TIME 0000000e 1444722242.8,1
TIME 0000000e 1444722247.8,1
TIME 0000000e 1444722252.8,1
TIME 0000000e 1444722257.8,1
TIME 0000000e 1444722262.8,1
TIME 0000000e 1444722267.8,1
TIME 0000000e 1444722272.8,1
TIME 0000000e 1444722277.8,1
TIME 0000000e 1444722282.8,1
TIME 0000000e 1444722287.8,1
TIME 0000000e 1444722292.8,1
TIME 0000000e 1444722297.8,1
TIME 0000000e 1444722302.8,1
TIME 0000000e 1444722307.8,1
TIME 0000000e 1444722312.8,1
TIME 0000000e 1444722317.8,1
TIME 0000000e 1444722322.8,1
TIME 0000000e 1444722327.8,1
TIME 0000000e 1444722332.8,1
TIME 0000000e 1444722337.8,1
TIME 0000000e 1444722342.8,1
TIME 0000000e 1444722347.8,1
TIME 0000000e 1444722352.8,1
TIME 0000000e 1444722357.8,1
TIME 0000000e 1444722362.8,1
TIME 0000000e 1444722367.8,1
TIME 0000000e 1444722372.8,1
TIME 0000000e 1444722377.8,1
TIME 0000000e 1444722382.8,1
TIME 0000000e 1444722387.8,1
TIME 0000000e 1444722392.8,1
TIME 0000000e 1444722397.8,1
TIME 0000000e 1444722402.8,1
TIME 0000000e 1444722407.8,1
TIME 0000000e 1444722412.8,1
TIME 0000000e 1444722417.8,1
TIME 0000000e 1444722422.8,1
TIME 0000000e 1444722427.8,1
TIME 0000000e 1444722432.8,1
TIME 0000000e 1444722437.8,1
TIME 0000000e 1444722442.8,1
TIME 0000000e 1444722447.8,1
TIME 0000000e 1444722452.8,1
TIME 0000000e 1444722457.8,1
TIME 0000000e 1444722462.8,1
TIME 0000000e 1444722467.8,1
TIME 0000000e 1444722472.8,1
TIME 0000000e 1444722477.8,1
TIME 0000000e 1444722482.8,1
TIME 0000000e 1444722487.8,1
TIME 0000000e 1444722492.8,1
TIME 0000000e 1444722497.8,1
TIME 0000000e 1444722502.8,1
TIME 0000000e 1444722507.8,1
TIME 0000000e 1444722512.8,1
TIME 0000000e 1444722517.8,1
TIME 0000000e 1444722522.8,1
TIME 0000000e 1444722527.8,1
TIME 0000000e 1444722532.8,1
TIME 0000000e 1444722537.8,1
TIME 0000000e 1444722542.8,1
TIME 0000000e 1444722547.8,1
TIME 0000000e 1444722552.8,1
TIME 0000000e 1444722557.8,1
TIME 0000000e 1444722562.8,1
TIME 0000000e 1444722567.8,1
TIME 0000000e 1444722572.8,1
TIME 0000000e 1444722577.8,1
TIME 0000000e 1444722582.8,1
TIME 0000000e 1444722587.8,1
TIME 0000000e 1444722592.8,1
TIME 0000000e 1444722597.8,1
TIME 0000000e 1444722602.8,1
TIME 0000000e 1444722607.8,1
TIME 0000000e 1444722612.8,1
TIME 0000000e 1444722617.8,1
TIME 0000000e 1444722622.8,1
TIME 0000000e 1444722627.8,1
TIME 0000000e 1444722632.8,1
TIME 0000000e 1444722637.8,1
TIME 0000000e 1444722642.8,1
TIME 0000000e 1444722647.8,1
TIME 0000000e 1444722652.8,1
TIME 0000000e 1444722657.8,1
TIME 0000000e 1444722662.8,1
TIME 0000000e 1444722667.8,1
TIME 0000000e 1444722672.8,1
TIME 0000000e 1444722677.8,1
TIME 0000000e 1444722682.8,1
TIME 0000000e 1444722687.8,1
TIME 0000000e 1444722692.8,1
TIME 0000000e 1444722697.8,1
TIME 0000000e 1444722702.8,1
TIME 0000000e 1444722707.8,1
TIME 0000000e 1444722712.8,1
TIME 0000000e 1444722717.8,1
TIME 0000000e 1444722722.8,1
TIME 0000000e 1444722727.8,1
TIME 0000000e 1444722732.8,1
TIME 0000000e 1444722737.8,1
TIME 0000000e 1444722742.8,1
TIME 0000000e 1444722747.8,1
TIME 0000000e 1444722752.8,1
TIME 0000000e 1444722757.8,1
TIME 0000000e 1444722762.8,1
TIME 0000000e 1444722767.8,1
TIME 0000000e 1444722772.8,1
TIME 0000000e 1444722777.8,1
TIME 0000000e 1444722777.9,1
TIME 0000000e 1444722782.8,1
TIME 0000000e 1444722787.8,1
TIME 0000000e 1444722792.8,1
TIME 0000000e 1444722797.8,1
TIME 0000000e 1444722797.9,1
TIME 0000000e 1444722802.8,1
TIME 0000000e 1444722802.9,1
TIME 0000000e 1444722807.8,1
TIME 0000000e 1444722812.8,1
TIME 0000000e 1444722817.8,1
TIME 0000000e 1444722822.8,1
TIME 0000000e 1444722827.8,1
TIME 0000000e 1444722832.8,1
TIME 0000000e 1444722837.8,1
TIME 0000000e 1444722842.8,1
TIME 0000000e 1444722847.8,1
TIME 0000000e 1444722852.8,1
TIME 0000000e 1444722857.8,1
TIME 0000000e 1444722862.8,1
TIME 0000000e 1444722867.8,1
TIME 0000000e 1444722872.8,1
TIME 0000000e 1444722877.8,1
TIME 0000000e 1444722882.8,1
TIME 0000000e 1444722887.8,1
TIME 0000000e 1444722892.8,1
TIME 0000000e 1444722897.8,1
TIME 0000000e 1444722902.8,1
TIME 0000000e 1444722907.8,1
TIME 0000000e 1444722912.8,1
TIME 0000000e 1444722917.8,1
TIME 0000000e 1444722922.8,1
TIME 0000000e 1444722927.8,1
TIME 0000000e 1444722932.8,1
TIME 0000000e 1444722937.8,1
TIME 0000000e 1444722942.8,1
TIME 0000000e 1444722947.8,1
TIME 0000000e 1444722952.8,1
TIME 0000000e 1444722957.8,1
TIME 0000000e 1444722962.8,1
TIME 0000000e 1444722967.8,1
TIME 0000000e 1444722972.8,1
TIME 0000000e 1444722977.8,1
TIME 0000000e 1444722982.8,1
TIME 0000000e 1444722987.8,1
TIME 0000000e 1444722992.8,1
TIME 0000000e 1444722997.8,1
TIME 0000000e 1444723002.8,1
TIME 0000000e 1444723007.8,1
TIME 0000000e 1444723012.8,1
TIME 0000000e 1444723017.8,1
TIME 0000000e 1444723022.8,1
TIME 0000000e 1444723027.8,1
TIME 0000000e 1444723032.8,1
TIME 0000000e 1444723037.8,1
TIME 0000000e 1444723042.8,1
TIME 0000000e 1444723047.8,1
TIME 0000000e 1444723052.8,1
TIME 0000000e 1444723057.8,1
TIME 0000000e 1444723062.8,1
TIME 0000000e 1444723067.8,1
TIME 0000000e 1444723072.8,1
TIME 0000000e 1444723077.8,1
TIME 0000000e 1444723082.8,1
TIME 0000000e 1444723087.8,1
TIME 0000000e 1444723092.8,1
TIME 0000000e 1444723097.8,1
TIME 0000000e 1444723102.8,1
TIME 0000000e 1444723107.8,1
TIME 0000000e 1444723112.8,1
TIME 0000000e 1444723117.8,1
TIME 0000000e 1444723122.8,1
TIME 0000000e 1444723127.8,1
TIME 0000000e 1444723132.8,1
TIME 0000000e 1444723137.8,1
TIME 0000000e 1444723142.8,1
TIME 0000000e 1444723147.8,1
TIME 0000000e 1444723152.8,1
TIME 0000000e 1444723157.8,1
TIME 0000000e 1444723162.8,1
TIME 0000000e 1444723167.8,1
TIME 0000000e 1444723172.8,1
TIME 0000000e 1444723177.8,1
TIME 0000000e 1444723182.8,1
TIME 0000000e 1444723187.8,1
TIME 0000000e 1444723192.8,1
TIME 0000000e 1444723197.8,1
TIME 0000000e 1444723202.8,1
TIME 0000000e 1444723207.8,1
TIME 0000000e 1444723212.8,1
TIME 0000000e 1444723217.8,1
TIME 0000000e 1444723222.8,1
TIME 0000000e 1444723227.8,1
TIME 0000000e 1444723232.8,1
TIME 0000000e 1444723237.8,1
TIME 0000000e 1444723242.8,1
TIME 0000000e 1444723247.8,1
TIME 0000000e 1444723252.8,1
TIME 0000000e 1444723257.8,1
TIME 0000000e 1444723262.8,1
TIME 0000000e 1444723267.8,1
TIME 0000000e 1444723272.8,1
TIME 0000000e 1444723277.8,1
TIME 0000000e 1444723282.8,1
TIME 0000000e 1444723287.8,1
TIME 0000000e 1444723292.8,1
TIME 0000000e 1444723297.8,1
TIME 0000000e 1444723302.8,1
TIME 0000000e 1444723307.8,1
TIME 0000000e 1444723312.8,1
TIME 0000000e 1444723317.8,1
TIME 0000000e 1444723322.8,1
TIME 0000000e 1444723327.8,1
TIME 0000000e 1444723332.8,1
TIME 0000000e 1444723337.8,1
TIME 0000000e 1444723342.8,1
TIME 0000000e 1444723347.8,1
TIME 0000000e 1444723352.8,1
TIME 0000000e 1444723357.8,1
TIME 0000000e 1444723362.8,1
TIME 0000000e 1444723367.8,1
TIME 0000000e 1444723372.8,1
TIME 0000000e 1444723377.8,1
TIME 0000000e 1444723382.8,1
TIME 0000000e 1444723387.8,1
TIME 0000000e 1444723392.8,1
TIME 0000000e 1444723397.8,1
TIME 0000000e 1444723402.8,1
TIME 0000000e 1444723407.8,1
TIME 0000000e 1444723412.8,1
TIME 0000000e 1444723417.8,1
TIME 0000000e 1444723422.8,1
TIME 0000000e 1444723427.8,1
TIME 0000000e 1444723432.8,1
TIME 0000000e 1444723437.8,1
TIME 0000000e 1444723442.8,1
TIME 0000000e 1444723447.8,1
TIME 0000000e 1444723452.8,1
TIME 0000000e 1444723457.8,1
TIME 0000000e 1444723462.8,1
TIME 0000000e 1444723467.8,1
TIME 0000000e 1444723472.8,1
TIME 0000000e 1444723477.8,1
TIME 0000000e 1444723482.8,1
TIME 0000000e 1444723487.8,1
TIME 0000000e 1444723492.8,1
TIME 0000000e 1444723497.8,1
TIME 0000000e 1444723502.8,1
TIME 0000000e 1444723507.8,1
TIME 0000000e 1444723512.8,1
TIME 0000000e 1444723517.8,1
TIME 0000000e 1444723522.8,1
TIME 0000000e 1444723527.8,1
TIME 0000000e 1444723532.8,1
TIME 0000000e 1444723537.8,1
TIME 0000000e 1444723542.8,1
TIME 0000000e 1444723547.8,1
TIME 0000000e 1444723552.8,1
TIME 0000000e 1444723557.8,1
TIME 0000000e 1444723562.8,1
TIME 0000000e 1444723567.8,1
TIME 0000000e 1444723572.8,1
TIME 0000000e 1444723577.8,1
TIME 0000000e 1444723582.8,1
TIME 0000000e 1444723587.8,1
TIME 0000000e 1444723592.8,1
TIME 0000000e 1444723597.8,1
TIME 0000000e 1444723602.8,1
TIME 0000000e 1444723607.8,1
TIME 0000000e 1444723612.8,1
TIME 0000000e 1444723617.8,1
TIME 0000000e 1444723622.8,1
TIME 0000000e 1444723627.8,1
TIME 0000000e 1444723632.8,1
TIME 0000000e 1444723637.8,1
TIME 0000000e 1444723642.8,1
TIME 0000000e 1444723647.8,1
TIME 0000000e 1444723652.8,1
TIME 0000000e 1444723657.8,1
TIME 0000000e 1444723662.8,1
TIME 0000000e 1444723667.8,1
TIME 0000000e 1444723672.8,1
TIME 0000000e 1444723677.8,1
TIME 0000000e 1444723682.8,1
TIME 0000000e 1444723687.8,1
TIME 0000000e 1444723692.8,1
TIME 0000000e 1444723697.8,1
TIME 0000000e 1444723702.8,1
TIME 0000000e 1444723707.8,1
TIME 0000000e 1444723712.8,1
TIME 0000000e 1444723717.8,1
TIME 0000000e 1444723722.8,1
TIME 0000000e 1444723727.8,1
TIME 0000000e 1444723732.8,1
TIME 0000000e 1444723737.8,1
TIME 0000000e 1444723742.8,1
TIME 0000000e 1444723747.8,1
TIME 0000000e 1444723752.8,1
TIME 0000000e 1444723757.8,1
TIME 0000000e 1444723762.8,1
TIME 0000000e 1444723767.8,1
TIME 0000000e 1444723772.8,1
TIME 0000000e 1444723777.8,1
TIME 0000000e 1444723782.8,1
TIME 0000000e 1444723787.8,1
TIME 0000000e 1444723792.8,1
TIME 0000000e 1444723797.8,1
TIME 0000000e 1444723802.8,1
TIME 0000000e 1444723807.8,1
TIME 0000000e 1444723812.8,1
TIME 0000000e 1444723817.8,1
TIME 0000000e 1444723822.8,1
TIME 0000000e 1444723827.8,1
TIME 0000000e 1444723832.8,1
TIME 0000000e 1444723837.8,1
TIME 0000000e 1444723842.8,1
TIME 0000000e 1444723847.8,1
TIME 0000000e 1444723852.8,1
TIME 0000000e 1444723857.8,1
TIME 0000000e 1444723862.8,1
TIME 0000000e 1444723867.8,1
TIME 0000000e 1444723872.8,1
TIME 0000000e 1444723877.8,1
TIME 0000000e 1444723882.8,1
TIME 0000000e 1444723887.8,1
TIME 0000000e 1444723892.8,1
TIME 0000000e 1444723897.8,1
TIME 0000000e 1444723897.9,1
TIME 0000000e 1444723902.8,1
TIME 0000000e 1444723907.8,1
TIME 0000000e 1444723907.9,1
TIME 0000000e 1444723912.8,1
TIME 0000000e 1444723912.9,1
TIME 0000000e 1444723917.8,1
TIME 0000000e 1444723917.9,1
TIME 0000000e 1444723922.8,1
TIME 0000000e 1444723922.9,1
TIME 0000000e 1444723927.8,1
TIME 0000000e 1444723932.8,1
TIME 0000000e 1444723937.8,1
TIME 0000000e 1444723942.8,1
TIME 0000000e 1444723947.8,1
TIME 0000000e 1444723952.8,1
TIME 0000000e 1444723957.8,1
TIME 0000000e 1444723957.9,1
TIME 0000000e 1444723962.8,1
TIME 0000000e 1444723967.8,1
TIME 0000000e 1444723972.8,1
TIME 0000000e 1444723977.8,1
TIME 0000000e 1444723982.8,1
TIME 0000000e 1444723987.8,1
TIME 0000000e 1444723992.8,1
TIME 0000000e 1444723997.8,1
TIME 0000000e 1444724002.8,1
TIME 0000000e 1444724007.8,1
TIME 0000000e 1444724012.8,1
TIME 0000000e 1444724017.8,1
TIME 0000000e 1444724022.8,1
TIME 0000000e 1444724027.8,1
TIME 0000000e 1444724032.8,1
TIME 0000000e 1444724037.8,1
TIME 0000000e 1444724042.8,1
TIME 0000000e 1444724047.8,1
TIME 0000000e 1444724052.8,1
TIME 0000000e 1444724057.8,1
TIME 0000000e 1444724062.8,1
TIME 0000000e 1444724067.8,1
TIME 0000000e 1444724072.8,1
TIME 0000000e 1444724077.8,1
TIME 0000000e 1444724082.8,1
TIME 0000000e 1444724087.8,1
TIME 0000000e 1444724092.8,1
TIME 0000000e 1444724097.8,1
TIME 0000000e 1444724102.8,1
TIME 0000000e 1444724107.8,1
TIME 0000000e 1444724112.8,1
TIME 0000000e 1444724117.8,1
TIME 0000000e 1444724122.8,1
TIME 0000000e 1444724127.8,1
TIME 0000000e 1444724132.8,1
TIME 0000000e 1444724137.8,1
TIME 0000000e 1444724142.8,1
TIME 0000000e 1444724147.8,1
TIME 0000000e 1444724152.8,1
TIME 0000000e 1444724157.8,1
TIME 0000000e 1444724162.8,1
TIME 0000000e 1444724167.8,1
TIME 0000000e 1444724172.8,1
TIME 0000000e 1444724177.8,1
TIME 0000000e 1444724182.8,1
TIME 0000000e 1444724187.8,1
TIME 0000000e 1444724192.8,1
TIME 0000000e 1444724197.8,1
TIME 0000000e 1444724202.8,1
TIME 0000000e 1444724207.8,1
TIME 0000000e 1444724212.8,1
TIME 0000000e 1444724217.8,1
TIME 0000000e 1444724222.8,1
TIME 0000000e 1444724227.8,1
TIME 0000000e 1444724232.8,1
TIME 0000000e 1444724237.8,1
TIME 0000000e 1444724242.8,1
TIME 0000000e 1444724247.8,1
TIME 0000000e 1444724252.8,1
TIME 0000000e 1444724257.8,1
TIME 0000000e 1444724262.8,1
TIME 0000000e 1444724267.8,1
TIME 0000000e 1444724272.8,1
TIME 0000000e 1444724277.8,1
TIME 0000000e 1444724282.8,1
TIME 0000000e 1444724287.8,1
TIME 0000000e 1444724292.8,1
TIME 0000000e 1444724297.8,1
TIME 0000000e 1444724302.8,1
TIME 0000000e 1444724307.8,1
TIME 0000000e 1444724312.8,1
TIME 0000000e 1444724317.8,1
TIME 0000000e 1444724322.8,1
TIME 0000000e 1444724327.8,1
TIME 0000000e 1444724332.8,1
TIME 0000000e 1444724337.8,1
TIME 0000000e 1444724342.8,1
TIME 0000000e 1444724347.8,1
TIME 0000000e 1444724352.8,1
TIME 0000000e 1444724357.8,1
TIME 0000000e 1444724362.8,1
TIME 0000000e 1444724367.8,1
TIME 0000000e 1444724372.8,1
TIME 0000000e 1444724377.8,1
TIME 0000000e 1444724382.8,1
TIME 0000000e 1444724387.8,1
TIME 0000000e 1444724392.8,1
TIME 0000000e 1444724397.8,1
TIME 0000000e 1444724402.8,1
TIME 0000000e 1444724407.8,1
TIME 0000000e 1444724412.8,1
TIME 0000000e 1444724417.8,1
TIME 0000000e 1444724422.8,1
TIME 0000000e 1444724427.8,1
TIME 0000000e 1444724432.8,1
TIME 0000000e 1444724437.8,1
TIME 0000000e 1444724442.8,1
TIME 0000000e 1444724447.8,1
TIME 0000000e 1444724452.8,1
TIME 0000000e 1444724457.8,1
TIME 0000000e 1444724462.8,1
TIME 0000000e 1444724467.8,1
TIME 0000000e 1444724472.8,1
TIME 0000000e 1444724477.8,1
TIME 0000000e 1444724482.8,1
TIME 0000000e 1444724487.8,1
TIME 0000000e 1444724492.8,1
TIME 0000000e 1444724497.8,1
TIME 0000000e 1444724502.8,1
TIME 0000000e 1444724507.8,1
TIME 0000000e 1444724512.8,1
TIME 0000000e 1444724517.8,1
TIME 0000000e 1444724522.8,1
TIME 0000000e 1444724527.8,1
TIME 0000000e 1444724532.8,1
TIME 0000000e 1444724537.8,1
TIME 0000000e 1444724542.8,1
TIME 0000000e 1444724547.8,1
TIME 0000000e 1444724552.8,1
TIME 0000000e 1444724557.8,1
TIME 0000000e 1444724562.8,1
TIME 0000000e 1444724567.8,1
TIME 0000000e 1444724572.8,1
TIME 0000000e 1444724577.8,1
TIME 0000000e 1444724582.8,1
TIME 0000000e 1444724587.8,1
TIME 0000000e 1444724592.8,1
TIME 0000000e 1444724597.8,1
TIME 0000000e 1444724602.8,1
TIME 0000000e 1444724607.8,1
TIME 0000000e 1444724612.8,1
TIME 0000000e 1444724617.8,1
TIME 0000000e 1444724622.8,1
TIME 0000000e 1444724627.8,1
TIME 0000000e 1444724632.8,1
TIME 0000000e 1444724637.8,1
TIME 0000000e 1444724642.8,1
TIME 0000000e 1444724647.8,1
TIME 0000000e 1444724652.8,1
TIME 0000000e 1444724657.8,1
TIME 0000000e 1444724662.8,1
TIME 0000000e 1444724667.8,1
TIME 0000000e 1444724672.8,1
TIME 0000000e 1444724677.8,1
TIME 0000000e 1444724682.8,1
TIME 0000000e 1444724687.8,1
TIME 0000000e 1444724692.8,1
TIME 0000000e 1444724697.8,1
TIME 0000000e 1444724702.8,1
TIME 0000000e 1444724707.8,1
TIME 0000000e 1444724712.8,1
TIME 0000000e 1444724717.8,1
TIME 0000000e 1444724722.8,1
TIME 0000000e 1444724727.8,1
TIME 0000000e 1444724732.8,1
TIME 0000000e 1444724737.8,1
TIME 0000000e 1444724742.8,1
TIME 0000000e 1444724747.8,1
TIME 0000000e 1444724752.8,1
TIME 0000000e 1444724757.8,1
TIME 0000000e 1444724762.8,1
TIME 0000000e 1444724767.8,1
TIME 0000000e 1444724772.8,1
TIME 0000000e 1444724777.8,1
TIME 0000000e 1444724782.8,1
TIME 0000000e 1444724787.8,1
TIME 0000000e 1444724792.8,1
TIME 0000000e 1444724797.8,1
TIME 0000000e 1444724802.8,1
TIME 0000000e 1444724807.8,1
TIME 0000000e 1444724812.8,1
TIME 0000000e 1444724817.8,1
TIME 0000000e 1444724822.8,1
TIME 0000000e 1444724827.8,1
TIME 0000000e 1444724832.8,1
TIME 0000000e 1444724837.8,1
TIME 0000000e 1444724842.8,1
TIME 0000000e 1444724847.8,1
TIME 0000000e 1444724852.8,1
TIME 0000000e 1444724857.8,1
TIME 0000000e 1444724862.8,1
TIME 0000000e 1444724867.8,1
TIME 0000000e 1444724872.8,1
TIME 0000000e 1444724877.8,1
TIME 0000000e 1444724882.8,1
TIME 0000000e 1444724887.8,1
TIME 0000000e 1444724892.8,1
TIME 0000000e 1444724897.8,1
TIME 0000000e 1444724902.8,1
TIME 0000000e 1444724907.8,1
TIME 0000000e 1444724912.8,1
TIME 0000000e 1444724917.8,1
TIME 0000000e 1444724922.8,1
TIME 0000000e 1444724927.8,1
TIME 0000000e 1444724932.8,1
TIME 0000000e 1444724937.8,1
TIME 0000000e 1444724942.8,1
TIME 0000000e 1444724947.8,1
TIME 0000000e 1444724952.8,1
TIME 0000000e 1444724957.8,1
TIME 0000000e 1444724962.8,1
TIME 0000000e 1444724967.8,1
TIME 0000000e 1444724972.8,1
TIME 0000000e 1444724977.8,1
TIME 0000000e 1444724982.8,1
TIME 0000000e 1444724987.8,1
TIME 0000000e 1444724992.8,1
TIME 0000000e 1444724997.8,1
TIME 0000000e 1444725002.8,1
TIME 0000000e 1444725007.8,1
TIME 0000000e 1444725012.8,1
TIME 0000000e 1444725017.8,1
TIME 0000000e 1444725022.8,1
TIME 0000000e 1444725027.8,1
TIME 0000000e 1444725032.8,1
TIME 0000000e 1444725037.8,1
TIME 0000000e 1444725042.8,1
TIME 0000000e 1444725047.8,1
TIME 0000000e 1444725052.8,1
TIME 0000000e 1444725057.8,1
TIME 0000000e 1444725062.8,1
TIME 0000000e 1444725067.8,1
TIME 0000000e 1444725072.8,1
TIME 0000000e 1444725077.8,1
TIME 0000000e 1444725082.8,1
TIME 0000000e 1444725087.8,1
TIME 0000000e 1444725092.8,1
TIME 0000000e 1444725097.8,1
TIME 0000000e 1444725102.8,1
TIME 0000000e 1444725107.8,1
TIME 0000000e 1444725112.8,1
TIME 0000000e 1444725117.8,1
TIME 0000000e 1444725122.8,1
TIME 0000000e 1444725127.8,1
TIME 0000000e 1444725132.8,1
TIME 0000000e 1444725137.8,1
TIME 0000000e 1444725142.8,1
TIME 0000000e 1444725147.8,1
TIME 0000000e 1444725152.8,1
TIME 0000000e 1444725157.8,1
TIME 0000000e 1444725162.8,1
TIME 0000000e 1444725167.8,1
TIME 0000000e 1444725172.8,1
TIME 0000000e 1444725177.8,1
TIME 0000000e 1444725182.8,1
TIME 0000000e 1444725187.8,1
TIME 0000000e 1444725192.8,1
TIME 0000000e 1444725197.8,1
TIME 0000000e 1444725202.8,1
TIME 0000000e 1444725207.8,1
TIME 0000000e 1444725212.8,1
TIME 0000000e 1444725217.8,1
TIME 0000000e 1444725222.8,1
TIME 0000000e 1444725227.8,1
TIME 0000000e 1444725232.8,1
TIME 0000000e 1444725237.8,1
TIME 0000000e 1444725242.8,1
TIME 0000000e 1444725247.8,1
TIME 0000000e 1444725252.8,1
TIME 0000000e 1444725257.8,1
TIME 0000000e 1444725262.8,1
TIME 0000000e 1444725267.8,1
TIME 0000000e 1444725272.8,1
TIME 0000000e 1444725277.8,1
TIME 0000000e 1444725282.8,1
TIME 0000000e 1444725287.8,1
TIME 0000000e 1444725292.8,1
TIME 0000000e 1444725297.8,1
TIME 0000000e 1444725302.8,1
TIME 0000000e 1444725307.8,1
TIME 0000000e 1444725312.8,1
TIME 0000000e 1444725317.8,1
TIME 0000000e 1444725322.8,1
TIME 0000000e 1444725327.8,1
TIME 0000000e 1444725332.8,1
TIME 0000000e 1444725337.8,1
TIME 0000000e 1444725342.8,1
TIME 0000000e 1444725347.8,1
TIME 0000000e 1444725352.8,1
TIME 0000000e 1444725357.8,1
TIME 0000000e 1444725362.8,1
TIME 0000000e 1444725367.8,1
TIME 0000000e 1444725372.8,1
TIME 0000000e 1444725377.8,1
TIME 0000000e 1444725382.8,1
TIME 0000000e 1444725387.8,1
TIME 0000000e 1444725392.8,1
TIME 0000000e 1444725397.8,1
TIME 0000000e 1444725402.8,1
TIME 0000000e 1444725407.8,1
TIME 0000000e 1444725412.8,1
TIME 0000000e 1444725417.8,1
TIME 0000000e 1444725422.8,1
TIME 0000000e 1444725427.8,1
TIME 0000000e 1444725432.8,1
TIME 0000000e 1444725437.8,1
TIME 0000000e 1444725442.8,1
TIME 0000000e 1444725447.8,1
TIME 0000000e 1444725452.8,1
TIME 0000000e 1444725457.8,1
TIME 0000000e 1444725462.8,1
TIME 0000000e 1444725467.8,1
TIME 0000000e 1444725472.8,1
TIME 0000000e 1444725477.8,1
TIME 0000000e 1444725482.8,1
TIME 0000000e 1444725487.8,1
TIME 0000000e 1444725492.8,1
TIME 0000000e 1444725497.8,1
TIME 0000000e 1444725502.8,1
TIME 0000000e 1444725507.8,1
TIME 0000000e 1444725512.8,1
TIME 0000000e 1444725517.8,1
TIME 0000000e 1444725522.8,1
TIME 0000000e 1444725527.8,1
TIME 0000000e 1444725532.8,1
TIME 0000000e 1444725537.8,1
TIME 0000000e 1444725542.8,1
TIME 0000000e 1444725547.8,1
TIME 0000000e 1444725552.8,1
TIME 0000000e 1444725557.8,1
TIME 0000000e 1444725562.8,1
TIME 0000000e 1444725567.8,1
TIME 0000000e 1444725572.8,1
TIME 0000000e 1444725577.8,1
TIME 0000000e 1444725582.8,1
TIME 0000000e 1444725587.8,1
TIME 0000000e 1444725592.8,1
TIME 0000000e 1444725597.8,1
TIME 0000000e 1444725602.8,1
TIME 0000000e 1444725607.8,1
TIME 0000000e 1444725612.8,1
TIME 0000000e 1444725617.8,1
TIME 0000000e 1444725622.8,1
TIME 0000000e 1444725627.8,1
TIME 0000000e 1444725632.8,1
TIME 0000000e 1444725637.8,1
TIME 0000000e 1444725642.8,1
TIME 0000000e 1444725647.8,1
TIME 0000000e 1444725652.8,1
TIME 0000000e 1444725657.8,1
TIME 0000000e 1444725662.8,1
TIME 0000000e 1444725667.8,1
TIME 0000000e 1444725672.8,1
TIME 0000000e 1444725677.8,1
TIME 0000000e 1444725682.8,1
TIME 0000000e 1444725687.8,1
TIME 0000000e 1444725692.8,1
TIME 0000000e 1444725697.8,1
TIME 0000000e 1444725702.8,1
TIME 0000000e 1444725707.8,1
TIME 0000000e 1444725712.8,1
TIME 0000000e 1444725717.8,1
TIME 0000000e 1444725722.8,1
TIME 0000000e 1444725727.8,1
TIME 0000000e 1444725732.8,1
TIME 0000000e 1444725737.8,1
TIME 0000000e 1444725742.8,1
TIME 0000000e 1444725747.8,1
TIME 0000000e 1444725752.8,1
TIME 0000000e 1444725757.8,1
TIME 0000000e 1444725762.8,1
TIME 0000000e 1444725767.8,1
TIME 0000000e 1444725772.8,1
TIME 0000000e 1444725777.8,1
TIME 0000000e 1444725782.8,1
TIME 0000000e 1444725787.8,1
TIME 0000000e 1444725792.8,1
TIME 0000000e 1444725797.8,1
TIME 0000000e 1444725802.8,1
TIME 0000000e 1444725807.8,1
TIME 0000000e 1444725812.8,1
TIME 0000000e 1444725817.8,1
TIME 0000000e 1444725822.8,1
TIME 0000000e 1444725827.8,1
TIME 0000000e 1444725832.8,1
TIME 0000000e 1444725837.8,1
TIME 0000000e 1444725842.8,1
TIME 0000000e 1444725847.8,1
TIME 0000000e 1444725852.8,1
TIME 0000000e 1444725857.8,1
TIME 0000000e 1444725862.8,1
TIME 0000000e 1444725867.8,1
TIME 0000000e 1444725872.8,1
TIME 0000000e 1444725877.8,1
TIME 0000000e 1444725882.8,1
TIME 0000000e 1444725887.8,1
TIME 0000000e 1444725892.8,1
TIME 0000000e 1444725897.8,1
TIME 0000000e 1444725902.8,1
TIME 0000000e 1444725907.8,1
TIME 0000000e 1444725912.8,1
TIME 0000000e 1444725917.8,1
TIME 0000000e 1444725922.8,1
TIME 0000000e 1444725927.8,1
TIME 0000000e 1444725932.8,1
TIME 0000000e 1444725937.8,1
TIME 0000000e 1444725942.8,1
TIME 0000000e 1444725947.8,1
TIME 0000000e 1444725952.8,1
TIME 0000000e 1444725957.8,1
TIME 0000000e 1444725962.8,1
TIME 0000000e 1444725967.8,1
TIME 0000000e 1444725972.8,1
TIME 0000000e 1444725977.8,1
TIME 0000000e 1444725982.8,1
TIME 0000000e 1444725987.8,1
TIME 0000000e 1444725992.8,1
TIME 0000000e 1444725997.8,1
TIME 0000000e 1444726002.8,1
TIME 0000000e 1444726007.8,1
TIME 0000000e 1444726012.8,1
TIME 0000000e 1444726017.8,1
TIME 0000000e 1444726022.8,1
TIME 0000000e 1444726027.8,1
TIME 0000000e 1444726032.8,1
TIME 0000000e 1444726037.8,1
TIME 0000000e 1444726042.8,1
TIME 0000000e 1444726047.8,1
TIME 0000000e 1444726052.8,1
TIME 0000000e 1444726057.8,1
TIME 0000000e 1444726062.8,1
TIME 0000000e 1444726067.8,1
TIME 0000000e 1444726072.8,1
TIME 0000000e 1444726077.8,1
TIME 0000000e 1444726082.8,1
TIME 0000000e 1444726087.8,1
TIME 0000000e 1444726092.8,1
TIME 0000000e 1444726097.8,1
TIME 0000000e 1444726102.8,1
TIME 0000000e 1444726107.8,1
TIME 0000000e 1444726112.8,1
TIME 0000000e 1444726117.8,1
TIME 0000000e 1444726122.8,1
TIME 0000000e 1444726127.8,1
TIME 0000000e 1444726132.8,1
TIME 0000000e 1444726137.8,1
TIME 0000000e 1444726142.8,1
TIME 0000000e 1444726147.8,1
TIME 0000000e 1444726152.8,1
TIME 0000000e 1444726157.8,1
TIME 0000000e 1444726162.8,1
TIME 0000000e 1444726167.8,1
TIME 0000000e 1444726172.8,1
TIME 0000000e 1444726177.8,1
TIME 0000000e 1444726182.8,1
TIME 0000000e 1444726187.8,1
TIME 0000000e 1444726192.8,1
TIME 0000000e 1444726197.8,1
TIME 0000000e 1444726202.8,1
TIME 0000000e 1444726207.8,1
TIME 0000000e 1444726212.8,1
TIME 0000000e 1444726217.8,1
TIME 0000000e 1444726222.8,1
TIME 0000000e 1444726227.8,1
TIME 0000000e 1444726232.8,1
TIME 0000000e 1444726237.8,1
TIME 0000000e 1444726242.8,1
TIME 0000000e 1444726247.8,1
TIME 0000000e 1444726252.8,1
TIME 0000000e 1444726257.8,1
TIME 0000000e 1444726262.8,1
TIME 0000000e 1444726267.8,1
TIME 0000000e 1444726272.8,1
TIME 0000000e 1444726277.8,1
TIME 0000000e 1444726282.8,1
TIME 0000000e 1444726287.8,1
TIME 0000000e 1444726292.8,1
TIME 0000000e 1444726297.8,1
TIME 0000000e 1444726302.8,1
TIME 0000000e 1444726307.8,1
TIME 0000000e 1444726312.8,1
TIME 0000000e 1444726317.8,1
TIME 0000000e 1444726322.8,1
TIME 0000000e 1444726327.8,1
TIME 0000000e 1444726332.8,1
TIME 0000000e 1444726337.8,1
TIME 0000000e 1444726342.8,1
TIME 0000000e 1444726347.8,1
TIME 0000000e 1444726352.8,1
TIME 0000000e 1444726357.8,1
TIME 0000000e 1444726362.8,1
TIME 0000000e 1444726367.8,1
TIME 0000000e 1444726372.8,1
TIME 0000000e 1444726377.8,1
TIME 0000000e 1444726382.8,1
TIME 0000000e 1444726387.8,1
TIME 0000000e 1444726392.8,1
TIME 0000000e 1444726397.8,1
TIME 0000000e 1444726402.8,1
TIME 0000000e 1444726407.8,1
TIME 0000000e 1444726412.8,1
TIME 0000000e 1444726417.8,1
TIME 0000000e 1444726422.8,1
TIME 0000000e 1444726427.8,1
TIME 0000000e 1444726432.8,1
TIME 0000000e 1444726437.8,1
TIME 0000000e 1444726442.8,1
TIME 0000000e 1444726447.8,1
TIME 0000000e 1444726452.8,1
TIME 0000000e 1444726457.8,1
TIME 0000000e 1444726462.8,1
TIME 0000000e 1444726467.8,1
TIME 0000000e 1444726472.8,1
TIME 0000000e 1444726477.8,1
TIME 0000000e 1444726482.8,1
TIME 0000000e 1444726487.8,1
TIME 0000000e 1444726492.8,1
TIME 0000000e 1444726497.8,1
TIME 0000000e 1444726502.8,1
TIME 0000000e 1444726507.8,1
TIME 0000000e 1444726512.8,1
TIME 0000000e 1444726517.8,1
TIME 0000000e 1444726522.8,1
TIME 0000000e 1444726527.8,1
TIME 0000000e 1444726532.8,1
TIME 0000000e 1444726537.8,1
TIME 0000000e 1444726542.8,1
TIME 0000000e 1444726547.8,1
TIME 0000000e 1444726552.8,1
TIME 0000000e 1444726557.8,1
TIME 0000000e 1444726562.8,1
TIME 0000000e 1444726567.8,1
TIME 0000000e 1444726572.8,1
TIME 0000000e 1444726577.8,1
TIME 0000000e 1444726582.8,1
TIME 0000000e 1444726587.8,1
TIME 0000000e 1444726592.8,1
TIME 0000000e 1444726597.8,1
TIME 0000000e 1444726602.8,1
TIME 0000000e 1444726607.8,1
TIME 0000000e 1444726612.8,1
TIME 0000000e 1444726617.8,1
TIME 0000000e 1444726622.8,1
TIME 0000000e 1444726627.8,1
TIME 0000000e 1444726632.8,1
TIME 0000000e 1444726637.8,1
TIME 0000000e 1444726642.8,1
TIME 0000000e 1444726647.8,1
TIME 0000000e 1444726652.8,1
TIME 0000000e 1444726657.8,1
TIME 0000000e 1444726662.8,1
TIME 0000000e 1444726667.8,1
TIME 0000000e 1444726672.8,1
TIME 0000000e 1444726677.8,1
TIME 0000000e 1444726682.8,1
TIME 0000000e 1444726687.8,1
TIME 0000000e 1444726692.8,1
TIME 0000000e 1444726697.8,1
TIME 0000000e 1444726702.8,1
TIME 0000000e 1444726707.8,1
TIME 0000000e 1444726712.8,1
TIME 0000000e 1444726717.8,1
TIME 0000000e 1444726722.8,1
TIME 0000000e 1444726727.8,1
TIME 0000000e 1444726732.8,1
TIME 0000000e 1444726737.8,1
TIME 0000000e 1444726742.8,1
TIME 0000000e 1444726747.8,1
TIME 0000000e 1444726752.8,1
TIME 0000000e 1444726757.8,1
TIME 0000000e 1444726762.8,1
TIME 0000000e 1444726767.8,1
TIME 0000000e 1444726772.8,1
TIME 0000000e 1444726777.8,1
TIME 0000000e 1444726782.8,1
TIME 0000000e 1444726787.8,1
TIME 0000000e 1444726792.8,1
TIME 0000000e 1444726797.8,1
TIME 0000000e 1444726802.8,1
TIME 0000000e 1444726807.8,1
TIME 0000000e 1444726812.8,1
TIME 0000000e 1444726817.8,1
TIME 0000000e 1444726822.8,1
TIME 0000000e 1444726827.8,1
TIME 0000000e 1444726832.8,1
TIME 0000000e 1444726837.8,1
TIME 0000000e 1444726842.8,1
TIME 0000000e 1444726847.8,1
TIME 0000000e 1444726852.8,1
TIME 0000000e 1444726857.8,1
TIME 0000000e 1444726862.8,1
TIME 0000000e 1444726867.8,1
TIME 0000000e 1444726872.8,1
TIME 0000000e 1444726877.8,1
TIME 0000000e 1444726882.8,1
TIME 0000000e 1444726887.8,1
TIME 0000000e 1444726892.8,1
TIME 0000000e 1444726897.8,1
TIME 0000000e 1444726902.8,1
TIME 0000000e 1444726907.8,1
TIME 0000000e 1444726912.8,1
TIME 0000000e 1444726917.8,1
TIME 0000000e 1444726922.8,1
TIME 0000000e 1444726927.8,1
TIME 0000000e 1444726932.8,1
TIME 0000000e 1444726937.8,1
TIME 0000000e 1444726942.8,1
TIME 0000000e 1444726947.8,1
TIME 0000000e 1444726952.8,1
TIME 0000000e 1444726957.8,1
TIME 0000000e 1444726962.8,1
TIME 0000000e 1444726967.8,1
TIME 0000000e 1444726972.8,1
TIME 0000000e 1444726977.8,1
TIME 0000000e 1444726982.8,1
TIME 0000000e 1444726987.8,1
TIME 0000000e 1444726992.8,1
TIME 0000000e 1444726997.8,1
TIME 0000000e 1444727002.8,1
TIME 0000000e 1444727007.8,1
TIME 0000000e 1444727012.8,1
TIME 0000000e 1444727017.8,1
TIME 0000000e 1444727022.8,1
TIME 0000000e 1444727027.8,1
TIME 0000000e 1444727032.8,1
TIME 0000000e 1444727037.8,1
TIME 0000000e 1444727042.8,1
TIME 0000000e 1444727047.8,1
TIME 0000000e 1444727052.8,1
TIME 0000000e 1444727057.8,1
TIME 0000000e 1444727062.8,1
TIME 0000000e 1444727067.8,1
TIME 0000000e 1444727072.8,1
TIME 0000000e 1444727077.8,1
TIME 0000000e 1444727082.8,1
TIME 0000000e 1444727087.8,1
TIME 0000000e 1444727092.8,1
TIME 0000000e 1444727097.8,1
TIME 0000000e 1444727102.8,1
TIME 0000000e 1444727107.8,1
TIME 0000000e 1444727112.8,1
TIME 0000000e 1444727117.8,1
TIME 0000000e 1444727122.8,1
TIME 0000000e 1444727127.8,1
TIME 0000000e 1444727132.8,1
TIME 0000000e 1444727137.8,1
TIME 0000000e 1444727137.9,1
TIME 0000000e 1444727142.8,1
TIME 0000000e 1444727147.8,1
TIME 0000000e 1444727152.8,1
TIME 0000000e 1444727157.8,1
TIME 0000000e 1444727162.8,1
TIME 0000000e 1444727167.8,1
TIME 0000000e 1444727172.8,1
TIME 0000000e 1444727177.8,1
TIME 0000000e 1444727182.8,1
TIME 0000000e 1444727182.9,1
TIME 0000000e 1444727187.8,1
TIME 0000000e 1444727192.8,1
TIME 0000000e 1444727197.8,1
TIME 0000000e 1444727202.8,1
TIME 0000000e 1444727207.8,1
TIME 0000000e 1444727212.8,1
TIME 0000000e 1444727217.8,1
TIME 0000000e 1444727222.8,1
TIME 0000000e 1444727227.8,1
TIME 0000000e 1444727232.8,1
TIME 0000000e 1444727237.8,1
TIME 0000000e 1444727242.8,1
TIME 0000000e 1444727247.8,1
TIME 0000000e 1444727252.8,1
TIME 0000000e 1444727257.8,1
TIME 0000000e 1444727262.8,1
TIME 0000000e 1444727267.8,1
TIME 0000000e 1444727272.8,1
TIME 0000000e 1444727277.8,1
TIME 0000000e 1444727282.8,1
TIME 0000000e 1444727287.8,1
TIME 0000000e 1444727292.8,1
TIME 0000000e 1444727297.8,1
TIME 0000000e 1444727302.8,1
TIME 0000000e 1444727307.8,1
TIME 0000000e 1444727312.8,1
TIME 0000000e 1444727317.8,1
TIME 0000000e 1444727322.8,1
TIME 0000000e 1444727327.8,1
TIME 0000000e 1444727332.8,1
TIME 0000000e 1444727337.8,1
TIME 0000000e 1444727342.8,1
TIME 0000000e 1444727347.8,1
TIME 0000000e 1444727352.8,1
TIME 0000000e 1444727357.8,1
TIME 0000000e 1444727362.8,1
TIME 0000000e 1444727367.8,1
TIME 0000000e 1444727372.8,1
TIME 0000000e 1444727377.8,1
TIME 0000000e 1444727382.8,1
TIME 0000000e 1444727387.8,1
TIME 0000000e 1444727392.8,1
TIME 0000000e 1444727397.8,1
TIME 0000000e 1444727402.8,1
TIME 0000000e 1444727407.8,1
TIME 0000000e 1444727412.8,1
TIME 0000000e 1444727417.8,1
TIME 0000000e 1444727422.8,1
TIME 0000000e 1444727427.8,1
TIME 0000000e 1444727432.8,1
TIME 0000000e 1444727437.8,1
TIME 0000000e 1444727442.8,1
TIME 0000000e 1444727447.8,1
TIME 0000000e 1444727452.8,1
TIME 0000000e 1444727457.8,1
TIME 0000000e 1444727462.8,1
TIME 0000000e 1444727467.8,1
TIME 0000000e 1444727472.8,1
TIME 0000000e 1444727477.8,1
TIME 0000000e 1444727482.8,1
TIME 0000000e 1444727487.8,1
TIME 0000000e 1444727492.8,1
TIME 0000000e 1444727497.8,1
TIME 0000000e 1444727502.8,1
TIME 0000000e 1444727507.8,1
TIME 0000000e 1444727512.8,1
TIME 0000000e 1444727517.8,1
TIME 0000000e 1444727522.8,1
TIME 0000000e 1444727527.8,1
TIME 0000000e 1444727532.8,1
TIME 0000000e 1444727537.8,1
TIME 0000000e 1444727542.8,1
TIME 0000000e 1444727547.8,1
TIME 0000000e 1444727552.8,1
TIME 0000000e 1444727557.8,1
TIME 0000000e 1444727562.8,1
TIME 0000000e 1444727567.8,1
TIME 0000000e 1444727572.8,1
TIME 0000000e 1444727577.8,1
TIME 0000000e 1444727582.8,1
TIME 0000000e 1444727587.8,1
TIME 0000000e 1444727592.8,1
TIME 0000000e 1444727597.8,1
TIME 0000000e 1444727602.8,1
TIME 0000000e 1444727607.8,1
TIME 0000000e 1444727612.8,1
TIME 0000000e 1444727617.8,1
TIME 0000000e 1444727622.8,1
TIME 0000000e 1444727627.8,1
TIME 0000000e 1444727632.8,1
TIME 0000000e 1444727637.8,1
TIME 0000000e 1444727642.8,1
TIME 0000000e 1444727647.8,1
TIME 0000000e 1444727652.8,1
TIME 0000000e 1444727657.8,1
TIME 0000000e 1444727662.8,1
TIME 0000000e 1444727667.8,1
TIME 0000000e 1444727672.8,1
TIME 0000000e 1444727677.8,1
TIME 0000000e 1444727682.8,1
TIME 0000000e 1444727687.8,1
TIME 0000000e 1444727692.8,1
TIME 0000000e 1444727697.8,1
TIME 0000000e 1444727702.8,1
TIME 0000000e 1444727707.8,1
TIME 0000000e 1444727712.8,1
TIME 0000000e 1444727717.8,1
TIME 0000000e 1444727722.8,1
TIME 0000000e 1444727722.9,1
TIME 0000000e 1444727727.8,1
TIME 0000000e 1444727732.8,1
TIME 0000000e 1444727737.8,1
TIME 0000000e 1444727742.8,1
TIME 0000000e 1444727747.8,1
TIME 0000000e 1444727752.8,1
TIME 0000000e 1444727757.8,1
TIME 0000000e 1444727762.8,1
TIME 0000000e 1444727767.8,1
TIME 0000000e 1444727772.8,1
TIME 0000000e 1444727777.8,1
TIME 0000000e 1444727782.8,1
TIME 0000000e 1444727782.9,1
TIME 0000000e 1444727787.8,1
TIME 0000000e 1444727792.8,1
TIME 0000000e 1444727797.8,1
TIME 0000000e 1444727802.8,1
TIME 0000000e 1444727807.8,1
TIME 0000000e 1444727812.8,1
TIME 0000000e 1444727817.8,1
TIME 0000000e 1444727822.8,1
TIME 0000000e 1444727827.8,1
TIME 0000000e 1444727832.8,1
TIME 0000000e 1444727837.8,1
TIME 0000000e 1444727842.8,1
TIME 0000000e 1444727847.8,1
TIME 0000000e 1444727852.8,1
TIME 0000000e 1444727857.8,1
TIME 0000000e 1444727862.8,1
TIME 0000000e 1444727867.8,1
TIME 0000000e 1444727872.8,1
TIME 0000000e 1444727877.8,1
TIME 0000000e 1444727882.8,1
TIME 0000000e 1444727887.8,1
TIME 0000000e 1444727892.8,1
TIME 0000000e 1444727897.8,1
TIME 0000000e 1444727902.8,1
TIME 0000000e 1444727902.9,1
TIME 0000000e 1444727907.8,1
TIME 0000000e 1444727912.8,1
TIME 0000000e 1444727917.8,1
TIME 0000000e 1444727922.8,1
TIME 0000000e 1444727927.8,1
TIME 0000000e 1444727932.8,1
TIME 0000000e 1444727937.8,1
TIME 0000000e 1444727942.8,1
TIME 0000000e 1444727947.8,1
TIME 0000000e 1444727952.8,1
TIME 0000000e 1444727957.8,1
TIME 0000000e 1444727962.8,1
TIME 0000000e 1444727967.8,1
TIME 0000000e 1444727972.8,1
TIME 0000000e 1444727977.8,1
TIME 0000000e 1444727982.8,1
TIME 0000000e 1444727987.8,1
TIME 0000000e 1444727992.8,1
TIME 0000000e 1444727997.8,1
TIME 0000000e 1444728002.8,1
TIME 0000000e 1444728007.8,1
TIME 0000000e 1444728012.8,1
TIME 0000000e 1444728017.8,1
TIME 0000000e 1444728022.8,1
TIME 0000000e 1444728027.8,1
TIME 0000000e 1444728032.8,1
TIME 0000000e 1444728037.8,1
TIME 0000000e 1444728042.8,1
TIME 0000000e 1444728047.8,1
TIME 0000000e 1444728052.8,1
TIME 0000000e 1444728057.8,1
TIME 0000000e 1444728062.8,1
TIME 0000000e 1444728067.8,1
TIME 0000000e 1444728072.8,1
TIME 0000000e 1444728077.8,1
TIME 0000000e 1444728082.8,1
TIME 0000000e 1444728087.8,1
TIME 0000000e 1444728092.8,1
TIME 0000000e 1444728097.8,1
TIME 0000000e 1444728102.8,1
TIME 0000000e 1444728107.8,1
TIME 0000000e 1444728112.8,1
TIME 0000000e 1444728117.8,1
TIME 0000000e 1444728122.8,1
TIME 0000000e 1444728127.8,1
TIME 0000000e 1444728127.9,1
TIME 0000000e 1444728132.8,1
TIME 0000000e 1444728137.8,1
TIME 0000000e 1444728142.8,1
TIME 0000000e 1444728147.8,1
TIME 0000000e 1444728152.8,1
TIME 0000000e 1444728152.9,1
TIME 0000000e 1444728157.8,1
TIME 0000000e 1444728162.8,1
TIME 0000000e 1444728162.9,1
TIME 0000000e 1444728167.8,1
TIME 0000000e 1444728172.8,1
TIME 0000000e 1444728177.8,1
TIME 0000000e 1444728182.8,1
TIME 0000000e 1444728187.8,1
TIME 0000000e 1444728192.8,1
TIME 0000000e 1444728197.8,1
TIME 0000000e 1444728202.8,1
TIME 0000000e 1444728207.8,1
TIME 0000000e 1444728212.8,1
TIME 0000000e 1444728217.8,1
TIME 0000000e 1444728222.8,1
TIME 0000000e 1444728227.8,1
TIME 0000000e 1444728232.8,1
TIME 0000000e 1444728237.8,1
TIME 0000000e 1444728242.8,1
TIME 0000000e 1444728247.8,1
TIME 0000000e 1444728252.8,1
TIME 0000000e 1444728257.8,1
TIME 0000000e 1444728262.8,1
TIME 0000000e 1444728267.8,1
TIME 0000000e 1444728272.8,1
TIME 0000000e 1444728277.8,1
TIME 0000000e 1444728282.8,1
TIME 0000000e 1444728287.8,1
TIME 0000000e 1444728292.8,1
TIME 0000000e 1444728297.8,1
TIME 0000000e 1444728302.8,1
TIME 0000000e 1444728307.8,1
TIME 0000000e 1444728312.8,1
TIME 0000000e 1444728317.8,1
TIME 0000000e 1444728322.8,1
TIME 0000000e 1444728327.8,1
TIME 0000000e 1444728332.8,1
TIME 0000000e 1444728337.8,1
TIME 0000000e 1444728342.8,1
TIME 0000000e 1444728347.8,1
TIME 0000000e 1444728352.8,1
TIME 0000000e 1444728357.8,1
TIME 0000000e 1444728362.8,1
TIME 0000000e 1444728367.8,1
TIME 0000000e 1444728372.8,1
TIME 0000000e 1444728377.8,1
TIME 0000000e 1444728382.8,1
TIME 0000000e 1444728387.8,1
TIME 0000000e 1444728392.8,1
TIME 0000000e 1444728397.8,1
TIME 0000000e 1444728402.8,1
TIME 0000000e 1444728407.8,1
TIME 0000000e 1444728412.8,1
TIME 0000000e 1444728417.8,1
TIME 0000000e 1444728422.8,1
TIME 0000000e 1444728427.8,1
TIME 0000000e 1444728432.8,1
TIME 0000000e 1444728436.7,1
DISC 0000003c 6795184426424404343:6875781622866446711 from 127.0.0.1:57370
DISC 00000027 6204981785871021833:3955614762 from R01
DISC 00000036 6204981785871021833:3482309487 from internal:R:control
DISC 00000027 6204981785871021833:1865318693 from S01
